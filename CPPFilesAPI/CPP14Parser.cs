//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\VDMY\source\repos\cppCodeRules\AntlrCSharp\CPP14Parser.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class CPP14Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		IntegerLiteral=1, CharacterLiteral=2, FloatingLiteral=3, StringLiteral=4, 
		BooleanLiteral=5, PointerLiteral=6, UserDefinedLiteral=7, MultiLineMacro=8, 
		Directive=9, Alignas=10, Alignof=11, Asm=12, Auto=13, Bool=14, Break=15, 
		Case=16, Catch=17, Char=18, Char16=19, Char32=20, Class=21, Const=22, 
		Constexpr=23, Const_cast=24, Continue=25, Decltype=26, Default=27, Delete=28, 
		Do=29, Double=30, Dynamic_cast=31, Else=32, Enum=33, Explicit=34, Export=35, 
		Extern=36, False_=37, Final=38, Float=39, For=40, Friend=41, Goto=42, 
		If=43, Inline=44, Int=45, Long=46, Mutable=47, Namespace=48, New=49, Noexcept=50, 
		Nullptr=51, Operator=52, Override=53, Private=54, Protected=55, Public=56, 
		Register=57, Reinterpret_cast=58, Return=59, Short=60, Signed=61, Sizeof=62, 
		Static=63, Static_assert=64, Static_cast=65, Struct=66, Switch=67, Template=68, 
		This=69, Thread_local=70, Throw=71, True_=72, Try=73, Typedef=74, Typeid_=75, 
		Typename_=76, Union=77, Unsigned=78, Using=79, Virtual=80, Void=81, Volatile=82, 
		Wchar=83, While=84, LeftParen=85, RightParen=86, LeftBracket=87, RightBracket=88, 
		LeftBrace=89, RightBrace=90, Plus=91, Minus=92, Star=93, Div=94, Mod=95, 
		Caret=96, And=97, Or=98, Tilde=99, Not=100, Assign=101, Less=102, Greater=103, 
		PlusAssign=104, MinusAssign=105, StarAssign=106, DivAssign=107, ModAssign=108, 
		XorAssign=109, AndAssign=110, OrAssign=111, LeftShiftAssign=112, RightShiftAssign=113, 
		Equal=114, NotEqual=115, LessEqual=116, GreaterEqual=117, AndAnd=118, 
		OrOr=119, PlusPlus=120, MinusMinus=121, Comma=122, ArrowStar=123, Arrow=124, 
		Question=125, Colon=126, Doublecolon=127, Semi=128, Dot=129, DotStar=130, 
		Ellipsis=131, Identifier=132, DecimalLiteral=133, OctalLiteral=134, HexadecimalLiteral=135, 
		BinaryLiteral=136, Integersuffix=137, UserDefinedIntegerLiteral=138, UserDefinedFloatingLiteral=139, 
		UserDefinedStringLiteral=140, UserDefinedCharacterLiteral=141, Whitespace=142, 
		Newline=143, BlockComment=144, LineComment=145;
	public const int
		RULE_translationUnit = 0, RULE_primaryExpression = 1, RULE_idExpression = 2, 
		RULE_unqualifiedId = 3, RULE_qualifiedId = 4, RULE_nestedNameSpecifier = 5, 
		RULE_lambdaExpression = 6, RULE_lambdaIntroducer = 7, RULE_lambdaCapture = 8, 
		RULE_captureDefault = 9, RULE_captureList = 10, RULE_capture = 11, RULE_simpleCapture = 12, 
		RULE_initcapture = 13, RULE_lambdaDeclarator = 14, RULE_postfixExpression = 15, 
		RULE_typeIdOfTheTypeId = 16, RULE_expressionList = 17, RULE_pseudoDestructorName = 18, 
		RULE_unaryExpression = 19, RULE_unaryOperator = 20, RULE_newExpression = 21, 
		RULE_newPlacement = 22, RULE_newTypeId = 23, RULE_newDeclarator = 24, 
		RULE_noPointerNewDeclarator = 25, RULE_newInitializer = 26, RULE_deleteExpression = 27, 
		RULE_noExceptExpression = 28, RULE_castExpression = 29, RULE_pointerMemberExpression = 30, 
		RULE_multiplicativeExpression = 31, RULE_additiveExpression = 32, RULE_shiftExpression = 33, 
		RULE_shiftOperator = 34, RULE_relationalExpression = 35, RULE_equalityExpression = 36, 
		RULE_andExpression = 37, RULE_exclusiveOrExpression = 38, RULE_inclusiveOrExpression = 39, 
		RULE_logicalAndExpression = 40, RULE_logicalOrExpression = 41, RULE_conditionalExpression = 42, 
		RULE_assignmentExpression = 43, RULE_assignmentOperator = 44, RULE_expression = 45, 
		RULE_constantExpression = 46, RULE_statement = 47, RULE_labeledStatement = 48, 
		RULE_expressionStatement = 49, RULE_compoundStatement = 50, RULE_statementSeq = 51, 
		RULE_selectionStatement = 52, RULE_condition = 53, RULE_iterationStatement = 54, 
		RULE_forInitStatement = 55, RULE_forRangeDeclaration = 56, RULE_forRangeInitializer = 57, 
		RULE_jumpStatement = 58, RULE_declarationStatement = 59, RULE_declarationseq = 60, 
		RULE_declaration = 61, RULE_blockDeclaration = 62, RULE_aliasDeclaration = 63, 
		RULE_simpleDeclaration = 64, RULE_staticAssertDeclaration = 65, RULE_emptyDeclaration = 66, 
		RULE_attributeDeclaration = 67, RULE_declSpecifier = 68, RULE_declSpecifierSeq = 69, 
		RULE_storageClassSpecifier = 70, RULE_functionSpecifier = 71, RULE_typedefName = 72, 
		RULE_typeSpecifier = 73, RULE_trailingTypeSpecifier = 74, RULE_typeSpecifierSeq = 75, 
		RULE_trailingTypeSpecifierSeq = 76, RULE_simpleTypeLengthModifier = 77, 
		RULE_simpleTypeSignednessModifier = 78, RULE_simpleTypeSpecifier = 79, 
		RULE_theTypeName = 80, RULE_decltypeSpecifier = 81, RULE_elaboratedTypeSpecifier = 82, 
		RULE_enumName = 83, RULE_enumSpecifier = 84, RULE_enumHead = 85, RULE_opaqueEnumDeclaration = 86, 
		RULE_enumkey = 87, RULE_enumbase = 88, RULE_enumeratorList = 89, RULE_enumeratorDefinition = 90, 
		RULE_enumerator = 91, RULE_namespaceName = 92, RULE_originalNamespaceName = 93, 
		RULE_namespaceDefinition = 94, RULE_namespaceAlias = 95, RULE_namespaceAliasDefinition = 96, 
		RULE_qualifiednamespacespecifier = 97, RULE_usingDeclaration = 98, RULE_usingDirective = 99, 
		RULE_asmDefinition = 100, RULE_linkageSpecification = 101, RULE_attributeSpecifierSeq = 102, 
		RULE_attributeSpecifier = 103, RULE_alignmentspecifier = 104, RULE_attributeList = 105, 
		RULE_attribute = 106, RULE_attributeNamespace = 107, RULE_attributeArgumentClause = 108, 
		RULE_balancedTokenSeq = 109, RULE_balancedtoken = 110, RULE_initDeclaratorList = 111, 
		RULE_initDeclarator = 112, RULE_declarator = 113, RULE_pointerDeclarator = 114, 
		RULE_noPointerDeclarator = 115, RULE_parametersAndQualifiers = 116, RULE_trailingReturnType = 117, 
		RULE_pointerOperator = 118, RULE_cvqualifierseq = 119, RULE_cvQualifier = 120, 
		RULE_refqualifier = 121, RULE_declaratorid = 122, RULE_theTypeId = 123, 
		RULE_abstractDeclarator = 124, RULE_pointerAbstractDeclarator = 125, RULE_noPointerAbstractDeclarator = 126, 
		RULE_abstractPackDeclarator = 127, RULE_noPointerAbstractPackDeclarator = 128, 
		RULE_parameterDeclarationClause = 129, RULE_parameterDeclarationList = 130, 
		RULE_parameterDeclaration = 131, RULE_functionDefinition = 132, RULE_functionBody = 133, 
		RULE_initializer = 134, RULE_braceOrEqualInitializer = 135, RULE_initializerClause = 136, 
		RULE_initializerList = 137, RULE_bracedInitList = 138, RULE_className = 139, 
		RULE_classSpecifier = 140, RULE_classHead = 141, RULE_classHeadName = 142, 
		RULE_classVirtSpecifier = 143, RULE_classKey = 144, RULE_memberSpecification = 145, 
		RULE_memberdeclaration = 146, RULE_memberDeclaratorList = 147, RULE_memberDeclarator = 148, 
		RULE_virtualSpecifierSeq = 149, RULE_virtualSpecifier = 150, RULE_pureSpecifier = 151, 
		RULE_baseClause = 152, RULE_baseSpecifierList = 153, RULE_baseSpecifier = 154, 
		RULE_classOrDeclType = 155, RULE_baseTypeSpecifier = 156, RULE_accessSpecifier = 157, 
		RULE_conversionFunctionId = 158, RULE_conversionTypeId = 159, RULE_conversionDeclarator = 160, 
		RULE_constructorInitializer = 161, RULE_memInitializerList = 162, RULE_memInitializer = 163, 
		RULE_meminitializerid = 164, RULE_operatorFunctionId = 165, RULE_literalOperatorId = 166, 
		RULE_templateDeclaration = 167, RULE_templateparameterList = 168, RULE_templateParameter = 169, 
		RULE_typeParameter = 170, RULE_simpleTemplateId = 171, RULE_templateId = 172, 
		RULE_templateName = 173, RULE_templateArgumentList = 174, RULE_templateArgument = 175, 
		RULE_typeNameSpecifier = 176, RULE_explicitInstantiation = 177, RULE_explicitSpecialization = 178, 
		RULE_tryBlock = 179, RULE_functionTryBlock = 180, RULE_handlerSeq = 181, 
		RULE_handler = 182, RULE_exceptionDeclaration = 183, RULE_throwExpression = 184, 
		RULE_exceptionSpecification = 185, RULE_dynamicExceptionSpecification = 186, 
		RULE_typeIdList = 187, RULE_noeExceptSpecification = 188, RULE_theOperator = 189, 
		RULE_literal = 190;
	public static readonly string[] ruleNames = {
		"translationUnit", "primaryExpression", "idExpression", "unqualifiedId", 
		"qualifiedId", "nestedNameSpecifier", "lambdaExpression", "lambdaIntroducer", 
		"lambdaCapture", "captureDefault", "captureList", "capture", "simpleCapture", 
		"initcapture", "lambdaDeclarator", "postfixExpression", "typeIdOfTheTypeId", 
		"expressionList", "pseudoDestructorName", "unaryExpression", "unaryOperator", 
		"newExpression", "newPlacement", "newTypeId", "newDeclarator", "noPointerNewDeclarator", 
		"newInitializer", "deleteExpression", "noExceptExpression", "castExpression", 
		"pointerMemberExpression", "multiplicativeExpression", "additiveExpression", 
		"shiftExpression", "shiftOperator", "relationalExpression", "equalityExpression", 
		"andExpression", "exclusiveOrExpression", "inclusiveOrExpression", "logicalAndExpression", 
		"logicalOrExpression", "conditionalExpression", "assignmentExpression", 
		"assignmentOperator", "expression", "constantExpression", "statement", 
		"labeledStatement", "expressionStatement", "compoundStatement", "statementSeq", 
		"selectionStatement", "condition", "iterationStatement", "forInitStatement", 
		"forRangeDeclaration", "forRangeInitializer", "jumpStatement", "declarationStatement", 
		"declarationseq", "declaration", "blockDeclaration", "aliasDeclaration", 
		"simpleDeclaration", "staticAssertDeclaration", "emptyDeclaration", "attributeDeclaration", 
		"declSpecifier", "declSpecifierSeq", "storageClassSpecifier", "functionSpecifier", 
		"typedefName", "typeSpecifier", "trailingTypeSpecifier", "typeSpecifierSeq", 
		"trailingTypeSpecifierSeq", "simpleTypeLengthModifier", "simpleTypeSignednessModifier", 
		"simpleTypeSpecifier", "theTypeName", "decltypeSpecifier", "elaboratedTypeSpecifier", 
		"enumName", "enumSpecifier", "enumHead", "opaqueEnumDeclaration", "enumkey", 
		"enumbase", "enumeratorList", "enumeratorDefinition", "enumerator", "namespaceName", 
		"originalNamespaceName", "namespaceDefinition", "namespaceAlias", "namespaceAliasDefinition", 
		"qualifiednamespacespecifier", "usingDeclaration", "usingDirective", "asmDefinition", 
		"linkageSpecification", "attributeSpecifierSeq", "attributeSpecifier", 
		"alignmentspecifier", "attributeList", "attribute", "attributeNamespace", 
		"attributeArgumentClause", "balancedTokenSeq", "balancedtoken", "initDeclaratorList", 
		"initDeclarator", "declarator", "pointerDeclarator", "noPointerDeclarator", 
		"parametersAndQualifiers", "trailingReturnType", "pointerOperator", "cvqualifierseq", 
		"cvQualifier", "refqualifier", "declaratorid", "theTypeId", "abstractDeclarator", 
		"pointerAbstractDeclarator", "noPointerAbstractDeclarator", "abstractPackDeclarator", 
		"noPointerAbstractPackDeclarator", "parameterDeclarationClause", "parameterDeclarationList", 
		"parameterDeclaration", "functionDefinition", "functionBody", "initializer", 
		"braceOrEqualInitializer", "initializerClause", "initializerList", "bracedInitList", 
		"className", "classSpecifier", "classHead", "classHeadName", "classVirtSpecifier", 
		"classKey", "memberSpecification", "memberdeclaration", "memberDeclaratorList", 
		"memberDeclarator", "virtualSpecifierSeq", "virtualSpecifier", "pureSpecifier", 
		"baseClause", "baseSpecifierList", "baseSpecifier", "classOrDeclType", 
		"baseTypeSpecifier", "accessSpecifier", "conversionFunctionId", "conversionTypeId", 
		"conversionDeclarator", "constructorInitializer", "memInitializerList", 
		"memInitializer", "meminitializerid", "operatorFunctionId", "literalOperatorId", 
		"templateDeclaration", "templateparameterList", "templateParameter", "typeParameter", 
		"simpleTemplateId", "templateId", "templateName", "templateArgumentList", 
		"templateArgument", "typeNameSpecifier", "explicitInstantiation", "explicitSpecialization", 
		"tryBlock", "functionTryBlock", "handlerSeq", "handler", "exceptionDeclaration", 
		"throwExpression", "exceptionSpecification", "dynamicExceptionSpecification", 
		"typeIdList", "noeExceptSpecification", "theOperator", "literal"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, "'alignas'", 
		"'alignof'", "'asm'", "'auto'", "'bool'", "'break'", "'case'", "'catch'", 
		"'char'", "'char16_t'", "'char32_t'", "'class'", "'const'", "'constexpr'", 
		"'const_cast'", "'continue'", "'decltype'", "'default'", "'delete'", "'do'", 
		"'double'", "'dynamic_cast'", "'else'", "'enum'", "'explicit'", "'export'", 
		"'extern'", "'false'", "'final'", "'float'", "'for'", "'friend'", "'goto'", 
		"'if'", "'inline'", "'int'", "'long'", "'mutable'", "'namespace'", "'new'", 
		"'noexcept'", "'nullptr'", "'operator'", "'override'", "'private'", "'protected'", 
		"'public'", "'register'", "'reinterpret_cast'", "'return'", "'short'", 
		"'signed'", "'sizeof'", "'static'", "'static_assert'", "'static_cast'", 
		"'struct'", "'switch'", "'template'", "'this'", "'thread_local'", "'throw'", 
		"'true'", "'try'", "'typedef'", "'typeid'", "'typename'", "'union'", "'unsigned'", 
		"'using'", "'virtual'", "'void'", "'volatile'", "'wchar_t'", "'while'", 
		"'('", "')'", "'['", "']'", "'{'", "'}'", "'+'", "'-'", "'*'", "'/'", 
		"'%'", "'^'", "'&'", "'|'", "'~'", null, "'='", "'<'", "'>'", "'+='", 
		"'-='", "'*='", "'/='", "'%='", "'^='", "'&='", "'|='", "'<<='", "'>>='", 
		"'=='", "'!='", "'<='", "'>='", null, null, "'++'", "'--'", "','", "'->*'", 
		"'->'", "'?'", "':'", "'::'", "';'", "'.'", "'.*'", "'...'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "IntegerLiteral", "CharacterLiteral", "FloatingLiteral", "StringLiteral", 
		"BooleanLiteral", "PointerLiteral", "UserDefinedLiteral", "MultiLineMacro", 
		"Directive", "Alignas", "Alignof", "Asm", "Auto", "Bool", "Break", "Case", 
		"Catch", "Char", "Char16", "Char32", "Class", "Const", "Constexpr", "Const_cast", 
		"Continue", "Decltype", "Default", "Delete", "Do", "Double", "Dynamic_cast", 
		"Else", "Enum", "Explicit", "Export", "Extern", "False_", "Final", "Float", 
		"For", "Friend", "Goto", "If", "Inline", "Int", "Long", "Mutable", "Namespace", 
		"New", "Noexcept", "Nullptr", "Operator", "Override", "Private", "Protected", 
		"Public", "Register", "Reinterpret_cast", "Return", "Short", "Signed", 
		"Sizeof", "Static", "Static_assert", "Static_cast", "Struct", "Switch", 
		"Template", "This", "Thread_local", "Throw", "True_", "Try", "Typedef", 
		"Typeid_", "Typename_", "Union", "Unsigned", "Using", "Virtual", "Void", 
		"Volatile", "Wchar", "While", "LeftParen", "RightParen", "LeftBracket", 
		"RightBracket", "LeftBrace", "RightBrace", "Plus", "Minus", "Star", "Div", 
		"Mod", "Caret", "And", "Or", "Tilde", "Not", "Assign", "Less", "Greater", 
		"PlusAssign", "MinusAssign", "StarAssign", "DivAssign", "ModAssign", "XorAssign", 
		"AndAssign", "OrAssign", "LeftShiftAssign", "RightShiftAssign", "Equal", 
		"NotEqual", "LessEqual", "GreaterEqual", "AndAnd", "OrOr", "PlusPlus", 
		"MinusMinus", "Comma", "ArrowStar", "Arrow", "Question", "Colon", "Doublecolon", 
		"Semi", "Dot", "DotStar", "Ellipsis", "Identifier", "DecimalLiteral", 
		"OctalLiteral", "HexadecimalLiteral", "BinaryLiteral", "Integersuffix", 
		"UserDefinedIntegerLiteral", "UserDefinedFloatingLiteral", "UserDefinedStringLiteral", 
		"UserDefinedCharacterLiteral", "Whitespace", "Newline", "BlockComment", 
		"LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CPP14Parser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CPP14Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CPP14Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CPP14Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class TranslationUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(CPP14Parser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationseqContext declarationseq() {
			return GetRuleContext<DeclarationseqContext>(0);
		}
		public TranslationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_translationUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTranslationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TranslationUnitContext translationUnit() {
		TranslationUnitContext _localctx = new TranslationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_translationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 383;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (Alignas - 10)) | (1L << (Asm - 10)) | (1L << (Auto - 10)) | (1L << (Bool - 10)) | (1L << (Char - 10)) | (1L << (Char16 - 10)) | (1L << (Char32 - 10)) | (1L << (Class - 10)) | (1L << (Const - 10)) | (1L << (Constexpr - 10)) | (1L << (Decltype - 10)) | (1L << (Double - 10)) | (1L << (Enum - 10)) | (1L << (Explicit - 10)) | (1L << (Extern - 10)) | (1L << (Float - 10)) | (1L << (Friend - 10)) | (1L << (Inline - 10)) | (1L << (Int - 10)) | (1L << (Long - 10)) | (1L << (Mutable - 10)) | (1L << (Namespace - 10)) | (1L << (Operator - 10)) | (1L << (Register - 10)) | (1L << (Short - 10)) | (1L << (Signed - 10)) | (1L << (Static - 10)) | (1L << (Static_assert - 10)) | (1L << (Struct - 10)) | (1L << (Template - 10)) | (1L << (Thread_local - 10)))) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (Typedef - 74)) | (1L << (Typename_ - 74)) | (1L << (Union - 74)) | (1L << (Unsigned - 74)) | (1L << (Using - 74)) | (1L << (Virtual - 74)) | (1L << (Void - 74)) | (1L << (Volatile - 74)) | (1L << (Wchar - 74)) | (1L << (LeftParen - 74)) | (1L << (LeftBracket - 74)) | (1L << (Star - 74)) | (1L << (And - 74)) | (1L << (Tilde - 74)) | (1L << (AndAnd - 74)) | (1L << (Doublecolon - 74)) | (1L << (Semi - 74)) | (1L << (Ellipsis - 74)) | (1L << (Identifier - 74)))) != 0)) {
				{
				State = 382;
				declarationseq();
				}
			}

			State = 385;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext[] literal() {
			return GetRuleContexts<LiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode This() { return GetToken(CPP14Parser.This, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdExpressionContext idExpression() {
			return GetRuleContext<IdExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LambdaExpressionContext lambdaExpression() {
			return GetRuleContext<LambdaExpressionContext>(0);
		}
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 2, RULE_primaryExpression);
		try {
			int _alt;
			State = 399;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IntegerLiteral:
			case CharacterLiteral:
			case FloatingLiteral:
			case StringLiteral:
			case BooleanLiteral:
			case PointerLiteral:
			case UserDefinedLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 388;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 387;
						literal();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 390;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case This:
				EnterOuterAlt(_localctx, 2);
				{
				State = 392;
				Match(This);
				}
				break;
			case LeftParen:
				EnterOuterAlt(_localctx, 3);
				{
				State = 393;
				Match(LeftParen);
				State = 394;
				expression();
				State = 395;
				Match(RightParen);
				}
				break;
			case Decltype:
			case Operator:
			case Tilde:
			case Doublecolon:
			case Identifier:
				EnterOuterAlt(_localctx, 4);
				{
				State = 397;
				idExpression();
				}
				break;
			case LeftBracket:
				EnterOuterAlt(_localctx, 5);
				{
				State = 398;
				lambdaExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnqualifiedIdContext unqualifiedId() {
			return GetRuleContext<UnqualifiedIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdContext qualifiedId() {
			return GetRuleContext<QualifiedIdContext>(0);
		}
		public IdExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdExpressionContext idExpression() {
		IdExpressionContext _localctx = new IdExpressionContext(Context, State);
		EnterRule(_localctx, 4, RULE_idExpression);
		try {
			State = 403;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 401;
				unqualifiedId();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 402;
				qualifiedId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnqualifiedIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OperatorFunctionIdContext operatorFunctionId() {
			return GetRuleContext<OperatorFunctionIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConversionFunctionIdContext conversionFunctionId() {
			return GetRuleContext<ConversionFunctionIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralOperatorIdContext literalOperatorId() {
			return GetRuleContext<LiteralOperatorIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tilde() { return GetToken(CPP14Parser.Tilde, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecltypeSpecifierContext decltypeSpecifier() {
			return GetRuleContext<DecltypeSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateIdContext templateId() {
			return GetRuleContext<TemplateIdContext>(0);
		}
		public UnqualifiedIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unqualifiedId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnqualifiedId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnqualifiedIdContext unqualifiedId() {
		UnqualifiedIdContext _localctx = new UnqualifiedIdContext(Context, State);
		EnterRule(_localctx, 6, RULE_unqualifiedId);
		try {
			State = 415;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 405;
				Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 406;
				operatorFunctionId();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 407;
				conversionFunctionId();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 408;
				literalOperatorId();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 409;
				Match(Tilde);
				State = 412;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Identifier:
					{
					State = 410;
					className();
					}
					break;
				case Decltype:
					{
					State = 411;
					decltypeSpecifier();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 414;
				templateId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NestedNameSpecifierContext nestedNameSpecifier() {
			return GetRuleContext<NestedNameSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnqualifiedIdContext unqualifiedId() {
			return GetRuleContext<UnqualifiedIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		public QualifiedIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedIdContext qualifiedId() {
		QualifiedIdContext _localctx = new QualifiedIdContext(Context, State);
		EnterRule(_localctx, 8, RULE_qualifiedId);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 417;
			nestedNameSpecifier(0);
			State = 419;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Template) {
				{
				State = 418;
				Match(Template);
				}
			}

			State = 421;
			unqualifiedId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestedNameSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Doublecolon() { return GetToken(CPP14Parser.Doublecolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TheTypeNameContext theTypeName() {
			return GetRuleContext<TheTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecltypeSpecifierContext decltypeSpecifier() {
			return GetRuleContext<DecltypeSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestedNameSpecifierContext nestedNameSpecifier() {
			return GetRuleContext<NestedNameSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTemplateIdContext simpleTemplateId() {
			return GetRuleContext<SimpleTemplateIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		public NestedNameSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestedNameSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedNameSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NestedNameSpecifierContext nestedNameSpecifier() {
		return nestedNameSpecifier(0);
	}

	private NestedNameSpecifierContext nestedNameSpecifier(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NestedNameSpecifierContext _localctx = new NestedNameSpecifierContext(Context, _parentState);
		NestedNameSpecifierContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_nestedNameSpecifier, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 427;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 424;
				theTypeName();
				}
				break;
			case 2:
				{
				State = 425;
				namespaceName();
				}
				break;
			case 3:
				{
				State = 426;
				decltypeSpecifier();
				}
				break;
			}
			State = 429;
			Match(Doublecolon);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 442;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new NestedNameSpecifierContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_nestedNameSpecifier);
					State = 431;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 437;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
					case 1:
						{
						State = 432;
						Match(Identifier);
						}
						break;
					case 2:
						{
						State = 434;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==Template) {
							{
							State = 433;
							Match(Template);
							}
						}

						State = 436;
						simpleTemplateId();
						}
						break;
					}
					State = 439;
					Match(Doublecolon);
					}
					} 
				}
				State = 444;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LambdaExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LambdaIntroducerContext lambdaIntroducer() {
			return GetRuleContext<LambdaIntroducerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LambdaDeclaratorContext lambdaDeclarator() {
			return GetRuleContext<LambdaDeclaratorContext>(0);
		}
		public LambdaExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaExpressionContext lambdaExpression() {
		LambdaExpressionContext _localctx = new LambdaExpressionContext(Context, State);
		EnterRule(_localctx, 12, RULE_lambdaExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 445;
			lambdaIntroducer();
			State = 447;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LeftParen) {
				{
				State = 446;
				lambdaDeclarator();
				}
			}

			State = 449;
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaIntroducerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(CPP14Parser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(CPP14Parser.RightBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LambdaCaptureContext lambdaCapture() {
			return GetRuleContext<LambdaCaptureContext>(0);
		}
		public LambdaIntroducerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaIntroducer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaIntroducer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaIntroducerContext lambdaIntroducer() {
		LambdaIntroducerContext _localctx = new LambdaIntroducerContext(Context, State);
		EnterRule(_localctx, 14, RULE_lambdaIntroducer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 451;
			Match(LeftBracket);
			State = 453;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (This - 69)) | (1L << (And - 69)) | (1L << (Assign - 69)) | (1L << (Identifier - 69)))) != 0)) {
				{
				State = 452;
				lambdaCapture();
				}
			}

			State = 455;
			Match(RightBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaCaptureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaptureListContext captureList() {
			return GetRuleContext<CaptureListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaptureDefaultContext captureDefault() {
			return GetRuleContext<CaptureDefaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public LambdaCaptureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaCapture; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaCapture(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaCaptureContext lambdaCapture() {
		LambdaCaptureContext _localctx = new LambdaCaptureContext(Context, State);
		EnterRule(_localctx, 16, RULE_lambdaCapture);
		int _la;
		try {
			State = 463;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 457;
				captureList();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 458;
				captureDefault();
				State = 461;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 459;
					Match(Comma);
					State = 460;
					captureList();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaptureDefaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(CPP14Parser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		public CaptureDefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_captureDefault; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaptureDefault(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaptureDefaultContext captureDefault() {
		CaptureDefaultContext _localctx = new CaptureDefaultContext(Context, State);
		EnterRule(_localctx, 18, RULE_captureDefault);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 465;
			_la = TokenStream.LA(1);
			if ( !(_la==And || _la==Assign) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaptureListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaptureContext[] capture() {
			return GetRuleContexts<CaptureContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaptureContext capture(int i) {
			return GetRuleContext<CaptureContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CPP14Parser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CPP14Parser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		public CaptureListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_captureList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaptureList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaptureListContext captureList() {
		CaptureListContext _localctx = new CaptureListContext(Context, State);
		EnterRule(_localctx, 20, RULE_captureList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 467;
			capture();
			State = 472;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 468;
				Match(Comma);
				State = 469;
				capture();
				}
				}
				State = 474;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 476;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Ellipsis) {
				{
				State = 475;
				Match(Ellipsis);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaptureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleCaptureContext simpleCapture() {
			return GetRuleContext<SimpleCaptureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitcaptureContext initcapture() {
			return GetRuleContext<InitcaptureContext>(0);
		}
		public CaptureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_capture; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCapture(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaptureContext capture() {
		CaptureContext _localctx = new CaptureContext(Context, State);
		EnterRule(_localctx, 22, RULE_capture);
		try {
			State = 480;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 478;
				simpleCapture();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 479;
				initcapture();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleCaptureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(CPP14Parser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode This() { return GetToken(CPP14Parser.This, 0); }
		public SimpleCaptureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleCapture; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleCapture(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleCaptureContext simpleCapture() {
		SimpleCaptureContext _localctx = new SimpleCaptureContext(Context, State);
		EnterRule(_localctx, 24, RULE_simpleCapture);
		int _la;
		try {
			State = 487;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case And:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 483;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==And) {
					{
					State = 482;
					Match(And);
					}
				}

				State = 485;
				Match(Identifier);
				}
				break;
			case This:
				EnterOuterAlt(_localctx, 2);
				{
				State = 486;
				Match(This);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitcaptureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InitializerContext initializer() {
			return GetRuleContext<InitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(CPP14Parser.And, 0); }
		public InitcaptureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initcapture; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitcapture(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitcaptureContext initcapture() {
		InitcaptureContext _localctx = new InitcaptureContext(Context, State);
		EnterRule(_localctx, 26, RULE_initcapture);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 490;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==And) {
				{
				State = 489;
				Match(And);
				}
			}

			State = 492;
			Match(Identifier);
			State = 493;
			initializer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterDeclarationClauseContext parameterDeclarationClause() {
			return GetRuleContext<ParameterDeclarationClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mutable() { return GetToken(CPP14Parser.Mutable, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExceptionSpecificationContext exceptionSpecification() {
			return GetRuleContext<ExceptionSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TrailingReturnTypeContext trailingReturnType() {
			return GetRuleContext<TrailingReturnTypeContext>(0);
		}
		public LambdaDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaDeclaratorContext lambdaDeclarator() {
		LambdaDeclaratorContext _localctx = new LambdaDeclaratorContext(Context, State);
		EnterRule(_localctx, 28, RULE_lambdaDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 495;
			Match(LeftParen);
			State = 497;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (Alignas - 10)) | (1L << (Auto - 10)) | (1L << (Bool - 10)) | (1L << (Char - 10)) | (1L << (Char16 - 10)) | (1L << (Char32 - 10)) | (1L << (Class - 10)) | (1L << (Const - 10)) | (1L << (Constexpr - 10)) | (1L << (Decltype - 10)) | (1L << (Double - 10)) | (1L << (Enum - 10)) | (1L << (Explicit - 10)) | (1L << (Extern - 10)) | (1L << (Float - 10)) | (1L << (Friend - 10)) | (1L << (Inline - 10)) | (1L << (Int - 10)) | (1L << (Long - 10)) | (1L << (Mutable - 10)) | (1L << (Register - 10)) | (1L << (Short - 10)) | (1L << (Signed - 10)) | (1L << (Static - 10)) | (1L << (Struct - 10)) | (1L << (Thread_local - 10)))) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (Typedef - 74)) | (1L << (Typename_ - 74)) | (1L << (Union - 74)) | (1L << (Unsigned - 74)) | (1L << (Virtual - 74)) | (1L << (Void - 74)) | (1L << (Volatile - 74)) | (1L << (Wchar - 74)) | (1L << (LeftBracket - 74)) | (1L << (Doublecolon - 74)) | (1L << (Identifier - 74)))) != 0)) {
				{
				State = 496;
				parameterDeclarationClause();
				}
			}

			State = 499;
			Match(RightParen);
			State = 501;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Mutable) {
				{
				State = 500;
				Match(Mutable);
				}
			}

			State = 504;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Noexcept || _la==Throw) {
				{
				State = 503;
				exceptionSpecification();
				}
			}

			State = 507;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Alignas || _la==LeftBracket) {
				{
				State = 506;
				attributeSpecifierSeq();
				}
			}

			State = 510;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Arrow) {
				{
				State = 509;
				trailingReturnType();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeSpecifierContext simpleTypeSpecifier() {
			return GetRuleContext<SimpleTypeSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameSpecifierContext typeNameSpecifier() {
			return GetRuleContext<TypeNameSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BracedInitListContext bracedInitList() {
			return GetRuleContext<BracedInitListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less() { return GetToken(CPP14Parser.Less, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TheTypeIdContext theTypeId() {
			return GetRuleContext<TheTypeIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(CPP14Parser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dynamic_cast() { return GetToken(CPP14Parser.Dynamic_cast, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static_cast() { return GetToken(CPP14Parser.Static_cast, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Reinterpret_cast() { return GetToken(CPP14Parser.Reinterpret_cast, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const_cast() { return GetToken(CPP14Parser.Const_cast, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeIdOfTheTypeIdContext typeIdOfTheTypeId() {
			return GetRuleContext<TypeIdOfTheTypeIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(CPP14Parser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(CPP14Parser.RightBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(CPP14Parser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow() { return GetToken(CPP14Parser.Arrow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdExpressionContext idExpression() {
			return GetRuleContext<IdExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PseudoDestructorNameContext pseudoDestructorName() {
			return GetRuleContext<PseudoDestructorNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(CPP14Parser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(CPP14Parser.MinusMinus, 0); }
		public PostfixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostfixExpressionContext postfixExpression() {
		return postfixExpression(0);
	}

	private PostfixExpressionContext postfixExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PostfixExpressionContext _localctx = new PostfixExpressionContext(Context, _parentState);
		PostfixExpressionContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_postfixExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 542;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 513;
				primaryExpression();
				}
				break;
			case 2:
				{
				State = 516;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Auto:
				case Bool:
				case Char:
				case Char16:
				case Char32:
				case Decltype:
				case Double:
				case Float:
				case Int:
				case Long:
				case Short:
				case Signed:
				case Unsigned:
				case Void:
				case Wchar:
				case Doublecolon:
				case Identifier:
					{
					State = 514;
					simpleTypeSpecifier();
					}
					break;
				case Typename_:
					{
					State = 515;
					typeNameSpecifier();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 524;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LeftParen:
					{
					State = 518;
					Match(LeftParen);
					State = 520;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IntegerLiteral) | (1L << CharacterLiteral) | (1L << FloatingLiteral) | (1L << StringLiteral) | (1L << BooleanLiteral) | (1L << PointerLiteral) | (1L << UserDefinedLiteral) | (1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Static_cast - 65)) | (1L << (This - 65)) | (1L << (Throw - 65)) | (1L << (Typeid_ - 65)) | (1L << (Typename_ - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (LeftBrace - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (Not - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (Doublecolon - 65)))) != 0) || _la==Identifier) {
						{
						State = 519;
						expressionList();
						}
					}

					State = 522;
					Match(RightParen);
					}
					break;
				case LeftBrace:
					{
					State = 523;
					bracedInitList();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				{
				State = 526;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 24)) & ~0x3f) == 0 && ((1L << (_la - 24)) & ((1L << (Const_cast - 24)) | (1L << (Dynamic_cast - 24)) | (1L << (Reinterpret_cast - 24)) | (1L << (Static_cast - 24)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 527;
				Match(Less);
				State = 528;
				theTypeId();
				State = 529;
				Match(Greater);
				State = 530;
				Match(LeftParen);
				State = 531;
				expression();
				State = 532;
				Match(RightParen);
				}
				break;
			case 4:
				{
				State = 534;
				typeIdOfTheTypeId();
				State = 535;
				Match(LeftParen);
				State = 538;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
				case 1:
					{
					State = 536;
					expression();
					}
					break;
				case 2:
					{
					State = 537;
					theTypeId();
					}
					break;
				}
				State = 540;
				Match(RightParen);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 571;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 569;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
					case 1:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 544;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 545;
						Match(LeftBracket);
						State = 548;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case IntegerLiteral:
						case CharacterLiteral:
						case FloatingLiteral:
						case StringLiteral:
						case BooleanLiteral:
						case PointerLiteral:
						case UserDefinedLiteral:
						case Alignof:
						case Auto:
						case Bool:
						case Char:
						case Char16:
						case Char32:
						case Const_cast:
						case Decltype:
						case Delete:
						case Double:
						case Dynamic_cast:
						case Float:
						case Int:
						case Long:
						case New:
						case Noexcept:
						case Operator:
						case Reinterpret_cast:
						case Short:
						case Signed:
						case Sizeof:
						case Static_cast:
						case This:
						case Throw:
						case Typeid_:
						case Typename_:
						case Unsigned:
						case Void:
						case Wchar:
						case LeftParen:
						case LeftBracket:
						case Plus:
						case Minus:
						case Star:
						case And:
						case Or:
						case Tilde:
						case Not:
						case PlusPlus:
						case MinusMinus:
						case Doublecolon:
						case Identifier:
							{
							State = 546;
							expression();
							}
							break;
						case LeftBrace:
							{
							State = 547;
							bracedInitList();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 550;
						Match(RightBracket);
						}
						break;
					case 2:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 552;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 553;
						Match(LeftParen);
						State = 555;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IntegerLiteral) | (1L << CharacterLiteral) | (1L << FloatingLiteral) | (1L << StringLiteral) | (1L << BooleanLiteral) | (1L << PointerLiteral) | (1L << UserDefinedLiteral) | (1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Static_cast - 65)) | (1L << (This - 65)) | (1L << (Throw - 65)) | (1L << (Typeid_ - 65)) | (1L << (Typename_ - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (LeftBrace - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (Not - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (Doublecolon - 65)))) != 0) || _la==Identifier) {
							{
							State = 554;
							expressionList();
							}
						}

						State = 557;
						Match(RightParen);
						}
						break;
					case 3:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 558;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 559;
						_la = TokenStream.LA(1);
						if ( !(_la==Arrow || _la==Dot) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 565;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
						case 1:
							{
							State = 561;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==Template) {
								{
								State = 560;
								Match(Template);
								}
							}

							State = 563;
							idExpression();
							}
							break;
						case 2:
							{
							State = 564;
							pseudoDestructorName();
							}
							break;
						}
						}
						break;
					case 4:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 567;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 568;
						_la = TokenStream.LA(1);
						if ( !(_la==PlusPlus || _la==MinusMinus) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					}
					} 
				}
				State = 573;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TypeIdOfTheTypeIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Typeid_() { return GetToken(CPP14Parser.Typeid_, 0); }
		public TypeIdOfTheTypeIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeIdOfTheTypeId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeIdOfTheTypeId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeIdOfTheTypeIdContext typeIdOfTheTypeId() {
		TypeIdOfTheTypeIdContext _localctx = new TypeIdOfTheTypeIdContext(Context, State);
		EnterRule(_localctx, 32, RULE_typeIdOfTheTypeId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 574;
			Match(Typeid_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InitializerListContext initializerList() {
			return GetRuleContext<InitializerListContext>(0);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 34, RULE_expressionList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 576;
			initializerList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PseudoDestructorNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tilde() { return GetToken(CPP14Parser.Tilde, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TheTypeNameContext[] theTypeName() {
			return GetRuleContexts<TheTypeNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TheTypeNameContext theTypeName(int i) {
			return GetRuleContext<TheTypeNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestedNameSpecifierContext nestedNameSpecifier() {
			return GetRuleContext<NestedNameSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Doublecolon() { return GetToken(CPP14Parser.Doublecolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTemplateIdContext simpleTemplateId() {
			return GetRuleContext<SimpleTemplateIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecltypeSpecifierContext decltypeSpecifier() {
			return GetRuleContext<DecltypeSpecifierContext>(0);
		}
		public PseudoDestructorNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pseudoDestructorName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPseudoDestructorName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PseudoDestructorNameContext pseudoDestructorName() {
		PseudoDestructorNameContext _localctx = new PseudoDestructorNameContext(Context, State);
		EnterRule(_localctx, 36, RULE_pseudoDestructorName);
		int _la;
		try {
			State = 597;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 579;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
				case 1:
					{
					State = 578;
					nestedNameSpecifier(0);
					}
					break;
				}
				State = 584;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 581;
					theTypeName();
					State = 582;
					Match(Doublecolon);
					}
				}

				State = 586;
				Match(Tilde);
				State = 587;
				theTypeName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 588;
				nestedNameSpecifier(0);
				State = 589;
				Match(Template);
				State = 590;
				simpleTemplateId();
				State = 591;
				Match(Doublecolon);
				State = 592;
				Match(Tilde);
				State = 593;
				theTypeName();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 595;
				Match(Tilde);
				State = 596;
				decltypeSpecifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(CPP14Parser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(CPP14Parser.MinusMinus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOperatorContext unaryOperator() {
			return GetRuleContext<UnaryOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sizeof() { return GetToken(CPP14Parser.Sizeof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TheTypeIdContext theTypeId() {
			return GetRuleContext<TheTypeIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Alignof() { return GetToken(CPP14Parser.Alignof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NoExceptExpressionContext noExceptExpression() {
			return GetRuleContext<NoExceptExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewExpressionContext newExpression() {
			return GetRuleContext<NewExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteExpressionContext deleteExpression() {
			return GetRuleContext<DeleteExpressionContext>(0);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_unaryExpression);
		try {
			State = 626;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 599;
				postfixExpression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 604;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PlusPlus:
					{
					State = 600;
					Match(PlusPlus);
					}
					break;
				case MinusMinus:
					{
					State = 601;
					Match(MinusMinus);
					}
					break;
				case Plus:
				case Minus:
				case Star:
				case And:
				case Or:
				case Tilde:
				case Not:
					{
					State = 602;
					unaryOperator();
					}
					break;
				case Sizeof:
					{
					State = 603;
					Match(Sizeof);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 606;
				unaryExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 607;
				Match(Sizeof);
				State = 616;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LeftParen:
					{
					State = 608;
					Match(LeftParen);
					State = 609;
					theTypeId();
					State = 610;
					Match(RightParen);
					}
					break;
				case Ellipsis:
					{
					State = 612;
					Match(Ellipsis);
					State = 613;
					Match(LeftParen);
					State = 614;
					Match(Identifier);
					State = 615;
					Match(RightParen);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 618;
				Match(Alignof);
				State = 619;
				Match(LeftParen);
				State = 620;
				theTypeId();
				State = 621;
				Match(RightParen);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 623;
				noExceptExpression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 624;
				newExpression();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 625;
				deleteExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(CPP14Parser.Or, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star() { return GetToken(CPP14Parser.Star, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(CPP14Parser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(CPP14Parser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tilde() { return GetToken(CPP14Parser.Tilde, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(CPP14Parser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(CPP14Parser.Not, 0); }
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOperatorContext unaryOperator() {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(Context, State);
		EnterRule(_localctx, 40, RULE_unaryOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 628;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & ((1L << (Plus - 91)) | (1L << (Minus - 91)) | (1L << (Star - 91)) | (1L << (And - 91)) | (1L << (Or - 91)) | (1L << (Tilde - 91)) | (1L << (Not - 91)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode New() { return GetToken(CPP14Parser.New, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NewTypeIdContext newTypeId() {
			return GetRuleContext<NewTypeIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Doublecolon() { return GetToken(CPP14Parser.Doublecolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NewPlacementContext newPlacement() {
			return GetRuleContext<NewPlacementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewInitializerContext newInitializer() {
			return GetRuleContext<NewInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TheTypeIdContext theTypeId() {
			return GetRuleContext<TheTypeIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public NewExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewExpressionContext newExpression() {
		NewExpressionContext _localctx = new NewExpressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_newExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 631;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Doublecolon) {
				{
				State = 630;
				Match(Doublecolon);
				}
			}

			State = 633;
			Match(New);
			State = 635;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				{
				State = 634;
				newPlacement();
				}
				break;
			}
			State = 642;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Auto:
			case Bool:
			case Char:
			case Char16:
			case Char32:
			case Class:
			case Const:
			case Decltype:
			case Double:
			case Enum:
			case Float:
			case Int:
			case Long:
			case Short:
			case Signed:
			case Struct:
			case Typename_:
			case Union:
			case Unsigned:
			case Void:
			case Volatile:
			case Wchar:
			case Doublecolon:
			case Identifier:
				{
				State = 637;
				newTypeId();
				}
				break;
			case LeftParen:
				{
				{
				State = 638;
				Match(LeftParen);
				State = 639;
				theTypeId();
				State = 640;
				Match(RightParen);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 645;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LeftParen || _la==LeftBrace) {
				{
				State = 644;
				newInitializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewPlacementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public NewPlacementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newPlacement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewPlacement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewPlacementContext newPlacement() {
		NewPlacementContext _localctx = new NewPlacementContext(Context, State);
		EnterRule(_localctx, 44, RULE_newPlacement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 647;
			Match(LeftParen);
			State = 648;
			expressionList();
			State = 649;
			Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewTypeIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierSeqContext typeSpecifierSeq() {
			return GetRuleContext<TypeSpecifierSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewDeclaratorContext newDeclarator() {
			return GetRuleContext<NewDeclaratorContext>(0);
		}
		public NewTypeIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newTypeId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewTypeId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewTypeIdContext newTypeId() {
		NewTypeIdContext _localctx = new NewTypeIdContext(Context, State);
		EnterRule(_localctx, 46, RULE_newTypeId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 651;
			typeSpecifierSeq();
			State = 653;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				{
				State = 652;
				newDeclarator();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PointerOperatorContext pointerOperator() {
			return GetRuleContext<PointerOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewDeclaratorContext newDeclarator() {
			return GetRuleContext<NewDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoPointerNewDeclaratorContext noPointerNewDeclarator() {
			return GetRuleContext<NoPointerNewDeclaratorContext>(0);
		}
		public NewDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewDeclaratorContext newDeclarator() {
		NewDeclaratorContext _localctx = new NewDeclaratorContext(Context, State);
		EnterRule(_localctx, 48, RULE_newDeclarator);
		try {
			State = 660;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Decltype:
			case Star:
			case And:
			case AndAnd:
			case Doublecolon:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 655;
				pointerOperator();
				State = 657;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
				case 1:
					{
					State = 656;
					newDeclarator();
					}
					break;
				}
				}
				break;
			case LeftBracket:
				EnterOuterAlt(_localctx, 2);
				{
				State = 659;
				noPointerNewDeclarator(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoPointerNewDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(CPP14Parser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(CPP14Parser.RightBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoPointerNewDeclaratorContext noPointerNewDeclarator() {
			return GetRuleContext<NoPointerNewDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public NoPointerNewDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noPointerNewDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoPointerNewDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NoPointerNewDeclaratorContext noPointerNewDeclarator() {
		return noPointerNewDeclarator(0);
	}

	private NoPointerNewDeclaratorContext noPointerNewDeclarator(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NoPointerNewDeclaratorContext _localctx = new NoPointerNewDeclaratorContext(Context, _parentState);
		NoPointerNewDeclaratorContext _prevctx = _localctx;
		int _startState = 50;
		EnterRecursionRule(_localctx, 50, RULE_noPointerNewDeclarator, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 663;
			Match(LeftBracket);
			State = 664;
			expression();
			State = 665;
			Match(RightBracket);
			State = 667;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				{
				State = 666;
				attributeSpecifierSeq();
				}
				break;
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 678;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new NoPointerNewDeclaratorContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_noPointerNewDeclarator);
					State = 669;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 670;
					Match(LeftBracket);
					State = 671;
					constantExpression();
					State = 672;
					Match(RightBracket);
					State = 674;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
					case 1:
						{
						State = 673;
						attributeSpecifierSeq();
						}
						break;
					}
					}
					} 
				}
				State = 680;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NewInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BracedInitListContext bracedInitList() {
			return GetRuleContext<BracedInitListContext>(0);
		}
		public NewInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewInitializerContext newInitializer() {
		NewInitializerContext _localctx = new NewInitializerContext(Context, State);
		EnterRule(_localctx, 52, RULE_newInitializer);
		int _la;
		try {
			State = 687;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftParen:
				EnterOuterAlt(_localctx, 1);
				{
				State = 681;
				Match(LeftParen);
				State = 683;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IntegerLiteral) | (1L << CharacterLiteral) | (1L << FloatingLiteral) | (1L << StringLiteral) | (1L << BooleanLiteral) | (1L << PointerLiteral) | (1L << UserDefinedLiteral) | (1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Static_cast - 65)) | (1L << (This - 65)) | (1L << (Throw - 65)) | (1L << (Typeid_ - 65)) | (1L << (Typename_ - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (LeftBrace - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (Not - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (Doublecolon - 65)))) != 0) || _la==Identifier) {
					{
					State = 682;
					expressionList();
					}
				}

				State = 685;
				Match(RightParen);
				}
				break;
			case LeftBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 686;
				bracedInitList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Delete() { return GetToken(CPP14Parser.Delete, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CastExpressionContext castExpression() {
			return GetRuleContext<CastExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Doublecolon() { return GetToken(CPP14Parser.Doublecolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(CPP14Parser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(CPP14Parser.RightBracket, 0); }
		public DeleteExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteExpressionContext deleteExpression() {
		DeleteExpressionContext _localctx = new DeleteExpressionContext(Context, State);
		EnterRule(_localctx, 54, RULE_deleteExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 690;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Doublecolon) {
				{
				State = 689;
				Match(Doublecolon);
				}
			}

			State = 692;
			Match(Delete);
			State = 695;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				{
				State = 693;
				Match(LeftBracket);
				State = 694;
				Match(RightBracket);
				}
				break;
			}
			State = 697;
			castExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoExceptExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Noexcept() { return GetToken(CPP14Parser.Noexcept, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public NoExceptExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noExceptExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoExceptExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NoExceptExpressionContext noExceptExpression() {
		NoExceptExpressionContext _localctx = new NoExceptExpressionContext(Context, State);
		EnterRule(_localctx, 56, RULE_noExceptExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 699;
			Match(Noexcept);
			State = 700;
			Match(LeftParen);
			State = 701;
			expression();
			State = 702;
			Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TheTypeIdContext theTypeId() {
			return GetRuleContext<TheTypeIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CastExpressionContext castExpression() {
			return GetRuleContext<CastExpressionContext>(0);
		}
		public CastExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_castExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CastExpressionContext castExpression() {
		CastExpressionContext _localctx = new CastExpressionContext(Context, State);
		EnterRule(_localctx, 58, RULE_castExpression);
		try {
			State = 710;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 704;
				unaryExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 705;
				Match(LeftParen);
				State = 706;
				theTypeId();
				State = 707;
				Match(RightParen);
				State = 708;
				castExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointerMemberExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CastExpressionContext[] castExpression() {
			return GetRuleContexts<CastExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CastExpressionContext castExpression(int i) {
			return GetRuleContext<CastExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DotStar() { return GetTokens(CPP14Parser.DotStar); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DotStar(int i) {
			return GetToken(CPP14Parser.DotStar, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ArrowStar() { return GetTokens(CPP14Parser.ArrowStar); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ArrowStar(int i) {
			return GetToken(CPP14Parser.ArrowStar, i);
		}
		public PointerMemberExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointerMemberExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointerMemberExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PointerMemberExpressionContext pointerMemberExpression() {
		PointerMemberExpressionContext _localctx = new PointerMemberExpressionContext(Context, State);
		EnterRule(_localctx, 60, RULE_pointerMemberExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 712;
			castExpression();
			State = 717;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ArrowStar || _la==DotStar) {
				{
				{
				State = 713;
				_la = TokenStream.LA(1);
				if ( !(_la==ArrowStar || _la==DotStar) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 714;
				castExpression();
				}
				}
				State = 719;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PointerMemberExpressionContext[] pointerMemberExpression() {
			return GetRuleContexts<PointerMemberExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointerMemberExpressionContext pointerMemberExpression(int i) {
			return GetRuleContext<PointerMemberExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Star() { return GetTokens(CPP14Parser.Star); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star(int i) {
			return GetToken(CPP14Parser.Star, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Div() { return GetTokens(CPP14Parser.Div); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Div(int i) {
			return GetToken(CPP14Parser.Div, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Mod() { return GetTokens(CPP14Parser.Mod); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mod(int i) {
			return GetToken(CPP14Parser.Mod, i);
		}
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(Context, State);
		EnterRule(_localctx, 62, RULE_multiplicativeExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 720;
			pointerMemberExpression();
			State = 725;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (Star - 93)) | (1L << (Div - 93)) | (1L << (Mod - 93)))) != 0)) {
				{
				{
				State = 721;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (Star - 93)) | (1L << (Div - 93)) | (1L << (Mod - 93)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 722;
				pointerMemberExpression();
				}
				}
				State = 727;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext[] multiplicativeExpression() {
			return GetRuleContexts<MultiplicativeExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext multiplicativeExpression(int i) {
			return GetRuleContext<MultiplicativeExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Plus() { return GetTokens(CPP14Parser.Plus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus(int i) {
			return GetToken(CPP14Parser.Plus, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Minus() { return GetTokens(CPP14Parser.Minus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus(int i) {
			return GetToken(CPP14Parser.Minus, i);
		}
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, State);
		EnterRule(_localctx, 64, RULE_additiveExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 728;
			multiplicativeExpression();
			State = 733;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Plus || _la==Minus) {
				{
				{
				State = 729;
				_la = TokenStream.LA(1);
				if ( !(_la==Plus || _la==Minus) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 730;
				multiplicativeExpression();
				}
				}
				State = 735;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShiftExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext[] additiveExpression() {
			return GetRuleContexts<AdditiveExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext additiveExpression(int i) {
			return GetRuleContext<AdditiveExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShiftOperatorContext[] shiftOperator() {
			return GetRuleContexts<ShiftOperatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShiftOperatorContext shiftOperator(int i) {
			return GetRuleContext<ShiftOperatorContext>(i);
		}
		public ShiftExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShiftExpressionContext shiftExpression() {
		ShiftExpressionContext _localctx = new ShiftExpressionContext(Context, State);
		EnterRule(_localctx, 66, RULE_shiftExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 736;
			additiveExpression();
			State = 742;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 737;
					shiftOperator();
					State = 738;
					additiveExpression();
					}
					} 
				}
				State = 744;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShiftOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Greater() { return GetTokens(CPP14Parser.Greater); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater(int i) {
			return GetToken(CPP14Parser.Greater, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Less() { return GetTokens(CPP14Parser.Less); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less(int i) {
			return GetToken(CPP14Parser.Less, i);
		}
		public ShiftOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShiftOperatorContext shiftOperator() {
		ShiftOperatorContext _localctx = new ShiftOperatorContext(Context, State);
		EnterRule(_localctx, 68, RULE_shiftOperator);
		try {
			State = 749;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Greater:
				EnterOuterAlt(_localctx, 1);
				{
				State = 745;
				Match(Greater);
				State = 746;
				Match(Greater);
				}
				break;
			case Less:
				EnterOuterAlt(_localctx, 2);
				{
				State = 747;
				Match(Less);
				State = 748;
				Match(Less);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ShiftExpressionContext[] shiftExpression() {
			return GetRuleContexts<ShiftExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShiftExpressionContext shiftExpression(int i) {
			return GetRuleContext<ShiftExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Less() { return GetTokens(CPP14Parser.Less); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less(int i) {
			return GetToken(CPP14Parser.Less, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Greater() { return GetTokens(CPP14Parser.Greater); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater(int i) {
			return GetToken(CPP14Parser.Greater, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LessEqual() { return GetTokens(CPP14Parser.LessEqual); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessEqual(int i) {
			return GetToken(CPP14Parser.LessEqual, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GreaterEqual() { return GetTokens(CPP14Parser.GreaterEqual); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterEqual(int i) {
			return GetToken(CPP14Parser.GreaterEqual, i);
		}
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		RelationalExpressionContext _localctx = new RelationalExpressionContext(Context, State);
		EnterRule(_localctx, 70, RULE_relationalExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 751;
			shiftExpression();
			State = 756;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,63,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 752;
					_la = TokenStream.LA(1);
					if ( !(((((_la - 102)) & ~0x3f) == 0 && ((1L << (_la - 102)) & ((1L << (Less - 102)) | (1L << (Greater - 102)) | (1L << (LessEqual - 102)) | (1L << (GreaterEqual - 102)))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 753;
					shiftExpression();
					}
					} 
				}
				State = 758;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,63,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext[] relationalExpression() {
			return GetRuleContexts<RelationalExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext relationalExpression(int i) {
			return GetRuleContext<RelationalExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Equal() { return GetTokens(CPP14Parser.Equal); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal(int i) {
			return GetToken(CPP14Parser.Equal, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NotEqual() { return GetTokens(CPP14Parser.NotEqual); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEqual(int i) {
			return GetToken(CPP14Parser.NotEqual, i);
		}
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		EqualityExpressionContext _localctx = new EqualityExpressionContext(Context, State);
		EnterRule(_localctx, 72, RULE_equalityExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 759;
			relationalExpression();
			State = 764;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Equal || _la==NotEqual) {
				{
				{
				State = 760;
				_la = TokenStream.LA(1);
				if ( !(_la==Equal || _la==NotEqual) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 761;
				relationalExpression();
				}
				}
				State = 766;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext[] equalityExpression() {
			return GetRuleContexts<EqualityExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext equalityExpression(int i) {
			return GetRuleContext<EqualityExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] And() { return GetTokens(CPP14Parser.And); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And(int i) {
			return GetToken(CPP14Parser.And, i);
		}
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExpressionContext andExpression() {
		AndExpressionContext _localctx = new AndExpressionContext(Context, State);
		EnterRule(_localctx, 74, RULE_andExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 767;
			equalityExpression();
			State = 772;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==And) {
				{
				{
				State = 768;
				Match(And);
				State = 769;
				equalityExpression();
				}
				}
				State = 774;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExclusiveOrExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AndExpressionContext[] andExpression() {
			return GetRuleContexts<AndExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AndExpressionContext andExpression(int i) {
			return GetRuleContext<AndExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Caret() { return GetTokens(CPP14Parser.Caret); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Caret(int i) {
			return GetToken(CPP14Parser.Caret, i);
		}
		public ExclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusiveOrExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExclusiveOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExclusiveOrExpressionContext exclusiveOrExpression() {
		ExclusiveOrExpressionContext _localctx = new ExclusiveOrExpressionContext(Context, State);
		EnterRule(_localctx, 76, RULE_exclusiveOrExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 775;
			andExpression();
			State = 780;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Caret) {
				{
				{
				State = 776;
				Match(Caret);
				State = 777;
				andExpression();
				}
				}
				State = 782;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InclusiveOrExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExclusiveOrExpressionContext[] exclusiveOrExpression() {
			return GetRuleContexts<ExclusiveOrExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExclusiveOrExpressionContext exclusiveOrExpression(int i) {
			return GetRuleContext<ExclusiveOrExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Or() { return GetTokens(CPP14Parser.Or); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or(int i) {
			return GetToken(CPP14Parser.Or, i);
		}
		public InclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inclusiveOrExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclusiveOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InclusiveOrExpressionContext inclusiveOrExpression() {
		InclusiveOrExpressionContext _localctx = new InclusiveOrExpressionContext(Context, State);
		EnterRule(_localctx, 78, RULE_inclusiveOrExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 783;
			exclusiveOrExpression();
			State = 788;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Or) {
				{
				{
				State = 784;
				Match(Or);
				State = 785;
				exclusiveOrExpression();
				}
				}
				State = 790;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalAndExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InclusiveOrExpressionContext[] inclusiveOrExpression() {
			return GetRuleContexts<InclusiveOrExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InclusiveOrExpressionContext inclusiveOrExpression(int i) {
			return GetRuleContext<InclusiveOrExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AndAnd() { return GetTokens(CPP14Parser.AndAnd); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AndAnd(int i) {
			return GetToken(CPP14Parser.AndAnd, i);
		}
		public LogicalAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalAndExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalAndExpressionContext logicalAndExpression() {
		LogicalAndExpressionContext _localctx = new LogicalAndExpressionContext(Context, State);
		EnterRule(_localctx, 80, RULE_logicalAndExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 791;
			inclusiveOrExpression();
			State = 796;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AndAnd) {
				{
				{
				State = 792;
				Match(AndAnd);
				State = 793;
				inclusiveOrExpression();
				}
				}
				State = 798;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalOrExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicalAndExpressionContext[] logicalAndExpression() {
			return GetRuleContexts<LogicalAndExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalAndExpressionContext logicalAndExpression(int i) {
			return GetRuleContext<LogicalAndExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OrOr() { return GetTokens(CPP14Parser.OrOr); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OrOr(int i) {
			return GetToken(CPP14Parser.OrOr, i);
		}
		public LogicalOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOrExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOrExpressionContext logicalOrExpression() {
		LogicalOrExpressionContext _localctx = new LogicalOrExpressionContext(Context, State);
		EnterRule(_localctx, 82, RULE_logicalOrExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 799;
			logicalAndExpression();
			State = 804;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OrOr) {
				{
				{
				State = 800;
				Match(OrOr);
				State = 801;
				logicalAndExpression();
				}
				}
				State = 806;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOrExpressionContext logicalOrExpression() {
			return GetRuleContext<LogicalOrExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Question() { return GetToken(CPP14Parser.Question, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(CPP14Parser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public ConditionalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalExpressionContext conditionalExpression() {
		ConditionalExpressionContext _localctx = new ConditionalExpressionContext(Context, State);
		EnterRule(_localctx, 84, RULE_conditionalExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 807;
			logicalOrExpression();
			State = 813;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Question) {
				{
				State = 808;
				Match(Question);
				State = 809;
				expression();
				State = 810;
				Match(Colon);
				State = 811;
				assignmentExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOrExpressionContext logicalOrExpression() {
			return GetRuleContext<LogicalOrExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitializerClauseContext initializerClause() {
			return GetRuleContext<InitializerClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThrowExpressionContext throwExpression() {
			return GetRuleContext<ThrowExpressionContext>(0);
		}
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(Context, State);
		EnterRule(_localctx, 86, RULE_assignmentExpression);
		try {
			State = 821;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 815;
				conditionalExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 816;
				logicalOrExpression();
				State = 817;
				assignmentOperator();
				State = 818;
				initializerClause();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 820;
				throwExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StarAssign() { return GetToken(CPP14Parser.StarAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DivAssign() { return GetToken(CPP14Parser.DivAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ModAssign() { return GetToken(CPP14Parser.ModAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusAssign() { return GetToken(CPP14Parser.PlusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusAssign() { return GetToken(CPP14Parser.MinusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftAssign() { return GetToken(CPP14Parser.RightShiftAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShiftAssign() { return GetToken(CPP14Parser.LeftShiftAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AndAssign() { return GetToken(CPP14Parser.AndAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XorAssign() { return GetToken(CPP14Parser.XorAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OrAssign() { return GetToken(CPP14Parser.OrAssign, 0); }
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 88, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 823;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & ((1L << (Assign - 101)) | (1L << (PlusAssign - 101)) | (1L << (MinusAssign - 101)) | (1L << (StarAssign - 101)) | (1L << (DivAssign - 101)) | (1L << (ModAssign - 101)) | (1L << (XorAssign - 101)) | (1L << (AndAssign - 101)) | (1L << (OrAssign - 101)) | (1L << (LeftShiftAssign - 101)) | (1L << (RightShiftAssign - 101)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext[] assignmentExpression() {
			return GetRuleContexts<AssignmentExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression(int i) {
			return GetRuleContext<AssignmentExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CPP14Parser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CPP14Parser.Comma, i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 90, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 825;
			assignmentExpression();
			State = 830;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 826;
				Match(Comma);
				State = 827;
				assignmentExpression();
				}
				}
				State = 832;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		public ConstantExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantExpressionContext constantExpression() {
		ConstantExpressionContext _localctx = new ConstantExpressionContext(Context, State);
		EnterRule(_localctx, 92, RULE_constantExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 833;
			conditionalExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabeledStatementContext labeledStatement() {
			return GetRuleContext<LabeledStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationStatementContext declarationStatement() {
			return GetRuleContext<DeclarationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectionStatementContext selectionStatement() {
			return GetRuleContext<SelectionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IterationStatementContext iterationStatement() {
			return GetRuleContext<IterationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JumpStatementContext jumpStatement() {
			return GetRuleContext<JumpStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TryBlockContext tryBlock() {
			return GetRuleContext<TryBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 94, RULE_statement);
		try {
			State = 848;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 835;
				labeledStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 836;
				declarationStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 838;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
				case 1:
					{
					State = 837;
					attributeSpecifierSeq();
					}
					break;
				}
				State = 846;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case IntegerLiteral:
				case CharacterLiteral:
				case FloatingLiteral:
				case StringLiteral:
				case BooleanLiteral:
				case PointerLiteral:
				case UserDefinedLiteral:
				case Alignof:
				case Auto:
				case Bool:
				case Char:
				case Char16:
				case Char32:
				case Const_cast:
				case Decltype:
				case Delete:
				case Double:
				case Dynamic_cast:
				case Float:
				case Int:
				case Long:
				case New:
				case Noexcept:
				case Operator:
				case Reinterpret_cast:
				case Short:
				case Signed:
				case Sizeof:
				case Static_cast:
				case This:
				case Throw:
				case Typeid_:
				case Typename_:
				case Unsigned:
				case Void:
				case Wchar:
				case LeftParen:
				case LeftBracket:
				case Plus:
				case Minus:
				case Star:
				case And:
				case Or:
				case Tilde:
				case Not:
				case PlusPlus:
				case MinusMinus:
				case Doublecolon:
				case Semi:
				case Identifier:
					{
					State = 840;
					expressionStatement();
					}
					break;
				case LeftBrace:
					{
					State = 841;
					compoundStatement();
					}
					break;
				case If:
				case Switch:
					{
					State = 842;
					selectionStatement();
					}
					break;
				case Do:
				case For:
				case While:
					{
					State = 843;
					iterationStatement();
					}
					break;
				case Break:
				case Continue:
				case Goto:
				case Return:
					{
					State = 844;
					jumpStatement();
					}
					break;
				case Try:
					{
					State = 845;
					tryBlock();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(CPP14Parser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Case() { return GetToken(CPP14Parser.Case, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(CPP14Parser.Default, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public LabeledStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabeledStatementContext labeledStatement() {
		LabeledStatementContext _localctx = new LabeledStatementContext(Context, State);
		EnterRule(_localctx, 96, RULE_labeledStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 851;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Alignas || _la==LeftBracket) {
				{
				State = 850;
				attributeSpecifierSeq();
				}
			}

			State = 857;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				{
				State = 853;
				Match(Identifier);
				}
				break;
			case Case:
				{
				State = 854;
				Match(Case);
				State = 855;
				constantExpression();
				}
				break;
			case Default:
				{
				State = 856;
				Match(Default);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 859;
			Match(Colon);
			State = 860;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 98, RULE_expressionStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 863;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IntegerLiteral) | (1L << CharacterLiteral) | (1L << FloatingLiteral) | (1L << StringLiteral) | (1L << BooleanLiteral) | (1L << PointerLiteral) | (1L << UserDefinedLiteral) | (1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Static_cast - 65)) | (1L << (This - 65)) | (1L << (Throw - 65)) | (1L << (Typeid_ - 65)) | (1L << (Typename_ - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (Not - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (Doublecolon - 65)))) != 0) || _la==Identifier) {
				{
				State = 862;
				expression();
				}
			}

			State = 865;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(CPP14Parser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(CPP14Parser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementSeqContext statementSeq() {
			return GetRuleContext<StatementSeqContext>(0);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStatementContext compoundStatement() {
		CompoundStatementContext _localctx = new CompoundStatementContext(Context, State);
		EnterRule(_localctx, 100, RULE_compoundStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 867;
			Match(LeftBrace);
			State = 869;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IntegerLiteral) | (1L << CharacterLiteral) | (1L << FloatingLiteral) | (1L << StringLiteral) | (1L << BooleanLiteral) | (1L << PointerLiteral) | (1L << UserDefinedLiteral) | (1L << Alignas) | (1L << Alignof) | (1L << Asm) | (1L << Auto) | (1L << Bool) | (1L << Break) | (1L << Case) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Class) | (1L << Const) | (1L << Constexpr) | (1L << Const_cast) | (1L << Continue) | (1L << Decltype) | (1L << Default) | (1L << Delete) | (1L << Do) | (1L << Double) | (1L << Dynamic_cast) | (1L << Enum) | (1L << Explicit) | (1L << Extern) | (1L << Float) | (1L << For) | (1L << Friend) | (1L << Goto) | (1L << If) | (1L << Inline) | (1L << Int) | (1L << Long) | (1L << Mutable) | (1L << Namespace) | (1L << New) | (1L << Noexcept) | (1L << Operator) | (1L << Register) | (1L << Reinterpret_cast) | (1L << Return) | (1L << Short) | (1L << Signed) | (1L << Sizeof) | (1L << Static))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Static_assert - 64)) | (1L << (Static_cast - 64)) | (1L << (Struct - 64)) | (1L << (Switch - 64)) | (1L << (This - 64)) | (1L << (Thread_local - 64)) | (1L << (Throw - 64)) | (1L << (Try - 64)) | (1L << (Typedef - 64)) | (1L << (Typeid_ - 64)) | (1L << (Typename_ - 64)) | (1L << (Union - 64)) | (1L << (Unsigned - 64)) | (1L << (Using - 64)) | (1L << (Virtual - 64)) | (1L << (Void - 64)) | (1L << (Volatile - 64)) | (1L << (Wchar - 64)) | (1L << (While - 64)) | (1L << (LeftParen - 64)) | (1L << (LeftBracket - 64)) | (1L << (LeftBrace - 64)) | (1L << (Plus - 64)) | (1L << (Minus - 64)) | (1L << (Star - 64)) | (1L << (And - 64)) | (1L << (Or - 64)) | (1L << (Tilde - 64)) | (1L << (Not - 64)) | (1L << (AndAnd - 64)) | (1L << (PlusPlus - 64)) | (1L << (MinusMinus - 64)) | (1L << (Doublecolon - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (Semi - 128)) | (1L << (Ellipsis - 128)) | (1L << (Identifier - 128)))) != 0)) {
				{
				State = 868;
				statementSeq();
				}
			}

			State = 871;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementSeqContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementSeqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementSeq; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementSeq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementSeqContext statementSeq() {
		StatementSeqContext _localctx = new StatementSeqContext(Context, State);
		EnterRule(_localctx, 102, RULE_statementSeq);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 874;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 873;
				statement();
				}
				}
				State = 876;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IntegerLiteral) | (1L << CharacterLiteral) | (1L << FloatingLiteral) | (1L << StringLiteral) | (1L << BooleanLiteral) | (1L << PointerLiteral) | (1L << UserDefinedLiteral) | (1L << Alignas) | (1L << Alignof) | (1L << Asm) | (1L << Auto) | (1L << Bool) | (1L << Break) | (1L << Case) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Class) | (1L << Const) | (1L << Constexpr) | (1L << Const_cast) | (1L << Continue) | (1L << Decltype) | (1L << Default) | (1L << Delete) | (1L << Do) | (1L << Double) | (1L << Dynamic_cast) | (1L << Enum) | (1L << Explicit) | (1L << Extern) | (1L << Float) | (1L << For) | (1L << Friend) | (1L << Goto) | (1L << If) | (1L << Inline) | (1L << Int) | (1L << Long) | (1L << Mutable) | (1L << Namespace) | (1L << New) | (1L << Noexcept) | (1L << Operator) | (1L << Register) | (1L << Reinterpret_cast) | (1L << Return) | (1L << Short) | (1L << Signed) | (1L << Sizeof) | (1L << Static))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Static_assert - 64)) | (1L << (Static_cast - 64)) | (1L << (Struct - 64)) | (1L << (Switch - 64)) | (1L << (This - 64)) | (1L << (Thread_local - 64)) | (1L << (Throw - 64)) | (1L << (Try - 64)) | (1L << (Typedef - 64)) | (1L << (Typeid_ - 64)) | (1L << (Typename_ - 64)) | (1L << (Union - 64)) | (1L << (Unsigned - 64)) | (1L << (Using - 64)) | (1L << (Virtual - 64)) | (1L << (Void - 64)) | (1L << (Volatile - 64)) | (1L << (Wchar - 64)) | (1L << (While - 64)) | (1L << (LeftParen - 64)) | (1L << (LeftBracket - 64)) | (1L << (LeftBrace - 64)) | (1L << (Plus - 64)) | (1L << (Minus - 64)) | (1L << (Star - 64)) | (1L << (And - 64)) | (1L << (Or - 64)) | (1L << (Tilde - 64)) | (1L << (Not - 64)) | (1L << (AndAnd - 64)) | (1L << (PlusPlus - 64)) | (1L << (MinusMinus - 64)) | (1L << (Doublecolon - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (Semi - 128)) | (1L << (Ellipsis - 128)) | (1L << (Identifier - 128)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(CPP14Parser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(CPP14Parser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Switch() { return GetToken(CPP14Parser.Switch, 0); }
		public SelectionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectionStatementContext selectionStatement() {
		SelectionStatementContext _localctx = new SelectionStatementContext(Context, State);
		EnterRule(_localctx, 104, RULE_selectionStatement);
		try {
			State = 893;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case If:
				EnterOuterAlt(_localctx, 1);
				{
				State = 878;
				Match(If);
				State = 879;
				Match(LeftParen);
				State = 880;
				condition();
				State = 881;
				Match(RightParen);
				State = 882;
				statement();
				State = 885;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
				case 1:
					{
					State = 883;
					Match(Else);
					State = 884;
					statement();
					}
					break;
				}
				}
				break;
			case Switch:
				EnterOuterAlt(_localctx, 2);
				{
				State = 887;
				Match(Switch);
				State = 888;
				Match(LeftParen);
				State = 889;
				condition();
				State = 890;
				Match(RightParen);
				State = 891;
				statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclSpecifierSeqContext declSpecifierSeq() {
			return GetRuleContext<DeclSpecifierSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InitializerClauseContext initializerClause() {
			return GetRuleContext<InitializerClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BracedInitListContext bracedInitList() {
			return GetRuleContext<BracedInitListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 106, RULE_condition);
		int _la;
		try {
			State = 906;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,85,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 895;
				expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 897;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 896;
					attributeSpecifierSeq();
					}
				}

				State = 899;
				declSpecifierSeq();
				State = 900;
				declarator();
				State = 904;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Assign:
					{
					State = 901;
					Match(Assign);
					State = 902;
					initializerClause();
					}
					break;
				case LeftBrace:
					{
					State = 903;
					bracedInitList();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(CPP14Parser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Do() { return GetToken(CPP14Parser.Do, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(CPP14Parser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForInitStatementContext forInitStatement() {
			return GetRuleContext<ForInitStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForRangeDeclarationContext forRangeDeclaration() {
			return GetRuleContext<ForRangeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(CPP14Parser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForRangeInitializerContext forRangeInitializer() {
			return GetRuleContext<ForRangeInitializerContext>(0);
		}
		public IterationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIterationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterationStatementContext iterationStatement() {
		IterationStatementContext _localctx = new IterationStatementContext(Context, State);
		EnterRule(_localctx, 108, RULE_iterationStatement);
		int _la;
		try {
			State = 941;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case While:
				EnterOuterAlt(_localctx, 1);
				{
				State = 908;
				Match(While);
				State = 909;
				Match(LeftParen);
				State = 910;
				condition();
				State = 911;
				Match(RightParen);
				State = 912;
				statement();
				}
				break;
			case Do:
				EnterOuterAlt(_localctx, 2);
				{
				State = 914;
				Match(Do);
				State = 915;
				statement();
				State = 916;
				Match(While);
				State = 917;
				Match(LeftParen);
				State = 918;
				expression();
				State = 919;
				Match(RightParen);
				State = 920;
				Match(Semi);
				}
				break;
			case For:
				EnterOuterAlt(_localctx, 3);
				{
				State = 922;
				Match(For);
				State = 923;
				Match(LeftParen);
				State = 936;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
				case 1:
					{
					State = 924;
					forInitStatement();
					State = 926;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IntegerLiteral) | (1L << CharacterLiteral) | (1L << FloatingLiteral) | (1L << StringLiteral) | (1L << BooleanLiteral) | (1L << PointerLiteral) | (1L << UserDefinedLiteral) | (1L << Alignas) | (1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Class) | (1L << Const) | (1L << Constexpr) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << Enum) | (1L << Explicit) | (1L << Extern) | (1L << Float) | (1L << Friend) | (1L << Inline) | (1L << Int) | (1L << Long) | (1L << Mutable) | (1L << New) | (1L << Noexcept) | (1L << Operator) | (1L << Register) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof) | (1L << Static))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Static_cast - 65)) | (1L << (Struct - 65)) | (1L << (This - 65)) | (1L << (Thread_local - 65)) | (1L << (Throw - 65)) | (1L << (Typedef - 65)) | (1L << (Typeid_ - 65)) | (1L << (Typename_ - 65)) | (1L << (Union - 65)) | (1L << (Unsigned - 65)) | (1L << (Virtual - 65)) | (1L << (Void - 65)) | (1L << (Volatile - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (Not - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (Doublecolon - 65)))) != 0) || _la==Identifier) {
						{
						State = 925;
						condition();
						}
					}

					State = 928;
					Match(Semi);
					State = 930;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IntegerLiteral) | (1L << CharacterLiteral) | (1L << FloatingLiteral) | (1L << StringLiteral) | (1L << BooleanLiteral) | (1L << PointerLiteral) | (1L << UserDefinedLiteral) | (1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Static_cast - 65)) | (1L << (This - 65)) | (1L << (Throw - 65)) | (1L << (Typeid_ - 65)) | (1L << (Typename_ - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (Not - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (Doublecolon - 65)))) != 0) || _la==Identifier) {
						{
						State = 929;
						expression();
						}
					}

					}
					break;
				case 2:
					{
					State = 932;
					forRangeDeclaration();
					State = 933;
					Match(Colon);
					State = 934;
					forRangeInitializer();
					}
					break;
				}
				State = 938;
				Match(RightParen);
				State = 939;
				statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleDeclarationContext simpleDeclaration() {
			return GetRuleContext<SimpleDeclarationContext>(0);
		}
		public ForInitStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInitStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInitStatementContext forInitStatement() {
		ForInitStatementContext _localctx = new ForInitStatementContext(Context, State);
		EnterRule(_localctx, 110, RULE_forInitStatement);
		try {
			State = 945;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 943;
				expressionStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 944;
				simpleDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForRangeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclSpecifierSeqContext declSpecifierSeq() {
			return GetRuleContext<DeclSpecifierSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public ForRangeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forRangeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForRangeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForRangeDeclarationContext forRangeDeclaration() {
		ForRangeDeclarationContext _localctx = new ForRangeDeclarationContext(Context, State);
		EnterRule(_localctx, 112, RULE_forRangeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 948;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Alignas || _la==LeftBracket) {
				{
				State = 947;
				attributeSpecifierSeq();
				}
			}

			State = 950;
			declSpecifierSeq();
			State = 951;
			declarator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForRangeInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BracedInitListContext bracedInitList() {
			return GetRuleContext<BracedInitListContext>(0);
		}
		public ForRangeInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forRangeInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForRangeInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForRangeInitializerContext forRangeInitializer() {
		ForRangeInitializerContext _localctx = new ForRangeInitializerContext(Context, State);
		EnterRule(_localctx, 114, RULE_forRangeInitializer);
		try {
			State = 955;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IntegerLiteral:
			case CharacterLiteral:
			case FloatingLiteral:
			case StringLiteral:
			case BooleanLiteral:
			case PointerLiteral:
			case UserDefinedLiteral:
			case Alignof:
			case Auto:
			case Bool:
			case Char:
			case Char16:
			case Char32:
			case Const_cast:
			case Decltype:
			case Delete:
			case Double:
			case Dynamic_cast:
			case Float:
			case Int:
			case Long:
			case New:
			case Noexcept:
			case Operator:
			case Reinterpret_cast:
			case Short:
			case Signed:
			case Sizeof:
			case Static_cast:
			case This:
			case Throw:
			case Typeid_:
			case Typename_:
			case Unsigned:
			case Void:
			case Wchar:
			case LeftParen:
			case LeftBracket:
			case Plus:
			case Minus:
			case Star:
			case And:
			case Or:
			case Tilde:
			case Not:
			case PlusPlus:
			case MinusMinus:
			case Doublecolon:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 953;
				expression();
				}
				break;
			case LeftBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 954;
				bracedInitList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JumpStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(CPP14Parser.Break, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Continue() { return GetToken(CPP14Parser.Continue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(CPP14Parser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Goto() { return GetToken(CPP14Parser.Goto, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BracedInitListContext bracedInitList() {
			return GetRuleContext<BracedInitListContext>(0);
		}
		public JumpStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jumpStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJumpStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JumpStatementContext jumpStatement() {
		JumpStatementContext _localctx = new JumpStatementContext(Context, State);
		EnterRule(_localctx, 116, RULE_jumpStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 966;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Break:
				{
				State = 957;
				Match(Break);
				}
				break;
			case Continue:
				{
				State = 958;
				Match(Continue);
				}
				break;
			case Return:
				{
				State = 959;
				Match(Return);
				State = 962;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case IntegerLiteral:
				case CharacterLiteral:
				case FloatingLiteral:
				case StringLiteral:
				case BooleanLiteral:
				case PointerLiteral:
				case UserDefinedLiteral:
				case Alignof:
				case Auto:
				case Bool:
				case Char:
				case Char16:
				case Char32:
				case Const_cast:
				case Decltype:
				case Delete:
				case Double:
				case Dynamic_cast:
				case Float:
				case Int:
				case Long:
				case New:
				case Noexcept:
				case Operator:
				case Reinterpret_cast:
				case Short:
				case Signed:
				case Sizeof:
				case Static_cast:
				case This:
				case Throw:
				case Typeid_:
				case Typename_:
				case Unsigned:
				case Void:
				case Wchar:
				case LeftParen:
				case LeftBracket:
				case Plus:
				case Minus:
				case Star:
				case And:
				case Or:
				case Tilde:
				case Not:
				case PlusPlus:
				case MinusMinus:
				case Doublecolon:
				case Identifier:
					{
					State = 960;
					expression();
					}
					break;
				case LeftBrace:
					{
					State = 961;
					bracedInitList();
					}
					break;
				case Semi:
					break;
				default:
					break;
				}
				}
				break;
			case Goto:
				{
				State = 964;
				Match(Goto);
				State = 965;
				Match(Identifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 968;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockDeclarationContext blockDeclaration() {
			return GetRuleContext<BlockDeclarationContext>(0);
		}
		public DeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationStatementContext declarationStatement() {
		DeclarationStatementContext _localctx = new DeclarationStatementContext(Context, State);
		EnterRule(_localctx, 118, RULE_declarationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 970;
			blockDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationseqContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public DeclarationseqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationseq; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationseq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationseqContext declarationseq() {
		DeclarationseqContext _localctx = new DeclarationseqContext(Context, State);
		EnterRule(_localctx, 120, RULE_declarationseq);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 973;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 972;
				declaration();
				}
				}
				State = 975;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (Alignas - 10)) | (1L << (Asm - 10)) | (1L << (Auto - 10)) | (1L << (Bool - 10)) | (1L << (Char - 10)) | (1L << (Char16 - 10)) | (1L << (Char32 - 10)) | (1L << (Class - 10)) | (1L << (Const - 10)) | (1L << (Constexpr - 10)) | (1L << (Decltype - 10)) | (1L << (Double - 10)) | (1L << (Enum - 10)) | (1L << (Explicit - 10)) | (1L << (Extern - 10)) | (1L << (Float - 10)) | (1L << (Friend - 10)) | (1L << (Inline - 10)) | (1L << (Int - 10)) | (1L << (Long - 10)) | (1L << (Mutable - 10)) | (1L << (Namespace - 10)) | (1L << (Operator - 10)) | (1L << (Register - 10)) | (1L << (Short - 10)) | (1L << (Signed - 10)) | (1L << (Static - 10)) | (1L << (Static_assert - 10)) | (1L << (Struct - 10)) | (1L << (Template - 10)) | (1L << (Thread_local - 10)))) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (Typedef - 74)) | (1L << (Typename_ - 74)) | (1L << (Union - 74)) | (1L << (Unsigned - 74)) | (1L << (Using - 74)) | (1L << (Virtual - 74)) | (1L << (Void - 74)) | (1L << (Volatile - 74)) | (1L << (Wchar - 74)) | (1L << (LeftParen - 74)) | (1L << (LeftBracket - 74)) | (1L << (Star - 74)) | (1L << (And - 74)) | (1L << (Tilde - 74)) | (1L << (AndAnd - 74)) | (1L << (Doublecolon - 74)) | (1L << (Semi - 74)) | (1L << (Ellipsis - 74)) | (1L << (Identifier - 74)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockDeclarationContext blockDeclaration() {
			return GetRuleContext<BlockDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefinitionContext functionDefinition() {
			return GetRuleContext<FunctionDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateDeclarationContext templateDeclaration() {
			return GetRuleContext<TemplateDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitInstantiationContext explicitInstantiation() {
			return GetRuleContext<ExplicitInstantiationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitSpecializationContext explicitSpecialization() {
			return GetRuleContext<ExplicitSpecializationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LinkageSpecificationContext linkageSpecification() {
			return GetRuleContext<LinkageSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceDefinitionContext namespaceDefinition() {
			return GetRuleContext<NamespaceDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyDeclarationContext emptyDeclaration() {
			return GetRuleContext<EmptyDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext attributeDeclaration() {
			return GetRuleContext<AttributeDeclarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 122, RULE_declaration);
		try {
			State = 986;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,96,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 977;
				blockDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 978;
				functionDefinition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 979;
				templateDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 980;
				explicitInstantiation();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 981;
				explicitSpecialization();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 982;
				linkageSpecification();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 983;
				namespaceDefinition();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 984;
				emptyDeclaration();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 985;
				attributeDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleDeclarationContext simpleDeclaration() {
			return GetRuleContext<SimpleDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AsmDefinitionContext asmDefinition() {
			return GetRuleContext<AsmDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceAliasDefinitionContext namespaceAliasDefinition() {
			return GetRuleContext<NamespaceAliasDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDeclarationContext usingDeclaration() {
			return GetRuleContext<UsingDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext usingDirective() {
			return GetRuleContext<UsingDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StaticAssertDeclarationContext staticAssertDeclaration() {
			return GetRuleContext<StaticAssertDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AliasDeclarationContext aliasDeclaration() {
			return GetRuleContext<AliasDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpaqueEnumDeclarationContext opaqueEnumDeclaration() {
			return GetRuleContext<OpaqueEnumDeclarationContext>(0);
		}
		public BlockDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockDeclarationContext blockDeclaration() {
		BlockDeclarationContext _localctx = new BlockDeclarationContext(Context, State);
		EnterRule(_localctx, 124, RULE_blockDeclaration);
		try {
			State = 996;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,97,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 988;
				simpleDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 989;
				asmDefinition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 990;
				namespaceAliasDefinition();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 991;
				usingDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 992;
				usingDirective();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 993;
				staticAssertDeclaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 994;
				aliasDeclaration();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 995;
				opaqueEnumDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Using() { return GetToken(CPP14Parser.Using, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TheTypeIdContext theTypeId() {
			return GetRuleContext<TheTypeIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public AliasDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliasDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAliasDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasDeclarationContext aliasDeclaration() {
		AliasDeclarationContext _localctx = new AliasDeclarationContext(Context, State);
		EnterRule(_localctx, 126, RULE_aliasDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 998;
			Match(Using);
			State = 999;
			Match(Identifier);
			State = 1001;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Alignas || _la==LeftBracket) {
				{
				State = 1000;
				attributeSpecifierSeq();
				}
			}

			State = 1003;
			Match(Assign);
			State = 1004;
			theTypeId();
			State = 1005;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclSpecifierSeqContext declSpecifierSeq() {
			return GetRuleContext<DeclSpecifierSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitDeclaratorListContext initDeclaratorList() {
			return GetRuleContext<InitDeclaratorListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public SimpleDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleDeclarationContext simpleDeclaration() {
		SimpleDeclarationContext _localctx = new SimpleDeclarationContext(Context, State);
		EnterRule(_localctx, 128, RULE_simpleDeclaration);
		int _la;
		try {
			State = 1021;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Auto:
			case Bool:
			case Char:
			case Char16:
			case Char32:
			case Class:
			case Const:
			case Constexpr:
			case Decltype:
			case Double:
			case Enum:
			case Explicit:
			case Extern:
			case Float:
			case Friend:
			case Inline:
			case Int:
			case Long:
			case Mutable:
			case Operator:
			case Register:
			case Short:
			case Signed:
			case Static:
			case Struct:
			case Thread_local:
			case Typedef:
			case Typename_:
			case Union:
			case Unsigned:
			case Virtual:
			case Void:
			case Volatile:
			case Wchar:
			case LeftParen:
			case Star:
			case And:
			case Tilde:
			case AndAnd:
			case Doublecolon:
			case Semi:
			case Ellipsis:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1008;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
				case 1:
					{
					State = 1007;
					declSpecifierSeq();
					}
					break;
				}
				State = 1011;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Decltype || _la==Operator || ((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & ((1L << (LeftParen - 85)) | (1L << (Star - 85)) | (1L << (And - 85)) | (1L << (Tilde - 85)) | (1L << (AndAnd - 85)) | (1L << (Doublecolon - 85)) | (1L << (Ellipsis - 85)) | (1L << (Identifier - 85)))) != 0)) {
					{
					State = 1010;
					initDeclaratorList();
					}
				}

				State = 1013;
				Match(Semi);
				}
				break;
			case Alignas:
			case LeftBracket:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1014;
				attributeSpecifierSeq();
				State = 1016;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
				case 1:
					{
					State = 1015;
					declSpecifierSeq();
					}
					break;
				}
				State = 1018;
				initDeclaratorList();
				State = 1019;
				Match(Semi);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StaticAssertDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static_assert() { return GetToken(CPP14Parser.Static_assert, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(CPP14Parser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		public StaticAssertDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_staticAssertDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStaticAssertDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StaticAssertDeclarationContext staticAssertDeclaration() {
		StaticAssertDeclarationContext _localctx = new StaticAssertDeclarationContext(Context, State);
		EnterRule(_localctx, 130, RULE_staticAssertDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1023;
			Match(Static_assert);
			State = 1024;
			Match(LeftParen);
			State = 1025;
			constantExpression();
			State = 1026;
			Match(Comma);
			State = 1027;
			Match(StringLiteral);
			State = 1028;
			Match(RightParen);
			State = 1029;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		public EmptyDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyDeclarationContext emptyDeclaration() {
		EmptyDeclarationContext _localctx = new EmptyDeclarationContext(Context, State);
		EnterRule(_localctx, 132, RULE_emptyDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1031;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		public AttributeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeDeclarationContext attributeDeclaration() {
		AttributeDeclarationContext _localctx = new AttributeDeclarationContext(Context, State);
		EnterRule(_localctx, 134, RULE_attributeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1033;
			attributeSpecifierSeq();
			State = 1034;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StorageClassSpecifierContext storageClassSpecifier() {
			return GetRuleContext<StorageClassSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSpecifierContext functionSpecifier() {
			return GetRuleContext<FunctionSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Friend() { return GetToken(CPP14Parser.Friend, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Typedef() { return GetToken(CPP14Parser.Typedef, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Constexpr() { return GetToken(CPP14Parser.Constexpr, 0); }
		public DeclSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclSpecifierContext declSpecifier() {
		DeclSpecifierContext _localctx = new DeclSpecifierContext(Context, State);
		EnterRule(_localctx, 136, RULE_declSpecifier);
		try {
			State = 1042;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Extern:
			case Mutable:
			case Register:
			case Static:
			case Thread_local:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1036;
				storageClassSpecifier();
				}
				break;
			case Auto:
			case Bool:
			case Char:
			case Char16:
			case Char32:
			case Class:
			case Const:
			case Decltype:
			case Double:
			case Enum:
			case Float:
			case Int:
			case Long:
			case Short:
			case Signed:
			case Struct:
			case Typename_:
			case Union:
			case Unsigned:
			case Void:
			case Volatile:
			case Wchar:
			case Doublecolon:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1037;
				typeSpecifier();
				}
				break;
			case Explicit:
			case Inline:
			case Virtual:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1038;
				functionSpecifier();
				}
				break;
			case Friend:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1039;
				Match(Friend);
				}
				break;
			case Typedef:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1040;
				Match(Typedef);
				}
				break;
			case Constexpr:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1041;
				Match(Constexpr);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclSpecifierSeqContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclSpecifierContext[] declSpecifier() {
			return GetRuleContexts<DeclSpecifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclSpecifierContext declSpecifier(int i) {
			return GetRuleContext<DeclSpecifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public DeclSpecifierSeqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declSpecifierSeq; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclSpecifierSeq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclSpecifierSeqContext declSpecifierSeq() {
		DeclSpecifierSeqContext _localctx = new DeclSpecifierSeqContext(Context, State);
		EnterRule(_localctx, 138, RULE_declSpecifierSeq);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1045;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 1044;
					declSpecifier();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1047;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,104,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 1050;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
			case 1:
				{
				State = 1049;
				attributeSpecifierSeq();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StorageClassSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Register() { return GetToken(CPP14Parser.Register, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(CPP14Parser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Thread_local() { return GetToken(CPP14Parser.Thread_local, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extern() { return GetToken(CPP14Parser.Extern, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mutable() { return GetToken(CPP14Parser.Mutable, 0); }
		public StorageClassSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storageClassSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStorageClassSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StorageClassSpecifierContext storageClassSpecifier() {
		StorageClassSpecifierContext _localctx = new StorageClassSpecifierContext(Context, State);
		EnterRule(_localctx, 140, RULE_storageClassSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1052;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 36)) & ~0x3f) == 0 && ((1L << (_la - 36)) & ((1L << (Extern - 36)) | (1L << (Mutable - 36)) | (1L << (Register - 36)) | (1L << (Static - 36)) | (1L << (Thread_local - 36)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Inline() { return GetToken(CPP14Parser.Inline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Virtual() { return GetToken(CPP14Parser.Virtual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Explicit() { return GetToken(CPP14Parser.Explicit, 0); }
		public FunctionSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionSpecifierContext functionSpecifier() {
		FunctionSpecifierContext _localctx = new FunctionSpecifierContext(Context, State);
		EnterRule(_localctx, 142, RULE_functionSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1054;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (Explicit - 34)) | (1L << (Inline - 34)) | (1L << (Virtual - 34)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedefNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public TypedefNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedefName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedefName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedefNameContext typedefName() {
		TypedefNameContext _localctx = new TypedefNameContext(Context, State);
		EnterRule(_localctx, 144, RULE_typedefName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1056;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TrailingTypeSpecifierContext trailingTypeSpecifier() {
			return GetRuleContext<TrailingTypeSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassSpecifierContext classSpecifier() {
			return GetRuleContext<ClassSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumSpecifierContext enumSpecifier() {
			return GetRuleContext<EnumSpecifierContext>(0);
		}
		public TypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeSpecifierContext typeSpecifier() {
		TypeSpecifierContext _localctx = new TypeSpecifierContext(Context, State);
		EnterRule(_localctx, 146, RULE_typeSpecifier);
		try {
			State = 1061;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,106,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1058;
				trailingTypeSpecifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1059;
				classSpecifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1060;
				enumSpecifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrailingTypeSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeSpecifierContext simpleTypeSpecifier() {
			return GetRuleContext<SimpleTypeSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElaboratedTypeSpecifierContext elaboratedTypeSpecifier() {
			return GetRuleContext<ElaboratedTypeSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameSpecifierContext typeNameSpecifier() {
			return GetRuleContext<TypeNameSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CvQualifierContext cvQualifier() {
			return GetRuleContext<CvQualifierContext>(0);
		}
		public TrailingTypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trailingTypeSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrailingTypeSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TrailingTypeSpecifierContext trailingTypeSpecifier() {
		TrailingTypeSpecifierContext _localctx = new TrailingTypeSpecifierContext(Context, State);
		EnterRule(_localctx, 148, RULE_trailingTypeSpecifier);
		try {
			State = 1067;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Auto:
			case Bool:
			case Char:
			case Char16:
			case Char32:
			case Decltype:
			case Double:
			case Float:
			case Int:
			case Long:
			case Short:
			case Signed:
			case Unsigned:
			case Void:
			case Wchar:
			case Doublecolon:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1063;
				simpleTypeSpecifier();
				}
				break;
			case Class:
			case Enum:
			case Struct:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1064;
				elaboratedTypeSpecifier();
				}
				break;
			case Typename_:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1065;
				typeNameSpecifier();
				}
				break;
			case Const:
			case Volatile:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1066;
				cvQualifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSpecifierSeqContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierContext[] typeSpecifier() {
			return GetRuleContexts<TypeSpecifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierContext typeSpecifier(int i) {
			return GetRuleContext<TypeSpecifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public TypeSpecifierSeqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSpecifierSeq; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeSpecifierSeq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeSpecifierSeqContext typeSpecifierSeq() {
		TypeSpecifierSeqContext _localctx = new TypeSpecifierSeqContext(Context, State);
		EnterRule(_localctx, 150, RULE_typeSpecifierSeq);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1070;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1069;
					typeSpecifier();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1072;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,108,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 1075;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,109,Context) ) {
			case 1:
				{
				State = 1074;
				attributeSpecifierSeq();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrailingTypeSpecifierSeqContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TrailingTypeSpecifierContext[] trailingTypeSpecifier() {
			return GetRuleContexts<TrailingTypeSpecifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TrailingTypeSpecifierContext trailingTypeSpecifier(int i) {
			return GetRuleContext<TrailingTypeSpecifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public TrailingTypeSpecifierSeqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trailingTypeSpecifierSeq; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrailingTypeSpecifierSeq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TrailingTypeSpecifierSeqContext trailingTypeSpecifierSeq() {
		TrailingTypeSpecifierSeqContext _localctx = new TrailingTypeSpecifierSeqContext(Context, State);
		EnterRule(_localctx, 152, RULE_trailingTypeSpecifierSeq);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1078;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1077;
					trailingTypeSpecifier();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1080;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,110,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 1083;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,111,Context) ) {
			case 1:
				{
				State = 1082;
				attributeSpecifierSeq();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeLengthModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Short() { return GetToken(CPP14Parser.Short, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Long() { return GetToken(CPP14Parser.Long, 0); }
		public SimpleTypeLengthModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleTypeLengthModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleTypeLengthModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeLengthModifierContext simpleTypeLengthModifier() {
		SimpleTypeLengthModifierContext _localctx = new SimpleTypeLengthModifierContext(Context, State);
		EnterRule(_localctx, 154, RULE_simpleTypeLengthModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1085;
			_la = TokenStream.LA(1);
			if ( !(_la==Long || _la==Short) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeSignednessModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned() { return GetToken(CPP14Parser.Unsigned, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Signed() { return GetToken(CPP14Parser.Signed, 0); }
		public SimpleTypeSignednessModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleTypeSignednessModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleTypeSignednessModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeSignednessModifierContext simpleTypeSignednessModifier() {
		SimpleTypeSignednessModifierContext _localctx = new SimpleTypeSignednessModifierContext(Context, State);
		EnterRule(_localctx, 156, RULE_simpleTypeSignednessModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1087;
			_la = TokenStream.LA(1);
			if ( !(_la==Signed || _la==Unsigned) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TheTypeNameContext theTypeName() {
			return GetRuleContext<TheTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestedNameSpecifierContext nestedNameSpecifier() {
			return GetRuleContext<NestedNameSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTemplateIdContext simpleTemplateId() {
			return GetRuleContext<SimpleTemplateIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeSignednessModifierContext simpleTypeSignednessModifier() {
			return GetRuleContext<SimpleTypeSignednessModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeLengthModifierContext[] simpleTypeLengthModifier() {
			return GetRuleContexts<SimpleTypeLengthModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeLengthModifierContext simpleTypeLengthModifier(int i) {
			return GetRuleContext<SimpleTypeLengthModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Char() { return GetToken(CPP14Parser.Char, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Char16() { return GetToken(CPP14Parser.Char16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Char32() { return GetToken(CPP14Parser.Char32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Wchar() { return GetToken(CPP14Parser.Wchar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bool() { return GetToken(CPP14Parser.Bool, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(CPP14Parser.Int, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Float() { return GetToken(CPP14Parser.Float, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double() { return GetToken(CPP14Parser.Double, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Void() { return GetToken(CPP14Parser.Void, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Auto() { return GetToken(CPP14Parser.Auto, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecltypeSpecifierContext decltypeSpecifier() {
			return GetRuleContext<DecltypeSpecifierContext>(0);
		}
		public SimpleTypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleTypeSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleTypeSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeSpecifierContext simpleTypeSpecifier() {
		SimpleTypeSpecifierContext _localctx = new SimpleTypeSpecifierContext(Context, State);
		EnterRule(_localctx, 158, RULE_simpleTypeSpecifier);
		int _la;
		try {
			int _alt;
			State = 1141;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,122,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1090;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,112,Context) ) {
				case 1:
					{
					State = 1089;
					nestedNameSpecifier(0);
					}
					break;
				}
				State = 1092;
				theTypeName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1093;
				nestedNameSpecifier(0);
				State = 1094;
				Match(Template);
				State = 1095;
				simpleTemplateId();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1097;
				simpleTypeSignednessModifier();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1099;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Signed || _la==Unsigned) {
					{
					State = 1098;
					simpleTypeSignednessModifier();
					}
				}

				State = 1102;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1101;
						simpleTypeLengthModifier();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1104;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,114,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Signed || _la==Unsigned) {
					{
					State = 1106;
					simpleTypeSignednessModifier();
					}
				}

				State = 1109;
				Match(Char);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1111;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Signed || _la==Unsigned) {
					{
					State = 1110;
					simpleTypeSignednessModifier();
					}
				}

				State = 1113;
				Match(Char16);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1115;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Signed || _la==Unsigned) {
					{
					State = 1114;
					simpleTypeSignednessModifier();
					}
				}

				State = 1117;
				Match(Char32);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1119;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Signed || _la==Unsigned) {
					{
					State = 1118;
					simpleTypeSignednessModifier();
					}
				}

				State = 1121;
				Match(Wchar);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1122;
				Match(Bool);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1124;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Signed || _la==Unsigned) {
					{
					State = 1123;
					simpleTypeSignednessModifier();
					}
				}

				State = 1129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Long || _la==Short) {
					{
					{
					State = 1126;
					simpleTypeLengthModifier();
					}
					}
					State = 1131;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1132;
				Match(Int);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1133;
				Match(Float);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1135;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Long || _la==Short) {
					{
					State = 1134;
					simpleTypeLengthModifier();
					}
				}

				State = 1137;
				Match(Double);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1138;
				Match(Void);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1139;
				Match(Auto);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1140;
				decltypeSpecifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TheTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumNameContext enumName() {
			return GetRuleContext<EnumNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypedefNameContext typedefName() {
			return GetRuleContext<TypedefNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTemplateIdContext simpleTemplateId() {
			return GetRuleContext<SimpleTemplateIdContext>(0);
		}
		public TheTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_theTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTheTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TheTypeNameContext theTypeName() {
		TheTypeNameContext _localctx = new TheTypeNameContext(Context, State);
		EnterRule(_localctx, 160, RULE_theTypeName);
		try {
			State = 1147;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,123,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1143;
				className();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1144;
				enumName();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1145;
				typedefName();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1146;
				simpleTemplateId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecltypeSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Decltype() { return GetToken(CPP14Parser.Decltype, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Auto() { return GetToken(CPP14Parser.Auto, 0); }
		public DecltypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decltypeSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecltypeSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecltypeSpecifierContext decltypeSpecifier() {
		DecltypeSpecifierContext _localctx = new DecltypeSpecifierContext(Context, State);
		EnterRule(_localctx, 162, RULE_decltypeSpecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1149;
			Match(Decltype);
			State = 1150;
			Match(LeftParen);
			State = 1153;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,124,Context) ) {
			case 1:
				{
				State = 1151;
				expression();
				}
				break;
			case 2:
				{
				State = 1152;
				Match(Auto);
				}
				break;
			}
			State = 1155;
			Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElaboratedTypeSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassKeyContext classKey() {
			return GetRuleContext<ClassKeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTemplateIdContext simpleTemplateId() {
			return GetRuleContext<SimpleTemplateIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestedNameSpecifierContext nestedNameSpecifier() {
			return GetRuleContext<NestedNameSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Enum() { return GetToken(CPP14Parser.Enum, 0); }
		public ElaboratedTypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elaboratedTypeSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElaboratedTypeSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElaboratedTypeSpecifierContext elaboratedTypeSpecifier() {
		ElaboratedTypeSpecifierContext _localctx = new ElaboratedTypeSpecifierContext(Context, State);
		EnterRule(_localctx, 164, RULE_elaboratedTypeSpecifier);
		int _la;
		try {
			State = 1179;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Class:
			case Struct:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1157;
				classKey();
				State = 1172;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,128,Context) ) {
				case 1:
					{
					State = 1159;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==Alignas || _la==LeftBracket) {
						{
						State = 1158;
						attributeSpecifierSeq();
						}
					}

					State = 1162;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,126,Context) ) {
					case 1:
						{
						State = 1161;
						nestedNameSpecifier(0);
						}
						break;
					}
					State = 1164;
					Match(Identifier);
					}
					break;
				case 2:
					{
					State = 1165;
					simpleTemplateId();
					}
					break;
				case 3:
					{
					State = 1166;
					nestedNameSpecifier(0);
					State = 1168;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==Template) {
						{
						State = 1167;
						Match(Template);
						}
					}

					State = 1170;
					simpleTemplateId();
					}
					break;
				}
				}
				break;
			case Enum:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1174;
				Match(Enum);
				State = 1176;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,129,Context) ) {
				case 1:
					{
					State = 1175;
					nestedNameSpecifier(0);
					}
					break;
				}
				State = 1178;
				Match(Identifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public EnumNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumNameContext enumName() {
		EnumNameContext _localctx = new EnumNameContext(Context, State);
		EnterRule(_localctx, 166, RULE_enumName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1181;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumHeadContext enumHead() {
			return GetRuleContext<EnumHeadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(CPP14Parser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(CPP14Parser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumeratorListContext enumeratorList() {
			return GetRuleContext<EnumeratorListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public EnumSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumSpecifierContext enumSpecifier() {
		EnumSpecifierContext _localctx = new EnumSpecifierContext(Context, State);
		EnterRule(_localctx, 168, RULE_enumSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1183;
			enumHead();
			State = 1184;
			Match(LeftBrace);
			State = 1189;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 1185;
				enumeratorList();
				State = 1187;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 1186;
					Match(Comma);
					}
				}

				}
			}

			State = 1191;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumHeadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumkeyContext enumkey() {
			return GetRuleContext<EnumkeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumbaseContext enumbase() {
			return GetRuleContext<EnumbaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestedNameSpecifierContext nestedNameSpecifier() {
			return GetRuleContext<NestedNameSpecifierContext>(0);
		}
		public EnumHeadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumHead; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumHead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumHeadContext enumHead() {
		EnumHeadContext _localctx = new EnumHeadContext(Context, State);
		EnterRule(_localctx, 170, RULE_enumHead);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1193;
			enumkey();
			State = 1195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Alignas || _la==LeftBracket) {
				{
				State = 1194;
				attributeSpecifierSeq();
				}
			}

			State = 1201;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Decltype || _la==Doublecolon || _la==Identifier) {
				{
				State = 1198;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,134,Context) ) {
				case 1:
					{
					State = 1197;
					nestedNameSpecifier(0);
					}
					break;
				}
				State = 1200;
				Match(Identifier);
				}
			}

			State = 1204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 1203;
				enumbase();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpaqueEnumDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumkeyContext enumkey() {
			return GetRuleContext<EnumkeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumbaseContext enumbase() {
			return GetRuleContext<EnumbaseContext>(0);
		}
		public OpaqueEnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opaqueEnumDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpaqueEnumDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpaqueEnumDeclarationContext opaqueEnumDeclaration() {
		OpaqueEnumDeclarationContext _localctx = new OpaqueEnumDeclarationContext(Context, State);
		EnterRule(_localctx, 172, RULE_opaqueEnumDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1206;
			enumkey();
			State = 1208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Alignas || _la==LeftBracket) {
				{
				State = 1207;
				attributeSpecifierSeq();
				}
			}

			State = 1210;
			Match(Identifier);
			State = 1212;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 1211;
				enumbase();
				}
			}

			State = 1214;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumkeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Enum() { return GetToken(CPP14Parser.Enum, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(CPP14Parser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Struct() { return GetToken(CPP14Parser.Struct, 0); }
		public EnumkeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumkey; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumkey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumkeyContext enumkey() {
		EnumkeyContext _localctx = new EnumkeyContext(Context, State);
		EnterRule(_localctx, 174, RULE_enumkey);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1216;
			Match(Enum);
			State = 1218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Class || _la==Struct) {
				{
				State = 1217;
				_la = TokenStream.LA(1);
				if ( !(_la==Class || _la==Struct) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumbaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(CPP14Parser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierSeqContext typeSpecifierSeq() {
			return GetRuleContext<TypeSpecifierSeqContext>(0);
		}
		public EnumbaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumbase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumbase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumbaseContext enumbase() {
		EnumbaseContext _localctx = new EnumbaseContext(Context, State);
		EnterRule(_localctx, 176, RULE_enumbase);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1220;
			Match(Colon);
			State = 1221;
			typeSpecifierSeq();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumeratorListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumeratorDefinitionContext[] enumeratorDefinition() {
			return GetRuleContexts<EnumeratorDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumeratorDefinitionContext enumeratorDefinition(int i) {
			return GetRuleContext<EnumeratorDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CPP14Parser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CPP14Parser.Comma, i);
		}
		public EnumeratorListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumeratorList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumeratorList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumeratorListContext enumeratorList() {
		EnumeratorListContext _localctx = new EnumeratorListContext(Context, State);
		EnterRule(_localctx, 178, RULE_enumeratorList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1223;
			enumeratorDefinition();
			State = 1228;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,140,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1224;
					Match(Comma);
					State = 1225;
					enumeratorDefinition();
					}
					} 
				}
				State = 1230;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,140,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumeratorDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumeratorContext enumerator() {
			return GetRuleContext<EnumeratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public EnumeratorDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumeratorDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumeratorDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumeratorDefinitionContext enumeratorDefinition() {
		EnumeratorDefinitionContext _localctx = new EnumeratorDefinitionContext(Context, State);
		EnterRule(_localctx, 180, RULE_enumeratorDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1231;
			enumerator();
			State = 1234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Assign) {
				{
				State = 1232;
				Match(Assign);
				State = 1233;
				constantExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumeratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public EnumeratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumeratorContext enumerator() {
		EnumeratorContext _localctx = new EnumeratorContext(Context, State);
		EnterRule(_localctx, 182, RULE_enumerator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1236;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OriginalNamespaceNameContext originalNamespaceName() {
			return GetRuleContext<OriginalNamespaceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceAliasContext namespaceAlias() {
			return GetRuleContext<NamespaceAliasContext>(0);
		}
		public NamespaceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceNameContext namespaceName() {
		NamespaceNameContext _localctx = new NamespaceNameContext(Context, State);
		EnterRule(_localctx, 184, RULE_namespaceName);
		try {
			State = 1240;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,142,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1238;
				originalNamespaceName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1239;
				namespaceAlias();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OriginalNamespaceNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public OriginalNamespaceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_originalNamespaceName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOriginalNamespaceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OriginalNamespaceNameContext originalNamespaceName() {
		OriginalNamespaceNameContext _localctx = new OriginalNamespaceNameContext(Context, State);
		EnterRule(_localctx, 186, RULE_originalNamespaceName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1242;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDefinitionContext : ParserRuleContext {
		public DeclarationseqContext namespaceBody;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Namespace() { return GetToken(CPP14Parser.Namespace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(CPP14Parser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(CPP14Parser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Inline() { return GetToken(CPP14Parser.Inline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OriginalNamespaceNameContext originalNamespaceName() {
			return GetRuleContext<OriginalNamespaceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationseqContext declarationseq() {
			return GetRuleContext<DeclarationseqContext>(0);
		}
		public NamespaceDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDefinitionContext namespaceDefinition() {
		NamespaceDefinitionContext _localctx = new NamespaceDefinitionContext(Context, State);
		EnterRule(_localctx, 188, RULE_namespaceDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1245;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Inline) {
				{
				State = 1244;
				Match(Inline);
				}
			}

			State = 1247;
			Match(Namespace);
			State = 1250;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,144,Context) ) {
			case 1:
				{
				State = 1248;
				Match(Identifier);
				}
				break;
			case 2:
				{
				State = 1249;
				originalNamespaceName();
				}
				break;
			}
			State = 1252;
			Match(LeftBrace);
			State = 1254;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (Alignas - 10)) | (1L << (Asm - 10)) | (1L << (Auto - 10)) | (1L << (Bool - 10)) | (1L << (Char - 10)) | (1L << (Char16 - 10)) | (1L << (Char32 - 10)) | (1L << (Class - 10)) | (1L << (Const - 10)) | (1L << (Constexpr - 10)) | (1L << (Decltype - 10)) | (1L << (Double - 10)) | (1L << (Enum - 10)) | (1L << (Explicit - 10)) | (1L << (Extern - 10)) | (1L << (Float - 10)) | (1L << (Friend - 10)) | (1L << (Inline - 10)) | (1L << (Int - 10)) | (1L << (Long - 10)) | (1L << (Mutable - 10)) | (1L << (Namespace - 10)) | (1L << (Operator - 10)) | (1L << (Register - 10)) | (1L << (Short - 10)) | (1L << (Signed - 10)) | (1L << (Static - 10)) | (1L << (Static_assert - 10)) | (1L << (Struct - 10)) | (1L << (Template - 10)) | (1L << (Thread_local - 10)))) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (Typedef - 74)) | (1L << (Typename_ - 74)) | (1L << (Union - 74)) | (1L << (Unsigned - 74)) | (1L << (Using - 74)) | (1L << (Virtual - 74)) | (1L << (Void - 74)) | (1L << (Volatile - 74)) | (1L << (Wchar - 74)) | (1L << (LeftParen - 74)) | (1L << (LeftBracket - 74)) | (1L << (Star - 74)) | (1L << (And - 74)) | (1L << (Tilde - 74)) | (1L << (AndAnd - 74)) | (1L << (Doublecolon - 74)) | (1L << (Semi - 74)) | (1L << (Ellipsis - 74)) | (1L << (Identifier - 74)))) != 0)) {
				{
				State = 1253;
				_localctx.namespaceBody = declarationseq();
				}
			}

			State = 1256;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceAliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public NamespaceAliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceAlias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceAliasContext namespaceAlias() {
		NamespaceAliasContext _localctx = new NamespaceAliasContext(Context, State);
		EnterRule(_localctx, 190, RULE_namespaceAlias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1258;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceAliasDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Namespace() { return GetToken(CPP14Parser.Namespace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiednamespacespecifierContext qualifiednamespacespecifier() {
			return GetRuleContext<QualifiednamespacespecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		public NamespaceAliasDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceAliasDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceAliasDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceAliasDefinitionContext namespaceAliasDefinition() {
		NamespaceAliasDefinitionContext _localctx = new NamespaceAliasDefinitionContext(Context, State);
		EnterRule(_localctx, 192, RULE_namespaceAliasDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1260;
			Match(Namespace);
			State = 1261;
			Match(Identifier);
			State = 1262;
			Match(Assign);
			State = 1263;
			qualifiednamespacespecifier();
			State = 1264;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiednamespacespecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestedNameSpecifierContext nestedNameSpecifier() {
			return GetRuleContext<NestedNameSpecifierContext>(0);
		}
		public QualifiednamespacespecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiednamespacespecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiednamespacespecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiednamespacespecifierContext qualifiednamespacespecifier() {
		QualifiednamespacespecifierContext _localctx = new QualifiednamespacespecifierContext(Context, State);
		EnterRule(_localctx, 194, RULE_qualifiednamespacespecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1267;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,146,Context) ) {
			case 1:
				{
				State = 1266;
				nestedNameSpecifier(0);
				}
				break;
			}
			State = 1269;
			namespaceName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Using() { return GetToken(CPP14Parser.Using, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnqualifiedIdContext unqualifiedId() {
			return GetRuleContext<UnqualifiedIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Doublecolon() { return GetToken(CPP14Parser.Doublecolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NestedNameSpecifierContext nestedNameSpecifier() {
			return GetRuleContext<NestedNameSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Typename_() { return GetToken(CPP14Parser.Typename_, 0); }
		public UsingDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingDeclarationContext usingDeclaration() {
		UsingDeclarationContext _localctx = new UsingDeclarationContext(Context, State);
		EnterRule(_localctx, 196, RULE_usingDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1271;
			Match(Using);
			State = 1277;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,148,Context) ) {
			case 1:
				{
				{
				State = 1273;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Typename_) {
					{
					State = 1272;
					Match(Typename_);
					}
				}

				State = 1275;
				nestedNameSpecifier(0);
				}
				}
				break;
			case 2:
				{
				State = 1276;
				Match(Doublecolon);
				}
				break;
			}
			State = 1279;
			unqualifiedId();
			State = 1280;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Using() { return GetToken(CPP14Parser.Using, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Namespace() { return GetToken(CPP14Parser.Namespace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestedNameSpecifierContext nestedNameSpecifier() {
			return GetRuleContext<NestedNameSpecifierContext>(0);
		}
		public UsingDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingDirectiveContext usingDirective() {
		UsingDirectiveContext _localctx = new UsingDirectiveContext(Context, State);
		EnterRule(_localctx, 198, RULE_usingDirective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1283;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Alignas || _la==LeftBracket) {
				{
				State = 1282;
				attributeSpecifierSeq();
				}
			}

			State = 1285;
			Match(Using);
			State = 1286;
			Match(Namespace);
			State = 1288;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,150,Context) ) {
			case 1:
				{
				State = 1287;
				nestedNameSpecifier(0);
				}
				break;
			}
			State = 1290;
			namespaceName();
			State = 1291;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsmDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Asm() { return GetToken(CPP14Parser.Asm, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(CPP14Parser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		public AsmDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asmDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsmDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsmDefinitionContext asmDefinition() {
		AsmDefinitionContext _localctx = new AsmDefinitionContext(Context, State);
		EnterRule(_localctx, 200, RULE_asmDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1293;
			Match(Asm);
			State = 1294;
			Match(LeftParen);
			State = 1295;
			Match(StringLiteral);
			State = 1296;
			Match(RightParen);
			State = 1297;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinkageSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extern() { return GetToken(CPP14Parser.Extern, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(CPP14Parser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(CPP14Parser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(CPP14Parser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationseqContext declarationseq() {
			return GetRuleContext<DeclarationseqContext>(0);
		}
		public LinkageSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_linkageSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLinkageSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LinkageSpecificationContext linkageSpecification() {
		LinkageSpecificationContext _localctx = new LinkageSpecificationContext(Context, State);
		EnterRule(_localctx, 202, RULE_linkageSpecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1299;
			Match(Extern);
			State = 1300;
			Match(StringLiteral);
			State = 1307;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftBrace:
				{
				State = 1301;
				Match(LeftBrace);
				State = 1303;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (Alignas - 10)) | (1L << (Asm - 10)) | (1L << (Auto - 10)) | (1L << (Bool - 10)) | (1L << (Char - 10)) | (1L << (Char16 - 10)) | (1L << (Char32 - 10)) | (1L << (Class - 10)) | (1L << (Const - 10)) | (1L << (Constexpr - 10)) | (1L << (Decltype - 10)) | (1L << (Double - 10)) | (1L << (Enum - 10)) | (1L << (Explicit - 10)) | (1L << (Extern - 10)) | (1L << (Float - 10)) | (1L << (Friend - 10)) | (1L << (Inline - 10)) | (1L << (Int - 10)) | (1L << (Long - 10)) | (1L << (Mutable - 10)) | (1L << (Namespace - 10)) | (1L << (Operator - 10)) | (1L << (Register - 10)) | (1L << (Short - 10)) | (1L << (Signed - 10)) | (1L << (Static - 10)) | (1L << (Static_assert - 10)) | (1L << (Struct - 10)) | (1L << (Template - 10)) | (1L << (Thread_local - 10)))) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (Typedef - 74)) | (1L << (Typename_ - 74)) | (1L << (Union - 74)) | (1L << (Unsigned - 74)) | (1L << (Using - 74)) | (1L << (Virtual - 74)) | (1L << (Void - 74)) | (1L << (Volatile - 74)) | (1L << (Wchar - 74)) | (1L << (LeftParen - 74)) | (1L << (LeftBracket - 74)) | (1L << (Star - 74)) | (1L << (And - 74)) | (1L << (Tilde - 74)) | (1L << (AndAnd - 74)) | (1L << (Doublecolon - 74)) | (1L << (Semi - 74)) | (1L << (Ellipsis - 74)) | (1L << (Identifier - 74)))) != 0)) {
					{
					State = 1302;
					declarationseq();
					}
				}

				State = 1305;
				Match(RightBrace);
				}
				break;
			case Alignas:
			case Asm:
			case Auto:
			case Bool:
			case Char:
			case Char16:
			case Char32:
			case Class:
			case Const:
			case Constexpr:
			case Decltype:
			case Double:
			case Enum:
			case Explicit:
			case Extern:
			case Float:
			case Friend:
			case Inline:
			case Int:
			case Long:
			case Mutable:
			case Namespace:
			case Operator:
			case Register:
			case Short:
			case Signed:
			case Static:
			case Static_assert:
			case Struct:
			case Template:
			case Thread_local:
			case Typedef:
			case Typename_:
			case Union:
			case Unsigned:
			case Using:
			case Virtual:
			case Void:
			case Volatile:
			case Wchar:
			case LeftParen:
			case LeftBracket:
			case Star:
			case And:
			case Tilde:
			case AndAnd:
			case Doublecolon:
			case Semi:
			case Ellipsis:
			case Identifier:
				{
				State = 1306;
				declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeSpecifierSeqContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierContext[] attributeSpecifier() {
			return GetRuleContexts<AttributeSpecifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierContext attributeSpecifier(int i) {
			return GetRuleContext<AttributeSpecifierContext>(i);
		}
		public AttributeSpecifierSeqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeSpecifierSeq; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeSpecifierSeq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeSpecifierSeqContext attributeSpecifierSeq() {
		AttributeSpecifierSeqContext _localctx = new AttributeSpecifierSeqContext(Context, State);
		EnterRule(_localctx, 204, RULE_attributeSpecifierSeq);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1310;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1309;
					attributeSpecifier();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1312;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,153,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LeftBracket() { return GetTokens(CPP14Parser.LeftBracket); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket(int i) {
			return GetToken(CPP14Parser.LeftBracket, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RightBracket() { return GetTokens(CPP14Parser.RightBracket); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket(int i) {
			return GetToken(CPP14Parser.RightBracket, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeListContext attributeList() {
			return GetRuleContext<AttributeListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlignmentspecifierContext alignmentspecifier() {
			return GetRuleContext<AlignmentspecifierContext>(0);
		}
		public AttributeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeSpecifierContext attributeSpecifier() {
		AttributeSpecifierContext _localctx = new AttributeSpecifierContext(Context, State);
		EnterRule(_localctx, 206, RULE_attributeSpecifier);
		int _la;
		try {
			State = 1322;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftBracket:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1314;
				Match(LeftBracket);
				State = 1315;
				Match(LeftBracket);
				State = 1317;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 1316;
					attributeList();
					}
				}

				State = 1319;
				Match(RightBracket);
				State = 1320;
				Match(RightBracket);
				}
				break;
			case Alignas:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1321;
				alignmentspecifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlignmentspecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Alignas() { return GetToken(CPP14Parser.Alignas, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TheTypeIdContext theTypeId() {
			return GetRuleContext<TheTypeIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		public AlignmentspecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alignmentspecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlignmentspecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlignmentspecifierContext alignmentspecifier() {
		AlignmentspecifierContext _localctx = new AlignmentspecifierContext(Context, State);
		EnterRule(_localctx, 208, RULE_alignmentspecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1324;
			Match(Alignas);
			State = 1325;
			Match(LeftParen);
			State = 1328;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,156,Context) ) {
			case 1:
				{
				State = 1326;
				theTypeId();
				}
				break;
			case 2:
				{
				State = 1327;
				constantExpression();
				}
				break;
			}
			State = 1331;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Ellipsis) {
				{
				State = 1330;
				Match(Ellipsis);
				}
			}

			State = 1333;
			Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CPP14Parser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CPP14Parser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		public AttributeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeListContext attributeList() {
		AttributeListContext _localctx = new AttributeListContext(Context, State);
		EnterRule(_localctx, 210, RULE_attributeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1335;
			attribute();
			State = 1340;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 1336;
				Match(Comma);
				State = 1337;
				attribute();
				}
				}
				State = 1342;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1344;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Ellipsis) {
				{
				State = 1343;
				Match(Ellipsis);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeNamespaceContext attributeNamespace() {
			return GetRuleContext<AttributeNamespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Doublecolon() { return GetToken(CPP14Parser.Doublecolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeArgumentClauseContext attributeArgumentClause() {
			return GetRuleContext<AttributeArgumentClauseContext>(0);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 212, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1349;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,160,Context) ) {
			case 1:
				{
				State = 1346;
				attributeNamespace();
				State = 1347;
				Match(Doublecolon);
				}
				break;
			}
			State = 1351;
			Match(Identifier);
			State = 1353;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LeftParen) {
				{
				State = 1352;
				attributeArgumentClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeNamespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public AttributeNamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeNamespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeNamespaceContext attributeNamespace() {
		AttributeNamespaceContext _localctx = new AttributeNamespaceContext(Context, State);
		EnterRule(_localctx, 214, RULE_attributeNamespace);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1355;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeArgumentClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BalancedTokenSeqContext balancedTokenSeq() {
			return GetRuleContext<BalancedTokenSeqContext>(0);
		}
		public AttributeArgumentClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeArgumentClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeArgumentClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeArgumentClauseContext attributeArgumentClause() {
		AttributeArgumentClauseContext _localctx = new AttributeArgumentClauseContext(Context, State);
		EnterRule(_localctx, 216, RULE_attributeArgumentClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1357;
			Match(LeftParen);
			State = 1359;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IntegerLiteral) | (1L << CharacterLiteral) | (1L << FloatingLiteral) | (1L << StringLiteral) | (1L << BooleanLiteral) | (1L << PointerLiteral) | (1L << UserDefinedLiteral) | (1L << MultiLineMacro) | (1L << Directive) | (1L << Alignas) | (1L << Alignof) | (1L << Asm) | (1L << Auto) | (1L << Bool) | (1L << Break) | (1L << Case) | (1L << Catch) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Class) | (1L << Const) | (1L << Constexpr) | (1L << Const_cast) | (1L << Continue) | (1L << Decltype) | (1L << Default) | (1L << Delete) | (1L << Do) | (1L << Double) | (1L << Dynamic_cast) | (1L << Else) | (1L << Enum) | (1L << Explicit) | (1L << Export) | (1L << Extern) | (1L << False_) | (1L << Final) | (1L << Float) | (1L << For) | (1L << Friend) | (1L << Goto) | (1L << If) | (1L << Inline) | (1L << Int) | (1L << Long) | (1L << Mutable) | (1L << Namespace) | (1L << New) | (1L << Noexcept) | (1L << Nullptr) | (1L << Operator) | (1L << Override) | (1L << Private) | (1L << Protected) | (1L << Public) | (1L << Register) | (1L << Reinterpret_cast) | (1L << Return) | (1L << Short) | (1L << Signed) | (1L << Sizeof) | (1L << Static))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Static_assert - 64)) | (1L << (Static_cast - 64)) | (1L << (Struct - 64)) | (1L << (Switch - 64)) | (1L << (Template - 64)) | (1L << (This - 64)) | (1L << (Thread_local - 64)) | (1L << (Throw - 64)) | (1L << (True_ - 64)) | (1L << (Try - 64)) | (1L << (Typedef - 64)) | (1L << (Typeid_ - 64)) | (1L << (Typename_ - 64)) | (1L << (Union - 64)) | (1L << (Unsigned - 64)) | (1L << (Using - 64)) | (1L << (Virtual - 64)) | (1L << (Void - 64)) | (1L << (Volatile - 64)) | (1L << (Wchar - 64)) | (1L << (While - 64)) | (1L << (LeftParen - 64)) | (1L << (LeftBracket - 64)) | (1L << (LeftBrace - 64)) | (1L << (Plus - 64)) | (1L << (Minus - 64)) | (1L << (Star - 64)) | (1L << (Div - 64)) | (1L << (Mod - 64)) | (1L << (Caret - 64)) | (1L << (And - 64)) | (1L << (Or - 64)) | (1L << (Tilde - 64)) | (1L << (Not - 64)) | (1L << (Assign - 64)) | (1L << (Less - 64)) | (1L << (Greater - 64)) | (1L << (PlusAssign - 64)) | (1L << (MinusAssign - 64)) | (1L << (StarAssign - 64)) | (1L << (DivAssign - 64)) | (1L << (ModAssign - 64)) | (1L << (XorAssign - 64)) | (1L << (AndAssign - 64)) | (1L << (OrAssign - 64)) | (1L << (LeftShiftAssign - 64)) | (1L << (RightShiftAssign - 64)) | (1L << (Equal - 64)) | (1L << (NotEqual - 64)) | (1L << (LessEqual - 64)) | (1L << (GreaterEqual - 64)) | (1L << (AndAnd - 64)) | (1L << (OrOr - 64)) | (1L << (PlusPlus - 64)) | (1L << (MinusMinus - 64)) | (1L << (Comma - 64)) | (1L << (ArrowStar - 64)) | (1L << (Arrow - 64)) | (1L << (Question - 64)) | (1L << (Colon - 64)) | (1L << (Doublecolon - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (Semi - 128)) | (1L << (Dot - 128)) | (1L << (DotStar - 128)) | (1L << (Ellipsis - 128)) | (1L << (Identifier - 128)) | (1L << (DecimalLiteral - 128)) | (1L << (OctalLiteral - 128)) | (1L << (HexadecimalLiteral - 128)) | (1L << (BinaryLiteral - 128)) | (1L << (Integersuffix - 128)) | (1L << (UserDefinedIntegerLiteral - 128)) | (1L << (UserDefinedFloatingLiteral - 128)) | (1L << (UserDefinedStringLiteral - 128)) | (1L << (UserDefinedCharacterLiteral - 128)) | (1L << (Whitespace - 128)) | (1L << (Newline - 128)) | (1L << (BlockComment - 128)) | (1L << (LineComment - 128)))) != 0)) {
				{
				State = 1358;
				balancedTokenSeq();
				}
			}

			State = 1361;
			Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BalancedTokenSeqContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BalancedtokenContext[] balancedtoken() {
			return GetRuleContexts<BalancedtokenContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BalancedtokenContext balancedtoken(int i) {
			return GetRuleContext<BalancedtokenContext>(i);
		}
		public BalancedTokenSeqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_balancedTokenSeq; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBalancedTokenSeq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BalancedTokenSeqContext balancedTokenSeq() {
		BalancedTokenSeqContext _localctx = new BalancedTokenSeqContext(Context, State);
		EnterRule(_localctx, 218, RULE_balancedTokenSeq);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1364;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1363;
				balancedtoken();
				}
				}
				State = 1366;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IntegerLiteral) | (1L << CharacterLiteral) | (1L << FloatingLiteral) | (1L << StringLiteral) | (1L << BooleanLiteral) | (1L << PointerLiteral) | (1L << UserDefinedLiteral) | (1L << MultiLineMacro) | (1L << Directive) | (1L << Alignas) | (1L << Alignof) | (1L << Asm) | (1L << Auto) | (1L << Bool) | (1L << Break) | (1L << Case) | (1L << Catch) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Class) | (1L << Const) | (1L << Constexpr) | (1L << Const_cast) | (1L << Continue) | (1L << Decltype) | (1L << Default) | (1L << Delete) | (1L << Do) | (1L << Double) | (1L << Dynamic_cast) | (1L << Else) | (1L << Enum) | (1L << Explicit) | (1L << Export) | (1L << Extern) | (1L << False_) | (1L << Final) | (1L << Float) | (1L << For) | (1L << Friend) | (1L << Goto) | (1L << If) | (1L << Inline) | (1L << Int) | (1L << Long) | (1L << Mutable) | (1L << Namespace) | (1L << New) | (1L << Noexcept) | (1L << Nullptr) | (1L << Operator) | (1L << Override) | (1L << Private) | (1L << Protected) | (1L << Public) | (1L << Register) | (1L << Reinterpret_cast) | (1L << Return) | (1L << Short) | (1L << Signed) | (1L << Sizeof) | (1L << Static))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Static_assert - 64)) | (1L << (Static_cast - 64)) | (1L << (Struct - 64)) | (1L << (Switch - 64)) | (1L << (Template - 64)) | (1L << (This - 64)) | (1L << (Thread_local - 64)) | (1L << (Throw - 64)) | (1L << (True_ - 64)) | (1L << (Try - 64)) | (1L << (Typedef - 64)) | (1L << (Typeid_ - 64)) | (1L << (Typename_ - 64)) | (1L << (Union - 64)) | (1L << (Unsigned - 64)) | (1L << (Using - 64)) | (1L << (Virtual - 64)) | (1L << (Void - 64)) | (1L << (Volatile - 64)) | (1L << (Wchar - 64)) | (1L << (While - 64)) | (1L << (LeftParen - 64)) | (1L << (LeftBracket - 64)) | (1L << (LeftBrace - 64)) | (1L << (Plus - 64)) | (1L << (Minus - 64)) | (1L << (Star - 64)) | (1L << (Div - 64)) | (1L << (Mod - 64)) | (1L << (Caret - 64)) | (1L << (And - 64)) | (1L << (Or - 64)) | (1L << (Tilde - 64)) | (1L << (Not - 64)) | (1L << (Assign - 64)) | (1L << (Less - 64)) | (1L << (Greater - 64)) | (1L << (PlusAssign - 64)) | (1L << (MinusAssign - 64)) | (1L << (StarAssign - 64)) | (1L << (DivAssign - 64)) | (1L << (ModAssign - 64)) | (1L << (XorAssign - 64)) | (1L << (AndAssign - 64)) | (1L << (OrAssign - 64)) | (1L << (LeftShiftAssign - 64)) | (1L << (RightShiftAssign - 64)) | (1L << (Equal - 64)) | (1L << (NotEqual - 64)) | (1L << (LessEqual - 64)) | (1L << (GreaterEqual - 64)) | (1L << (AndAnd - 64)) | (1L << (OrOr - 64)) | (1L << (PlusPlus - 64)) | (1L << (MinusMinus - 64)) | (1L << (Comma - 64)) | (1L << (ArrowStar - 64)) | (1L << (Arrow - 64)) | (1L << (Question - 64)) | (1L << (Colon - 64)) | (1L << (Doublecolon - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (Semi - 128)) | (1L << (Dot - 128)) | (1L << (DotStar - 128)) | (1L << (Ellipsis - 128)) | (1L << (Identifier - 128)) | (1L << (DecimalLiteral - 128)) | (1L << (OctalLiteral - 128)) | (1L << (HexadecimalLiteral - 128)) | (1L << (BinaryLiteral - 128)) | (1L << (Integersuffix - 128)) | (1L << (UserDefinedIntegerLiteral - 128)) | (1L << (UserDefinedFloatingLiteral - 128)) | (1L << (UserDefinedStringLiteral - 128)) | (1L << (UserDefinedCharacterLiteral - 128)) | (1L << (Whitespace - 128)) | (1L << (Newline - 128)) | (1L << (BlockComment - 128)) | (1L << (LineComment - 128)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BalancedtokenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LeftParen() { return GetTokens(CPP14Parser.LeftParen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen(int i) {
			return GetToken(CPP14Parser.LeftParen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BalancedTokenSeqContext balancedTokenSeq() {
			return GetRuleContext<BalancedTokenSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RightParen() { return GetTokens(CPP14Parser.RightParen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen(int i) {
			return GetToken(CPP14Parser.RightParen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LeftBracket() { return GetTokens(CPP14Parser.LeftBracket); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket(int i) {
			return GetToken(CPP14Parser.LeftBracket, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RightBracket() { return GetTokens(CPP14Parser.RightBracket); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket(int i) {
			return GetToken(CPP14Parser.RightBracket, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LeftBrace() { return GetTokens(CPP14Parser.LeftBrace); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace(int i) {
			return GetToken(CPP14Parser.LeftBrace, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RightBrace() { return GetTokens(CPP14Parser.RightBrace); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace(int i) {
			return GetToken(CPP14Parser.RightBrace, i);
		}
		public BalancedtokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_balancedtoken; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBalancedtoken(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BalancedtokenContext balancedtoken() {
		BalancedtokenContext _localctx = new BalancedtokenContext(Context, State);
		EnterRule(_localctx, 220, RULE_balancedtoken);
		int _la;
		try {
			int _alt;
			State = 1385;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftParen:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1368;
				Match(LeftParen);
				State = 1369;
				balancedTokenSeq();
				State = 1370;
				Match(RightParen);
				}
				break;
			case LeftBracket:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1372;
				Match(LeftBracket);
				State = 1373;
				balancedTokenSeq();
				State = 1374;
				Match(RightBracket);
				}
				break;
			case LeftBrace:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1376;
				Match(LeftBrace);
				State = 1377;
				balancedTokenSeq();
				State = 1378;
				Match(RightBrace);
				}
				break;
			case IntegerLiteral:
			case CharacterLiteral:
			case FloatingLiteral:
			case StringLiteral:
			case BooleanLiteral:
			case PointerLiteral:
			case UserDefinedLiteral:
			case MultiLineMacro:
			case Directive:
			case Alignas:
			case Alignof:
			case Asm:
			case Auto:
			case Bool:
			case Break:
			case Case:
			case Catch:
			case Char:
			case Char16:
			case Char32:
			case Class:
			case Const:
			case Constexpr:
			case Const_cast:
			case Continue:
			case Decltype:
			case Default:
			case Delete:
			case Do:
			case Double:
			case Dynamic_cast:
			case Else:
			case Enum:
			case Explicit:
			case Export:
			case Extern:
			case False_:
			case Final:
			case Float:
			case For:
			case Friend:
			case Goto:
			case If:
			case Inline:
			case Int:
			case Long:
			case Mutable:
			case Namespace:
			case New:
			case Noexcept:
			case Nullptr:
			case Operator:
			case Override:
			case Private:
			case Protected:
			case Public:
			case Register:
			case Reinterpret_cast:
			case Return:
			case Short:
			case Signed:
			case Sizeof:
			case Static:
			case Static_assert:
			case Static_cast:
			case Struct:
			case Switch:
			case Template:
			case This:
			case Thread_local:
			case Throw:
			case True_:
			case Try:
			case Typedef:
			case Typeid_:
			case Typename_:
			case Union:
			case Unsigned:
			case Using:
			case Virtual:
			case Void:
			case Volatile:
			case Wchar:
			case While:
			case Plus:
			case Minus:
			case Star:
			case Div:
			case Mod:
			case Caret:
			case And:
			case Or:
			case Tilde:
			case Not:
			case Assign:
			case Less:
			case Greater:
			case PlusAssign:
			case MinusAssign:
			case StarAssign:
			case DivAssign:
			case ModAssign:
			case XorAssign:
			case AndAssign:
			case OrAssign:
			case LeftShiftAssign:
			case RightShiftAssign:
			case Equal:
			case NotEqual:
			case LessEqual:
			case GreaterEqual:
			case AndAnd:
			case OrOr:
			case PlusPlus:
			case MinusMinus:
			case Comma:
			case ArrowStar:
			case Arrow:
			case Question:
			case Colon:
			case Doublecolon:
			case Semi:
			case Dot:
			case DotStar:
			case Ellipsis:
			case Identifier:
			case DecimalLiteral:
			case OctalLiteral:
			case HexadecimalLiteral:
			case BinaryLiteral:
			case Integersuffix:
			case UserDefinedIntegerLiteral:
			case UserDefinedFloatingLiteral:
			case UserDefinedStringLiteral:
			case UserDefinedCharacterLiteral:
			case Whitespace:
			case Newline:
			case BlockComment:
			case LineComment:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1381;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1380;
						_la = TokenStream.LA(1);
						if ( _la <= 0 || (((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & ((1L << (LeftParen - 85)) | (1L << (RightParen - 85)) | (1L << (LeftBracket - 85)) | (1L << (RightBracket - 85)) | (1L << (LeftBrace - 85)) | (1L << (RightBrace - 85)))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1383;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,164,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitDeclaratorListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InitDeclaratorContext[] initDeclarator() {
			return GetRuleContexts<InitDeclaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitDeclaratorContext initDeclarator(int i) {
			return GetRuleContext<InitDeclaratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CPP14Parser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CPP14Parser.Comma, i);
		}
		public InitDeclaratorListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initDeclaratorList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitDeclaratorList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitDeclaratorListContext initDeclaratorList() {
		InitDeclaratorListContext _localctx = new InitDeclaratorListContext(Context, State);
		EnterRule(_localctx, 222, RULE_initDeclaratorList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1387;
			initDeclarator();
			State = 1392;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 1388;
				Match(Comma);
				State = 1389;
				initDeclarator();
				}
				}
				State = 1394;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitializerContext initializer() {
			return GetRuleContext<InitializerContext>(0);
		}
		public InitDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitDeclaratorContext initDeclarator() {
		InitDeclaratorContext _localctx = new InitDeclaratorContext(Context, State);
		EnterRule(_localctx, 224, RULE_initDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1395;
			declarator();
			State = 1397;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & ((1L << (LeftParen - 85)) | (1L << (LeftBrace - 85)) | (1L << (Assign - 85)))) != 0)) {
				{
				State = 1396;
				initializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PointerDeclaratorContext pointerDeclarator() {
			return GetRuleContext<PointerDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoPointerDeclaratorContext noPointerDeclarator() {
			return GetRuleContext<NoPointerDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParametersAndQualifiersContext parametersAndQualifiers() {
			return GetRuleContext<ParametersAndQualifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TrailingReturnTypeContext trailingReturnType() {
			return GetRuleContext<TrailingReturnTypeContext>(0);
		}
		public DeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclaratorContext declarator() {
		DeclaratorContext _localctx = new DeclaratorContext(Context, State);
		EnterRule(_localctx, 226, RULE_declarator);
		try {
			State = 1404;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,168,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1399;
				pointerDeclarator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1400;
				noPointerDeclarator(0);
				State = 1401;
				parametersAndQualifiers();
				State = 1402;
				trailingReturnType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointerDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NoPointerDeclaratorContext noPointerDeclarator() {
			return GetRuleContext<NoPointerDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointerOperatorContext[] pointerOperator() {
			return GetRuleContexts<PointerOperatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointerOperatorContext pointerOperator(int i) {
			return GetRuleContext<PointerOperatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Const() { return GetTokens(CPP14Parser.Const); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const(int i) {
			return GetToken(CPP14Parser.Const, i);
		}
		public PointerDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointerDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointerDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PointerDeclaratorContext pointerDeclarator() {
		PointerDeclaratorContext _localctx = new PointerDeclaratorContext(Context, State);
		EnterRule(_localctx, 228, RULE_pointerDeclarator);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1412;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,170,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1406;
					pointerOperator();
					State = 1408;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==Const) {
						{
						State = 1407;
						Match(Const);
						}
					}

					}
					} 
				}
				State = 1414;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,170,Context);
			}
			State = 1415;
			noPointerDeclarator(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoPointerDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratoridContext declaratorid() {
			return GetRuleContext<DeclaratoridContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PointerDeclaratorContext pointerDeclarator() {
			return GetRuleContext<PointerDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NoPointerDeclaratorContext noPointerDeclarator() {
			return GetRuleContext<NoPointerDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParametersAndQualifiersContext parametersAndQualifiers() {
			return GetRuleContext<ParametersAndQualifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(CPP14Parser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(CPP14Parser.RightBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public NoPointerDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noPointerDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoPointerDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NoPointerDeclaratorContext noPointerDeclarator() {
		return noPointerDeclarator(0);
	}

	private NoPointerDeclaratorContext noPointerDeclarator(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NoPointerDeclaratorContext _localctx = new NoPointerDeclaratorContext(Context, _parentState);
		NoPointerDeclaratorContext _prevctx = _localctx;
		int _startState = 230;
		EnterRecursionRule(_localctx, 230, RULE_noPointerDeclarator, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1426;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Decltype:
			case Operator:
			case Tilde:
			case Doublecolon:
			case Ellipsis:
			case Identifier:
				{
				State = 1418;
				declaratorid();
				State = 1420;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,171,Context) ) {
				case 1:
					{
					State = 1419;
					attributeSpecifierSeq();
					}
					break;
				}
				}
				break;
			case LeftParen:
				{
				State = 1422;
				Match(LeftParen);
				State = 1423;
				pointerDeclarator();
				State = 1424;
				Match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1442;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,176,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new NoPointerDeclaratorContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_noPointerDeclarator);
					State = 1428;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 1438;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case LeftParen:
						{
						State = 1429;
						parametersAndQualifiers();
						}
						break;
					case LeftBracket:
						{
						State = 1430;
						Match(LeftBracket);
						State = 1432;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IntegerLiteral) | (1L << CharacterLiteral) | (1L << FloatingLiteral) | (1L << StringLiteral) | (1L << BooleanLiteral) | (1L << PointerLiteral) | (1L << UserDefinedLiteral) | (1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Static_cast - 65)) | (1L << (This - 65)) | (1L << (Typeid_ - 65)) | (1L << (Typename_ - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (Not - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (Doublecolon - 65)))) != 0) || _la==Identifier) {
							{
							State = 1431;
							constantExpression();
							}
						}

						State = 1434;
						Match(RightBracket);
						State = 1436;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,174,Context) ) {
						case 1:
							{
							State = 1435;
							attributeSpecifierSeq();
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					} 
				}
				State = 1444;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,176,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ParametersAndQualifiersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterDeclarationClauseContext parameterDeclarationClause() {
			return GetRuleContext<ParameterDeclarationClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CvqualifierseqContext cvqualifierseq() {
			return GetRuleContext<CvqualifierseqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RefqualifierContext refqualifier() {
			return GetRuleContext<RefqualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExceptionSpecificationContext exceptionSpecification() {
			return GetRuleContext<ExceptionSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public ParametersAndQualifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parametersAndQualifiers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParametersAndQualifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersAndQualifiersContext parametersAndQualifiers() {
		ParametersAndQualifiersContext _localctx = new ParametersAndQualifiersContext(Context, State);
		EnterRule(_localctx, 232, RULE_parametersAndQualifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1445;
			Match(LeftParen);
			State = 1447;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (Alignas - 10)) | (1L << (Auto - 10)) | (1L << (Bool - 10)) | (1L << (Char - 10)) | (1L << (Char16 - 10)) | (1L << (Char32 - 10)) | (1L << (Class - 10)) | (1L << (Const - 10)) | (1L << (Constexpr - 10)) | (1L << (Decltype - 10)) | (1L << (Double - 10)) | (1L << (Enum - 10)) | (1L << (Explicit - 10)) | (1L << (Extern - 10)) | (1L << (Float - 10)) | (1L << (Friend - 10)) | (1L << (Inline - 10)) | (1L << (Int - 10)) | (1L << (Long - 10)) | (1L << (Mutable - 10)) | (1L << (Register - 10)) | (1L << (Short - 10)) | (1L << (Signed - 10)) | (1L << (Static - 10)) | (1L << (Struct - 10)) | (1L << (Thread_local - 10)))) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (Typedef - 74)) | (1L << (Typename_ - 74)) | (1L << (Union - 74)) | (1L << (Unsigned - 74)) | (1L << (Virtual - 74)) | (1L << (Void - 74)) | (1L << (Volatile - 74)) | (1L << (Wchar - 74)) | (1L << (LeftBracket - 74)) | (1L << (Doublecolon - 74)) | (1L << (Identifier - 74)))) != 0)) {
				{
				State = 1446;
				parameterDeclarationClause();
				}
			}

			State = 1449;
			Match(RightParen);
			State = 1451;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,178,Context) ) {
			case 1:
				{
				State = 1450;
				cvqualifierseq();
				}
				break;
			}
			State = 1454;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,179,Context) ) {
			case 1:
				{
				State = 1453;
				refqualifier();
				}
				break;
			}
			State = 1457;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,180,Context) ) {
			case 1:
				{
				State = 1456;
				exceptionSpecification();
				}
				break;
			}
			State = 1460;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,181,Context) ) {
			case 1:
				{
				State = 1459;
				attributeSpecifierSeq();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrailingReturnTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow() { return GetToken(CPP14Parser.Arrow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TrailingTypeSpecifierSeqContext trailingTypeSpecifierSeq() {
			return GetRuleContext<TrailingTypeSpecifierSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbstractDeclaratorContext abstractDeclarator() {
			return GetRuleContext<AbstractDeclaratorContext>(0);
		}
		public TrailingReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trailingReturnType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrailingReturnType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TrailingReturnTypeContext trailingReturnType() {
		TrailingReturnTypeContext _localctx = new TrailingReturnTypeContext(Context, State);
		EnterRule(_localctx, 234, RULE_trailingReturnType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1462;
			Match(Arrow);
			State = 1463;
			trailingTypeSpecifierSeq();
			State = 1465;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,182,Context) ) {
			case 1:
				{
				State = 1464;
				abstractDeclarator();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointerOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(CPP14Parser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AndAnd() { return GetToken(CPP14Parser.AndAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star() { return GetToken(CPP14Parser.Star, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NestedNameSpecifierContext nestedNameSpecifier() {
			return GetRuleContext<NestedNameSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CvqualifierseqContext cvqualifierseq() {
			return GetRuleContext<CvqualifierseqContext>(0);
		}
		public PointerOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointerOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointerOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PointerOperatorContext pointerOperator() {
		PointerOperatorContext _localctx = new PointerOperatorContext(Context, State);
		EnterRule(_localctx, 236, RULE_pointerOperator);
		int _la;
		try {
			State = 1481;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case And:
			case AndAnd:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1467;
				_la = TokenStream.LA(1);
				if ( !(_la==And || _la==AndAnd) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1469;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,183,Context) ) {
				case 1:
					{
					State = 1468;
					attributeSpecifierSeq();
					}
					break;
				}
				}
				break;
			case Decltype:
			case Star:
			case Doublecolon:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1472;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Decltype || _la==Doublecolon || _la==Identifier) {
					{
					State = 1471;
					nestedNameSpecifier(0);
					}
				}

				State = 1474;
				Match(Star);
				State = 1476;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,185,Context) ) {
				case 1:
					{
					State = 1475;
					attributeSpecifierSeq();
					}
					break;
				}
				State = 1479;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,186,Context) ) {
				case 1:
					{
					State = 1478;
					cvqualifierseq();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CvqualifierseqContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CvQualifierContext[] cvQualifier() {
			return GetRuleContexts<CvQualifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CvQualifierContext cvQualifier(int i) {
			return GetRuleContext<CvQualifierContext>(i);
		}
		public CvqualifierseqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cvqualifierseq; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCvqualifierseq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CvqualifierseqContext cvqualifierseq() {
		CvqualifierseqContext _localctx = new CvqualifierseqContext(Context, State);
		EnterRule(_localctx, 238, RULE_cvqualifierseq);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1484;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1483;
					cvQualifier();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1486;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,188,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CvQualifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(CPP14Parser.Const, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Volatile() { return GetToken(CPP14Parser.Volatile, 0); }
		public CvQualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cvQualifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCvQualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CvQualifierContext cvQualifier() {
		CvQualifierContext _localctx = new CvQualifierContext(Context, State);
		EnterRule(_localctx, 240, RULE_cvQualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1488;
			_la = TokenStream.LA(1);
			if ( !(_la==Const || _la==Volatile) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RefqualifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(CPP14Parser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AndAnd() { return GetToken(CPP14Parser.AndAnd, 0); }
		public RefqualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_refqualifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRefqualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RefqualifierContext refqualifier() {
		RefqualifierContext _localctx = new RefqualifierContext(Context, State);
		EnterRule(_localctx, 242, RULE_refqualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1490;
			_la = TokenStream.LA(1);
			if ( !(_la==And || _la==AndAnd) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaratoridContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdExpressionContext idExpression() {
			return GetRuleContext<IdExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		public DeclaratoridContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaratorid; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaratorid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclaratoridContext declaratorid() {
		DeclaratoridContext _localctx = new DeclaratoridContext(Context, State);
		EnterRule(_localctx, 244, RULE_declaratorid);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1493;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Ellipsis) {
				{
				State = 1492;
				Match(Ellipsis);
				}
			}

			State = 1495;
			idExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TheTypeIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierSeqContext typeSpecifierSeq() {
			return GetRuleContext<TypeSpecifierSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbstractDeclaratorContext abstractDeclarator() {
			return GetRuleContext<AbstractDeclaratorContext>(0);
		}
		public TheTypeIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_theTypeId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTheTypeId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TheTypeIdContext theTypeId() {
		TheTypeIdContext _localctx = new TheTypeIdContext(Context, State);
		EnterRule(_localctx, 246, RULE_theTypeId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1497;
			typeSpecifierSeq();
			State = 1499;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,190,Context) ) {
			case 1:
				{
				State = 1498;
				abstractDeclarator();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbstractDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PointerAbstractDeclaratorContext pointerAbstractDeclarator() {
			return GetRuleContext<PointerAbstractDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParametersAndQualifiersContext parametersAndQualifiers() {
			return GetRuleContext<ParametersAndQualifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TrailingReturnTypeContext trailingReturnType() {
			return GetRuleContext<TrailingReturnTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoPointerAbstractDeclaratorContext noPointerAbstractDeclarator() {
			return GetRuleContext<NoPointerAbstractDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbstractPackDeclaratorContext abstractPackDeclarator() {
			return GetRuleContext<AbstractPackDeclaratorContext>(0);
		}
		public AbstractDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstractDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbstractDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbstractDeclaratorContext abstractDeclarator() {
		AbstractDeclaratorContext _localctx = new AbstractDeclaratorContext(Context, State);
		EnterRule(_localctx, 248, RULE_abstractDeclarator);
		try {
			State = 1509;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,192,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1501;
				pointerAbstractDeclarator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1503;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,191,Context) ) {
				case 1:
					{
					State = 1502;
					noPointerAbstractDeclarator(0);
					}
					break;
				}
				State = 1505;
				parametersAndQualifiers();
				State = 1506;
				trailingReturnType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1508;
				abstractPackDeclarator();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointerAbstractDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NoPointerAbstractDeclaratorContext noPointerAbstractDeclarator() {
			return GetRuleContext<NoPointerAbstractDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointerOperatorContext[] pointerOperator() {
			return GetRuleContexts<PointerOperatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointerOperatorContext pointerOperator(int i) {
			return GetRuleContext<PointerOperatorContext>(i);
		}
		public PointerAbstractDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointerAbstractDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointerAbstractDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PointerAbstractDeclaratorContext pointerAbstractDeclarator() {
		PointerAbstractDeclaratorContext _localctx = new PointerAbstractDeclaratorContext(Context, State);
		EnterRule(_localctx, 250, RULE_pointerAbstractDeclarator);
		int _la;
		try {
			State = 1520;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftParen:
			case LeftBracket:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1511;
				noPointerAbstractDeclarator(0);
				}
				break;
			case Decltype:
			case Star:
			case And:
			case AndAnd:
			case Doublecolon:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1513;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1512;
					pointerOperator();
					}
					}
					State = 1515;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Decltype || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (Star - 93)) | (1L << (And - 93)) | (1L << (AndAnd - 93)) | (1L << (Doublecolon - 93)) | (1L << (Identifier - 93)))) != 0) );
				State = 1518;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,194,Context) ) {
				case 1:
					{
					State = 1517;
					noPointerAbstractDeclarator(0);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoPointerAbstractDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParametersAndQualifiersContext parametersAndQualifiers() {
			return GetRuleContext<ParametersAndQualifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(CPP14Parser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(CPP14Parser.RightBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PointerAbstractDeclaratorContext pointerAbstractDeclarator() {
			return GetRuleContext<PointerAbstractDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NoPointerAbstractDeclaratorContext[] noPointerAbstractDeclarator() {
			return GetRuleContexts<NoPointerAbstractDeclaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoPointerAbstractDeclaratorContext noPointerAbstractDeclarator(int i) {
			return GetRuleContext<NoPointerAbstractDeclaratorContext>(i);
		}
		public NoPointerAbstractDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noPointerAbstractDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoPointerAbstractDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NoPointerAbstractDeclaratorContext noPointerAbstractDeclarator() {
		return noPointerAbstractDeclarator(0);
	}

	private NoPointerAbstractDeclaratorContext noPointerAbstractDeclarator(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NoPointerAbstractDeclaratorContext _localctx = new NoPointerAbstractDeclaratorContext(Context, _parentState);
		NoPointerAbstractDeclaratorContext _prevctx = _localctx;
		int _startState = 252;
		EnterRecursionRule(_localctx, 252, RULE_noPointerAbstractDeclarator, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1536;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,198,Context) ) {
			case 1:
				{
				State = 1523;
				parametersAndQualifiers();
				}
				break;
			case 2:
				{
				State = 1524;
				Match(LeftBracket);
				State = 1526;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IntegerLiteral) | (1L << CharacterLiteral) | (1L << FloatingLiteral) | (1L << StringLiteral) | (1L << BooleanLiteral) | (1L << PointerLiteral) | (1L << UserDefinedLiteral) | (1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Static_cast - 65)) | (1L << (This - 65)) | (1L << (Typeid_ - 65)) | (1L << (Typename_ - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (Not - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (Doublecolon - 65)))) != 0) || _la==Identifier) {
					{
					State = 1525;
					constantExpression();
					}
				}

				State = 1528;
				Match(RightBracket);
				State = 1530;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,197,Context) ) {
				case 1:
					{
					State = 1529;
					attributeSpecifierSeq();
					}
					break;
				}
				}
				break;
			case 3:
				{
				State = 1532;
				Match(LeftParen);
				State = 1533;
				pointerAbstractDeclarator();
				State = 1534;
				Match(RightParen);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1553;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,202,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new NoPointerAbstractDeclaratorContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_noPointerAbstractDeclarator);
					State = 1538;
					if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
					State = 1549;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,201,Context) ) {
					case 1:
						{
						State = 1539;
						parametersAndQualifiers();
						}
						break;
					case 2:
						{
						State = 1540;
						noPointerAbstractDeclarator(0);
						State = 1541;
						Match(LeftBracket);
						State = 1543;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IntegerLiteral) | (1L << CharacterLiteral) | (1L << FloatingLiteral) | (1L << StringLiteral) | (1L << BooleanLiteral) | (1L << PointerLiteral) | (1L << UserDefinedLiteral) | (1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Static_cast - 65)) | (1L << (This - 65)) | (1L << (Typeid_ - 65)) | (1L << (Typename_ - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (Not - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (Doublecolon - 65)))) != 0) || _la==Identifier) {
							{
							State = 1542;
							constantExpression();
							}
						}

						State = 1545;
						Match(RightBracket);
						State = 1547;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,200,Context) ) {
						case 1:
							{
							State = 1546;
							attributeSpecifierSeq();
							}
							break;
						}
						}
						break;
					}
					}
					} 
				}
				State = 1555;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,202,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AbstractPackDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NoPointerAbstractPackDeclaratorContext noPointerAbstractPackDeclarator() {
			return GetRuleContext<NoPointerAbstractPackDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointerOperatorContext[] pointerOperator() {
			return GetRuleContexts<PointerOperatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointerOperatorContext pointerOperator(int i) {
			return GetRuleContext<PointerOperatorContext>(i);
		}
		public AbstractPackDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstractPackDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbstractPackDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbstractPackDeclaratorContext abstractPackDeclarator() {
		AbstractPackDeclaratorContext _localctx = new AbstractPackDeclaratorContext(Context, State);
		EnterRule(_localctx, 254, RULE_abstractPackDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1559;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Decltype || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (Star - 93)) | (1L << (And - 93)) | (1L << (AndAnd - 93)) | (1L << (Doublecolon - 93)) | (1L << (Identifier - 93)))) != 0)) {
				{
				{
				State = 1556;
				pointerOperator();
				}
				}
				State = 1561;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1562;
			noPointerAbstractPackDeclarator(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoPointerAbstractPackDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NoPointerAbstractPackDeclaratorContext noPointerAbstractPackDeclarator() {
			return GetRuleContext<NoPointerAbstractPackDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParametersAndQualifiersContext parametersAndQualifiers() {
			return GetRuleContext<ParametersAndQualifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(CPP14Parser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(CPP14Parser.RightBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public NoPointerAbstractPackDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noPointerAbstractPackDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoPointerAbstractPackDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NoPointerAbstractPackDeclaratorContext noPointerAbstractPackDeclarator() {
		return noPointerAbstractPackDeclarator(0);
	}

	private NoPointerAbstractPackDeclaratorContext noPointerAbstractPackDeclarator(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NoPointerAbstractPackDeclaratorContext _localctx = new NoPointerAbstractPackDeclaratorContext(Context, _parentState);
		NoPointerAbstractPackDeclaratorContext _prevctx = _localctx;
		int _startState = 256;
		EnterRecursionRule(_localctx, 256, RULE_noPointerAbstractPackDeclarator, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1565;
			Match(Ellipsis);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1581;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,207,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new NoPointerAbstractPackDeclaratorContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_noPointerAbstractPackDeclarator);
					State = 1567;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 1577;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case LeftParen:
						{
						State = 1568;
						parametersAndQualifiers();
						}
						break;
					case LeftBracket:
						{
						State = 1569;
						Match(LeftBracket);
						State = 1571;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IntegerLiteral) | (1L << CharacterLiteral) | (1L << FloatingLiteral) | (1L << StringLiteral) | (1L << BooleanLiteral) | (1L << PointerLiteral) | (1L << UserDefinedLiteral) | (1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Static_cast - 65)) | (1L << (This - 65)) | (1L << (Typeid_ - 65)) | (1L << (Typename_ - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (Not - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (Doublecolon - 65)))) != 0) || _la==Identifier) {
							{
							State = 1570;
							constantExpression();
							}
						}

						State = 1573;
						Match(RightBracket);
						State = 1575;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,205,Context) ) {
						case 1:
							{
							State = 1574;
							attributeSpecifierSeq();
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					} 
				}
				State = 1583;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,207,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ParameterDeclarationClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterDeclarationListContext parameterDeclarationList() {
			return GetRuleContext<ParameterDeclarationListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public ParameterDeclarationClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterDeclarationClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterDeclarationClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterDeclarationClauseContext parameterDeclarationClause() {
		ParameterDeclarationClauseContext _localctx = new ParameterDeclarationClauseContext(Context, State);
		EnterRule(_localctx, 258, RULE_parameterDeclarationClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1584;
			parameterDeclarationList();
			State = 1589;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma || _la==Ellipsis) {
				{
				State = 1586;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 1585;
					Match(Comma);
					}
				}

				State = 1588;
				Match(Ellipsis);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterDeclarationListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterDeclarationContext[] parameterDeclaration() {
			return GetRuleContexts<ParameterDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterDeclarationContext parameterDeclaration(int i) {
			return GetRuleContext<ParameterDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CPP14Parser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CPP14Parser.Comma, i);
		}
		public ParameterDeclarationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterDeclarationList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterDeclarationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterDeclarationListContext parameterDeclarationList() {
		ParameterDeclarationListContext _localctx = new ParameterDeclarationListContext(Context, State);
		EnterRule(_localctx, 260, RULE_parameterDeclarationList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1591;
			parameterDeclaration();
			State = 1596;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,210,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1592;
					Match(Comma);
					State = 1593;
					parameterDeclaration();
					}
					} 
				}
				State = 1598;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,210,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclSpecifierSeqContext declSpecifierSeq() {
			return GetRuleContext<DeclSpecifierSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InitializerClauseContext initializerClause() {
			return GetRuleContext<InitializerClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbstractDeclaratorContext abstractDeclarator() {
			return GetRuleContext<AbstractDeclaratorContext>(0);
		}
		public ParameterDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterDeclarationContext parameterDeclaration() {
		ParameterDeclarationContext _localctx = new ParameterDeclarationContext(Context, State);
		EnterRule(_localctx, 262, RULE_parameterDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1600;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Alignas || _la==LeftBracket) {
				{
				State = 1599;
				attributeSpecifierSeq();
				}
			}

			State = 1602;
			declSpecifierSeq();
			{
			State = 1607;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,213,Context) ) {
			case 1:
				{
				State = 1603;
				declarator();
				}
				break;
			case 2:
				{
				State = 1605;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,212,Context) ) {
				case 1:
					{
					State = 1604;
					abstractDeclarator();
					}
					break;
				}
				}
				break;
			}
			State = 1611;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Assign) {
				{
				State = 1609;
				Match(Assign);
				State = 1610;
				initializerClause();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclSpecifierSeqContext declSpecifierSeq() {
			return GetRuleContext<DeclSpecifierSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VirtualSpecifierSeqContext virtualSpecifierSeq() {
			return GetRuleContext<VirtualSpecifierSeqContext>(0);
		}
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext functionDefinition() {
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 264, RULE_functionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1614;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Alignas || _la==LeftBracket) {
				{
				State = 1613;
				attributeSpecifierSeq();
				}
			}

			State = 1617;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,216,Context) ) {
			case 1:
				{
				State = 1616;
				declSpecifierSeq();
				}
				break;
			}
			State = 1619;
			declarator();
			State = 1621;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Final || _la==Override) {
				{
				State = 1620;
				virtualSpecifierSeq();
				}
			}

			State = 1623;
			functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorInitializerContext constructorInitializer() {
			return GetRuleContext<ConstructorInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTryBlockContext functionTryBlock() {
			return GetRuleContext<FunctionTryBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(CPP14Parser.Default, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Delete() { return GetToken(CPP14Parser.Delete, 0); }
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
		EnterRule(_localctx, 266, RULE_functionBody);
		int _la;
		try {
			State = 1633;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftBrace:
			case Colon:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1626;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 1625;
					constructorInitializer();
					}
				}

				State = 1628;
				compoundStatement();
				}
				break;
			case Try:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1629;
				functionTryBlock();
				}
				break;
			case Assign:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1630;
				Match(Assign);
				State = 1631;
				_la = TokenStream.LA(1);
				if ( !(_la==Default || _la==Delete) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1632;
				Match(Semi);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BraceOrEqualInitializerContext braceOrEqualInitializer() {
			return GetRuleContext<BraceOrEqualInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public InitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerContext initializer() {
		InitializerContext _localctx = new InitializerContext(Context, State);
		EnterRule(_localctx, 268, RULE_initializer);
		try {
			State = 1640;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftBrace:
			case Assign:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1635;
				braceOrEqualInitializer();
				}
				break;
			case LeftParen:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1636;
				Match(LeftParen);
				State = 1637;
				expressionList();
				State = 1638;
				Match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BraceOrEqualInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InitializerClauseContext initializerClause() {
			return GetRuleContext<InitializerClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BracedInitListContext bracedInitList() {
			return GetRuleContext<BracedInitListContext>(0);
		}
		public BraceOrEqualInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_braceOrEqualInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBraceOrEqualInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BraceOrEqualInitializerContext braceOrEqualInitializer() {
		BraceOrEqualInitializerContext _localctx = new BraceOrEqualInitializerContext(Context, State);
		EnterRule(_localctx, 270, RULE_braceOrEqualInitializer);
		try {
			State = 1645;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Assign:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1642;
				Match(Assign);
				State = 1643;
				initializerClause();
				}
				break;
			case LeftBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1644;
				bracedInitList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BracedInitListContext bracedInitList() {
			return GetRuleContext<BracedInitListContext>(0);
		}
		public InitializerClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializerClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializerClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerClauseContext initializerClause() {
		InitializerClauseContext _localctx = new InitializerClauseContext(Context, State);
		EnterRule(_localctx, 272, RULE_initializerClause);
		try {
			State = 1649;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IntegerLiteral:
			case CharacterLiteral:
			case FloatingLiteral:
			case StringLiteral:
			case BooleanLiteral:
			case PointerLiteral:
			case UserDefinedLiteral:
			case Alignof:
			case Auto:
			case Bool:
			case Char:
			case Char16:
			case Char32:
			case Const_cast:
			case Decltype:
			case Delete:
			case Double:
			case Dynamic_cast:
			case Float:
			case Int:
			case Long:
			case New:
			case Noexcept:
			case Operator:
			case Reinterpret_cast:
			case Short:
			case Signed:
			case Sizeof:
			case Static_cast:
			case This:
			case Throw:
			case Typeid_:
			case Typename_:
			case Unsigned:
			case Void:
			case Wchar:
			case LeftParen:
			case LeftBracket:
			case Plus:
			case Minus:
			case Star:
			case And:
			case Or:
			case Tilde:
			case Not:
			case PlusPlus:
			case MinusMinus:
			case Doublecolon:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1647;
				assignmentExpression();
				}
				break;
			case LeftBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1648;
				bracedInitList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InitializerClauseContext[] initializerClause() {
			return GetRuleContexts<InitializerClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitializerClauseContext initializerClause(int i) {
			return GetRuleContext<InitializerClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Ellipsis() { return GetTokens(CPP14Parser.Ellipsis); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis(int i) {
			return GetToken(CPP14Parser.Ellipsis, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CPP14Parser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CPP14Parser.Comma, i);
		}
		public InitializerListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializerList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializerList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerListContext initializerList() {
		InitializerListContext _localctx = new InitializerListContext(Context, State);
		EnterRule(_localctx, 274, RULE_initializerList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1651;
			initializerClause();
			State = 1653;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Ellipsis) {
				{
				State = 1652;
				Match(Ellipsis);
				}
			}

			State = 1662;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,225,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1655;
					Match(Comma);
					State = 1656;
					initializerClause();
					State = 1658;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==Ellipsis) {
						{
						State = 1657;
						Match(Ellipsis);
						}
					}

					}
					} 
				}
				State = 1664;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,225,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BracedInitListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(CPP14Parser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(CPP14Parser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InitializerListContext initializerList() {
			return GetRuleContext<InitializerListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public BracedInitListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracedInitList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracedInitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BracedInitListContext bracedInitList() {
		BracedInitListContext _localctx = new BracedInitListContext(Context, State);
		EnterRule(_localctx, 276, RULE_bracedInitList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1665;
			Match(LeftBrace);
			State = 1670;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IntegerLiteral) | (1L << CharacterLiteral) | (1L << FloatingLiteral) | (1L << StringLiteral) | (1L << BooleanLiteral) | (1L << PointerLiteral) | (1L << UserDefinedLiteral) | (1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Static_cast - 65)) | (1L << (This - 65)) | (1L << (Throw - 65)) | (1L << (Typeid_ - 65)) | (1L << (Typename_ - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (LeftBrace - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (Not - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (Doublecolon - 65)))) != 0) || _la==Identifier) {
				{
				State = 1666;
				initializerList();
				State = 1668;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 1667;
					Match(Comma);
					}
				}

				}
			}

			State = 1672;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTemplateIdContext simpleTemplateId() {
			return GetRuleContext<SimpleTemplateIdContext>(0);
		}
		public ClassNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_className; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassNameContext className() {
		ClassNameContext _localctx = new ClassNameContext(Context, State);
		EnterRule(_localctx, 278, RULE_className);
		try {
			State = 1676;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,228,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1674;
				Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1675;
				simpleTemplateId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassHeadContext classHead() {
			return GetRuleContext<ClassHeadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(CPP14Parser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(CPP14Parser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MemberSpecificationContext memberSpecification() {
			return GetRuleContext<MemberSpecificationContext>(0);
		}
		public ClassSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassSpecifierContext classSpecifier() {
		ClassSpecifierContext _localctx = new ClassSpecifierContext(Context, State);
		EnterRule(_localctx, 280, RULE_classSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1678;
			classHead();
			State = 1679;
			Match(LeftBrace);
			State = 1681;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (Alignas - 10)) | (1L << (Auto - 10)) | (1L << (Bool - 10)) | (1L << (Char - 10)) | (1L << (Char16 - 10)) | (1L << (Char32 - 10)) | (1L << (Class - 10)) | (1L << (Const - 10)) | (1L << (Constexpr - 10)) | (1L << (Decltype - 10)) | (1L << (Double - 10)) | (1L << (Enum - 10)) | (1L << (Explicit - 10)) | (1L << (Extern - 10)) | (1L << (Float - 10)) | (1L << (Friend - 10)) | (1L << (Inline - 10)) | (1L << (Int - 10)) | (1L << (Long - 10)) | (1L << (Mutable - 10)) | (1L << (Operator - 10)) | (1L << (Private - 10)) | (1L << (Protected - 10)) | (1L << (Public - 10)) | (1L << (Register - 10)) | (1L << (Short - 10)) | (1L << (Signed - 10)) | (1L << (Static - 10)) | (1L << (Static_assert - 10)) | (1L << (Struct - 10)) | (1L << (Template - 10)) | (1L << (Thread_local - 10)))) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (Typedef - 74)) | (1L << (Typename_ - 74)) | (1L << (Union - 74)) | (1L << (Unsigned - 74)) | (1L << (Using - 74)) | (1L << (Virtual - 74)) | (1L << (Void - 74)) | (1L << (Volatile - 74)) | (1L << (Wchar - 74)) | (1L << (LeftParen - 74)) | (1L << (LeftBracket - 74)) | (1L << (Star - 74)) | (1L << (And - 74)) | (1L << (Tilde - 74)) | (1L << (AndAnd - 74)) | (1L << (Colon - 74)) | (1L << (Doublecolon - 74)) | (1L << (Semi - 74)) | (1L << (Ellipsis - 74)) | (1L << (Identifier - 74)))) != 0)) {
				{
				State = 1680;
				memberSpecification();
				}
			}

			State = 1683;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassHeadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassKeyContext classKey() {
			return GetRuleContext<ClassKeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassHeadNameContext classHeadName() {
			return GetRuleContext<ClassHeadNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BaseClauseContext baseClause() {
			return GetRuleContext<BaseClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassVirtSpecifierContext classVirtSpecifier() {
			return GetRuleContext<ClassVirtSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Union() { return GetToken(CPP14Parser.Union, 0); }
		public ClassHeadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classHead; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassHead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassHeadContext classHead() {
		ClassHeadContext _localctx = new ClassHeadContext(Context, State);
		EnterRule(_localctx, 282, RULE_classHead);
		int _la;
		try {
			State = 1708;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Class:
			case Struct:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1685;
				classKey();
				State = 1687;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1686;
					attributeSpecifierSeq();
					}
				}

				State = 1693;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Decltype || _la==Doublecolon || _la==Identifier) {
					{
					State = 1689;
					classHeadName();
					State = 1691;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==Final) {
						{
						State = 1690;
						classVirtSpecifier();
						}
					}

					}
				}

				State = 1696;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 1695;
					baseClause();
					}
				}

				}
				break;
			case Union:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1698;
				Match(Union);
				State = 1700;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1699;
					attributeSpecifierSeq();
					}
				}

				State = 1706;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Decltype || _la==Doublecolon || _la==Identifier) {
					{
					State = 1702;
					classHeadName();
					State = 1704;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==Final) {
						{
						State = 1703;
						classVirtSpecifier();
						}
					}

					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassHeadNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestedNameSpecifierContext nestedNameSpecifier() {
			return GetRuleContext<NestedNameSpecifierContext>(0);
		}
		public ClassHeadNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classHeadName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassHeadName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassHeadNameContext classHeadName() {
		ClassHeadNameContext _localctx = new ClassHeadNameContext(Context, State);
		EnterRule(_localctx, 284, RULE_classHeadName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1711;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,238,Context) ) {
			case 1:
				{
				State = 1710;
				nestedNameSpecifier(0);
				}
				break;
			}
			State = 1713;
			className();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassVirtSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Final() { return GetToken(CPP14Parser.Final, 0); }
		public ClassVirtSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classVirtSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassVirtSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassVirtSpecifierContext classVirtSpecifier() {
		ClassVirtSpecifierContext _localctx = new ClassVirtSpecifierContext(Context, State);
		EnterRule(_localctx, 286, RULE_classVirtSpecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1715;
			Match(Final);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassKeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(CPP14Parser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Struct() { return GetToken(CPP14Parser.Struct, 0); }
		public ClassKeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classKey; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassKey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassKeyContext classKey() {
		ClassKeyContext _localctx = new ClassKeyContext(Context, State);
		EnterRule(_localctx, 288, RULE_classKey);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1717;
			_la = TokenStream.LA(1);
			if ( !(_la==Class || _la==Struct) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemberdeclarationContext[] memberdeclaration() {
			return GetRuleContexts<MemberdeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberdeclarationContext memberdeclaration(int i) {
			return GetRuleContext<MemberdeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessSpecifierContext[] accessSpecifier() {
			return GetRuleContexts<AccessSpecifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessSpecifierContext accessSpecifier(int i) {
			return GetRuleContext<AccessSpecifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Colon() { return GetTokens(CPP14Parser.Colon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon(int i) {
			return GetToken(CPP14Parser.Colon, i);
		}
		public MemberSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberSpecificationContext memberSpecification() {
		MemberSpecificationContext _localctx = new MemberSpecificationContext(Context, State);
		EnterRule(_localctx, 290, RULE_memberSpecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1723;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 1723;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Alignas:
				case Auto:
				case Bool:
				case Char:
				case Char16:
				case Char32:
				case Class:
				case Const:
				case Constexpr:
				case Decltype:
				case Double:
				case Enum:
				case Explicit:
				case Extern:
				case Float:
				case Friend:
				case Inline:
				case Int:
				case Long:
				case Mutable:
				case Operator:
				case Register:
				case Short:
				case Signed:
				case Static:
				case Static_assert:
				case Struct:
				case Template:
				case Thread_local:
				case Typedef:
				case Typename_:
				case Union:
				case Unsigned:
				case Using:
				case Virtual:
				case Void:
				case Volatile:
				case Wchar:
				case LeftParen:
				case LeftBracket:
				case Star:
				case And:
				case Tilde:
				case AndAnd:
				case Colon:
				case Doublecolon:
				case Semi:
				case Ellipsis:
				case Identifier:
					{
					State = 1719;
					memberdeclaration();
					}
					break;
				case Private:
				case Protected:
				case Public:
					{
					State = 1720;
					accessSpecifier();
					State = 1721;
					Match(Colon);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 1725;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (Alignas - 10)) | (1L << (Auto - 10)) | (1L << (Bool - 10)) | (1L << (Char - 10)) | (1L << (Char16 - 10)) | (1L << (Char32 - 10)) | (1L << (Class - 10)) | (1L << (Const - 10)) | (1L << (Constexpr - 10)) | (1L << (Decltype - 10)) | (1L << (Double - 10)) | (1L << (Enum - 10)) | (1L << (Explicit - 10)) | (1L << (Extern - 10)) | (1L << (Float - 10)) | (1L << (Friend - 10)) | (1L << (Inline - 10)) | (1L << (Int - 10)) | (1L << (Long - 10)) | (1L << (Mutable - 10)) | (1L << (Operator - 10)) | (1L << (Private - 10)) | (1L << (Protected - 10)) | (1L << (Public - 10)) | (1L << (Register - 10)) | (1L << (Short - 10)) | (1L << (Signed - 10)) | (1L << (Static - 10)) | (1L << (Static_assert - 10)) | (1L << (Struct - 10)) | (1L << (Template - 10)) | (1L << (Thread_local - 10)))) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (Typedef - 74)) | (1L << (Typename_ - 74)) | (1L << (Union - 74)) | (1L << (Unsigned - 74)) | (1L << (Using - 74)) | (1L << (Virtual - 74)) | (1L << (Void - 74)) | (1L << (Volatile - 74)) | (1L << (Wchar - 74)) | (1L << (LeftParen - 74)) | (1L << (LeftBracket - 74)) | (1L << (Star - 74)) | (1L << (And - 74)) | (1L << (Tilde - 74)) | (1L << (AndAnd - 74)) | (1L << (Colon - 74)) | (1L << (Doublecolon - 74)) | (1L << (Semi - 74)) | (1L << (Ellipsis - 74)) | (1L << (Identifier - 74)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberdeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclSpecifierSeqContext declSpecifierSeq() {
			return GetRuleContext<DeclSpecifierSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberDeclaratorListContext memberDeclaratorList() {
			return GetRuleContext<MemberDeclaratorListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefinitionContext functionDefinition() {
			return GetRuleContext<FunctionDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDeclarationContext usingDeclaration() {
			return GetRuleContext<UsingDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StaticAssertDeclarationContext staticAssertDeclaration() {
			return GetRuleContext<StaticAssertDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateDeclarationContext templateDeclaration() {
			return GetRuleContext<TemplateDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AliasDeclarationContext aliasDeclaration() {
			return GetRuleContext<AliasDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyDeclarationContext emptyDeclaration() {
			return GetRuleContext<EmptyDeclarationContext>(0);
		}
		public MemberdeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberdeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberdeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberdeclarationContext memberdeclaration() {
		MemberdeclarationContext _localctx = new MemberdeclarationContext(Context, State);
		EnterRule(_localctx, 292, RULE_memberdeclaration);
		int _la;
		try {
			State = 1743;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,244,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1728;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,241,Context) ) {
				case 1:
					{
					State = 1727;
					attributeSpecifierSeq();
					}
					break;
				}
				State = 1731;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,242,Context) ) {
				case 1:
					{
					State = 1730;
					declSpecifierSeq();
					}
					break;
				}
				State = 1734;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Alignas) | (1L << Decltype) | (1L << Operator))) != 0) || ((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & ((1L << (LeftParen - 85)) | (1L << (LeftBracket - 85)) | (1L << (Star - 85)) | (1L << (And - 85)) | (1L << (Tilde - 85)) | (1L << (AndAnd - 85)) | (1L << (Colon - 85)) | (1L << (Doublecolon - 85)) | (1L << (Ellipsis - 85)) | (1L << (Identifier - 85)))) != 0)) {
					{
					State = 1733;
					memberDeclaratorList();
					}
				}

				State = 1736;
				Match(Semi);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1737;
				functionDefinition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1738;
				usingDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1739;
				staticAssertDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1740;
				templateDeclaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1741;
				aliasDeclaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1742;
				emptyDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberDeclaratorListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemberDeclaratorContext[] memberDeclarator() {
			return GetRuleContexts<MemberDeclaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberDeclaratorContext memberDeclarator(int i) {
			return GetRuleContext<MemberDeclaratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CPP14Parser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CPP14Parser.Comma, i);
		}
		public MemberDeclaratorListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberDeclaratorList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDeclaratorList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberDeclaratorListContext memberDeclaratorList() {
		MemberDeclaratorListContext _localctx = new MemberDeclaratorListContext(Context, State);
		EnterRule(_localctx, 294, RULE_memberDeclaratorList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1745;
			memberDeclarator();
			State = 1750;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 1746;
				Match(Comma);
				State = 1747;
				memberDeclarator();
				}
				}
				State = 1752;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VirtualSpecifierSeqContext virtualSpecifierSeq() {
			return GetRuleContext<VirtualSpecifierSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PureSpecifierContext pureSpecifier() {
			return GetRuleContext<PureSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BraceOrEqualInitializerContext braceOrEqualInitializer() {
			return GetRuleContext<BraceOrEqualInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(CPP14Parser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public MemberDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberDeclaratorContext memberDeclarator() {
		MemberDeclaratorContext _localctx = new MemberDeclaratorContext(Context, State);
		EnterRule(_localctx, 296, RULE_memberDeclarator);
		int _la;
		try {
			State = 1773;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,252,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1753;
				declarator();
				State = 1763;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,249,Context) ) {
				case 1:
					{
					State = 1755;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==Final || _la==Override) {
						{
						State = 1754;
						virtualSpecifierSeq();
						}
					}

					State = 1758;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==Assign) {
						{
						State = 1757;
						pureSpecifier();
						}
					}

					}
					break;
				case 2:
					{
					State = 1761;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LeftBrace || _la==Assign) {
						{
						State = 1760;
						braceOrEqualInitializer();
						}
					}

					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1766;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 1765;
					Match(Identifier);
					}
				}

				State = 1769;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1768;
					attributeSpecifierSeq();
					}
				}

				State = 1771;
				Match(Colon);
				State = 1772;
				constantExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VirtualSpecifierSeqContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VirtualSpecifierContext[] virtualSpecifier() {
			return GetRuleContexts<VirtualSpecifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VirtualSpecifierContext virtualSpecifier(int i) {
			return GetRuleContext<VirtualSpecifierContext>(i);
		}
		public VirtualSpecifierSeqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_virtualSpecifierSeq; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVirtualSpecifierSeq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VirtualSpecifierSeqContext virtualSpecifierSeq() {
		VirtualSpecifierSeqContext _localctx = new VirtualSpecifierSeqContext(Context, State);
		EnterRule(_localctx, 298, RULE_virtualSpecifierSeq);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1776;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1775;
				virtualSpecifier();
				}
				}
				State = 1778;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Final || _la==Override );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VirtualSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Override() { return GetToken(CPP14Parser.Override, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Final() { return GetToken(CPP14Parser.Final, 0); }
		public VirtualSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_virtualSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVirtualSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VirtualSpecifierContext virtualSpecifier() {
		VirtualSpecifierContext _localctx = new VirtualSpecifierContext(Context, State);
		EnterRule(_localctx, 300, RULE_virtualSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1780;
			_la = TokenStream.LA(1);
			if ( !(_la==Final || _la==Override) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PureSpecifierContext : ParserRuleContext {
		public IToken val;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OctalLiteral() { return GetToken(CPP14Parser.OctalLiteral, 0); }
		public PureSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pureSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPureSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PureSpecifierContext pureSpecifier() {
		PureSpecifierContext _localctx = new PureSpecifierContext(Context, State);
		EnterRule(_localctx, 302, RULE_pureSpecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1782;
			Match(Assign);
			State = 1783;
			_localctx.val = Match(OctalLiteral);
			if((_localctx.val!=null?_localctx.val.Text:null).CompareTo("0")!=0) throw new InputMismatchException(this);
					
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(CPP14Parser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BaseSpecifierListContext baseSpecifierList() {
			return GetRuleContext<BaseSpecifierListContext>(0);
		}
		public BaseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseClauseContext baseClause() {
		BaseClauseContext _localctx = new BaseClauseContext(Context, State);
		EnterRule(_localctx, 304, RULE_baseClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1786;
			Match(Colon);
			State = 1787;
			baseSpecifierList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseSpecifierListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BaseSpecifierContext[] baseSpecifier() {
			return GetRuleContexts<BaseSpecifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BaseSpecifierContext baseSpecifier(int i) {
			return GetRuleContext<BaseSpecifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Ellipsis() { return GetTokens(CPP14Parser.Ellipsis); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis(int i) {
			return GetToken(CPP14Parser.Ellipsis, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CPP14Parser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CPP14Parser.Comma, i);
		}
		public BaseSpecifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseSpecifierList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseSpecifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseSpecifierListContext baseSpecifierList() {
		BaseSpecifierListContext _localctx = new BaseSpecifierListContext(Context, State);
		EnterRule(_localctx, 306, RULE_baseSpecifierList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1789;
			baseSpecifier();
			State = 1791;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Ellipsis) {
				{
				State = 1790;
				Match(Ellipsis);
				}
			}

			State = 1800;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 1793;
				Match(Comma);
				State = 1794;
				baseSpecifier();
				State = 1796;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Ellipsis) {
					{
					State = 1795;
					Match(Ellipsis);
					}
				}

				}
				}
				State = 1802;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BaseTypeSpecifierContext baseTypeSpecifier() {
			return GetRuleContext<BaseTypeSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Virtual() { return GetToken(CPP14Parser.Virtual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AccessSpecifierContext accessSpecifier() {
			return GetRuleContext<AccessSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public BaseSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseSpecifierContext baseSpecifier() {
		BaseSpecifierContext _localctx = new BaseSpecifierContext(Context, State);
		EnterRule(_localctx, 308, RULE_baseSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1804;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Alignas || _la==LeftBracket) {
				{
				State = 1803;
				attributeSpecifierSeq();
				}
			}

			State = 1818;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Decltype:
			case Doublecolon:
			case Identifier:
				{
				State = 1806;
				baseTypeSpecifier();
				}
				break;
			case Virtual:
				{
				State = 1807;
				Match(Virtual);
				State = 1809;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Private) | (1L << Protected) | (1L << Public))) != 0)) {
					{
					State = 1808;
					accessSpecifier();
					}
				}

				State = 1811;
				baseTypeSpecifier();
				}
				break;
			case Private:
			case Protected:
			case Public:
				{
				State = 1812;
				accessSpecifier();
				State = 1814;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Virtual) {
					{
					State = 1813;
					Match(Virtual);
					}
				}

				State = 1816;
				baseTypeSpecifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassOrDeclTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestedNameSpecifierContext nestedNameSpecifier() {
			return GetRuleContext<NestedNameSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecltypeSpecifierContext decltypeSpecifier() {
			return GetRuleContext<DecltypeSpecifierContext>(0);
		}
		public ClassOrDeclTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classOrDeclType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassOrDeclType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassOrDeclTypeContext classOrDeclType() {
		ClassOrDeclTypeContext _localctx = new ClassOrDeclTypeContext(Context, State);
		EnterRule(_localctx, 310, RULE_classOrDeclType);
		try {
			State = 1825;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,262,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1821;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,261,Context) ) {
				case 1:
					{
					State = 1820;
					nestedNameSpecifier(0);
					}
					break;
				}
				State = 1823;
				className();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1824;
				decltypeSpecifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseTypeSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrDeclTypeContext classOrDeclType() {
			return GetRuleContext<ClassOrDeclTypeContext>(0);
		}
		public BaseTypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseTypeSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseTypeSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseTypeSpecifierContext baseTypeSpecifier() {
		BaseTypeSpecifierContext _localctx = new BaseTypeSpecifierContext(Context, State);
		EnterRule(_localctx, 312, RULE_baseTypeSpecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1827;
			classOrDeclType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Private() { return GetToken(CPP14Parser.Private, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Protected() { return GetToken(CPP14Parser.Protected, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Public() { return GetToken(CPP14Parser.Public, 0); }
		public AccessSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessSpecifierContext accessSpecifier() {
		AccessSpecifierContext _localctx = new AccessSpecifierContext(Context, State);
		EnterRule(_localctx, 314, RULE_accessSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1829;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Private) | (1L << Protected) | (1L << Public))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConversionFunctionIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Operator() { return GetToken(CPP14Parser.Operator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConversionTypeIdContext conversionTypeId() {
			return GetRuleContext<ConversionTypeIdContext>(0);
		}
		public ConversionFunctionIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversionFunctionId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConversionFunctionId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConversionFunctionIdContext conversionFunctionId() {
		ConversionFunctionIdContext _localctx = new ConversionFunctionIdContext(Context, State);
		EnterRule(_localctx, 316, RULE_conversionFunctionId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1831;
			Match(Operator);
			State = 1832;
			conversionTypeId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConversionTypeIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierSeqContext typeSpecifierSeq() {
			return GetRuleContext<TypeSpecifierSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConversionDeclaratorContext conversionDeclarator() {
			return GetRuleContext<ConversionDeclaratorContext>(0);
		}
		public ConversionTypeIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversionTypeId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConversionTypeId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConversionTypeIdContext conversionTypeId() {
		ConversionTypeIdContext _localctx = new ConversionTypeIdContext(Context, State);
		EnterRule(_localctx, 318, RULE_conversionTypeId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1834;
			typeSpecifierSeq();
			State = 1836;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,263,Context) ) {
			case 1:
				{
				State = 1835;
				conversionDeclarator();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConversionDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PointerOperatorContext pointerOperator() {
			return GetRuleContext<PointerOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConversionDeclaratorContext conversionDeclarator() {
			return GetRuleContext<ConversionDeclaratorContext>(0);
		}
		public ConversionDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversionDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConversionDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConversionDeclaratorContext conversionDeclarator() {
		ConversionDeclaratorContext _localctx = new ConversionDeclaratorContext(Context, State);
		EnterRule(_localctx, 320, RULE_conversionDeclarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1838;
			pointerOperator();
			State = 1840;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,264,Context) ) {
			case 1:
				{
				State = 1839;
				conversionDeclarator();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(CPP14Parser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MemInitializerListContext memInitializerList() {
			return GetRuleContext<MemInitializerListContext>(0);
		}
		public ConstructorInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorInitializerContext constructorInitializer() {
		ConstructorInitializerContext _localctx = new ConstructorInitializerContext(Context, State);
		EnterRule(_localctx, 322, RULE_constructorInitializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1842;
			Match(Colon);
			State = 1843;
			memInitializerList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemInitializerListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemInitializerContext[] memInitializer() {
			return GetRuleContexts<MemInitializerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemInitializerContext memInitializer(int i) {
			return GetRuleContext<MemInitializerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Ellipsis() { return GetTokens(CPP14Parser.Ellipsis); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis(int i) {
			return GetToken(CPP14Parser.Ellipsis, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CPP14Parser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CPP14Parser.Comma, i);
		}
		public MemInitializerListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memInitializerList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemInitializerList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemInitializerListContext memInitializerList() {
		MemInitializerListContext _localctx = new MemInitializerListContext(Context, State);
		EnterRule(_localctx, 324, RULE_memInitializerList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1845;
			memInitializer();
			State = 1847;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Ellipsis) {
				{
				State = 1846;
				Match(Ellipsis);
				}
			}

			State = 1856;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 1849;
				Match(Comma);
				State = 1850;
				memInitializer();
				State = 1852;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Ellipsis) {
					{
					State = 1851;
					Match(Ellipsis);
					}
				}

				}
				}
				State = 1858;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MeminitializeridContext meminitializerid() {
			return GetRuleContext<MeminitializeridContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BracedInitListContext bracedInitList() {
			return GetRuleContext<BracedInitListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public MemInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemInitializerContext memInitializer() {
		MemInitializerContext _localctx = new MemInitializerContext(Context, State);
		EnterRule(_localctx, 326, RULE_memInitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1859;
			meminitializerid();
			State = 1866;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftParen:
				{
				State = 1860;
				Match(LeftParen);
				State = 1862;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IntegerLiteral) | (1L << CharacterLiteral) | (1L << FloatingLiteral) | (1L << StringLiteral) | (1L << BooleanLiteral) | (1L << PointerLiteral) | (1L << UserDefinedLiteral) | (1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Static_cast - 65)) | (1L << (This - 65)) | (1L << (Throw - 65)) | (1L << (Typeid_ - 65)) | (1L << (Typename_ - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (LeftBrace - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (Not - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (Doublecolon - 65)))) != 0) || _la==Identifier) {
					{
					State = 1861;
					expressionList();
					}
				}

				State = 1864;
				Match(RightParen);
				}
				break;
			case LeftBrace:
				{
				State = 1865;
				bracedInitList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MeminitializeridContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrDeclTypeContext classOrDeclType() {
			return GetRuleContext<ClassOrDeclTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public MeminitializeridContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_meminitializerid; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMeminitializerid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MeminitializeridContext meminitializerid() {
		MeminitializeridContext _localctx = new MeminitializeridContext(Context, State);
		EnterRule(_localctx, 328, RULE_meminitializerid);
		try {
			State = 1870;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,270,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1868;
				classOrDeclType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1869;
				Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorFunctionIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Operator() { return GetToken(CPP14Parser.Operator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TheOperatorContext theOperator() {
			return GetRuleContext<TheOperatorContext>(0);
		}
		public OperatorFunctionIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorFunctionId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorFunctionId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorFunctionIdContext operatorFunctionId() {
		OperatorFunctionIdContext _localctx = new OperatorFunctionIdContext(Context, State);
		EnterRule(_localctx, 330, RULE_operatorFunctionId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1872;
			Match(Operator);
			State = 1873;
			theOperator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralOperatorIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Operator() { return GetToken(CPP14Parser.Operator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(CPP14Parser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UserDefinedStringLiteral() { return GetToken(CPP14Parser.UserDefinedStringLiteral, 0); }
		public LiteralOperatorIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalOperatorId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralOperatorId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralOperatorIdContext literalOperatorId() {
		LiteralOperatorIdContext _localctx = new LiteralOperatorIdContext(Context, State);
		EnterRule(_localctx, 332, RULE_literalOperatorId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1875;
			Match(Operator);
			State = 1879;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case StringLiteral:
				{
				State = 1876;
				Match(StringLiteral);
				State = 1877;
				Match(Identifier);
				}
				break;
			case UserDefinedStringLiteral:
				{
				State = 1878;
				Match(UserDefinedStringLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less() { return GetToken(CPP14Parser.Less, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TemplateparameterListContext templateparameterList() {
			return GetRuleContext<TemplateparameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(CPP14Parser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public TemplateDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateDeclarationContext templateDeclaration() {
		TemplateDeclarationContext _localctx = new TemplateDeclarationContext(Context, State);
		EnterRule(_localctx, 334, RULE_templateDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1881;
			Match(Template);
			State = 1882;
			Match(Less);
			State = 1883;
			templateparameterList();
			State = 1884;
			Match(Greater);
			State = 1885;
			declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateparameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TemplateParameterContext[] templateParameter() {
			return GetRuleContexts<TemplateParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateParameterContext templateParameter(int i) {
			return GetRuleContext<TemplateParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CPP14Parser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CPP14Parser.Comma, i);
		}
		public TemplateparameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateparameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateparameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateparameterListContext templateparameterList() {
		TemplateparameterListContext _localctx = new TemplateparameterListContext(Context, State);
		EnterRule(_localctx, 336, RULE_templateparameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1887;
			templateParameter();
			State = 1892;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 1888;
				Match(Comma);
				State = 1889;
				templateParameter();
				}
				}
				State = 1894;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterContext typeParameter() {
			return GetRuleContext<TypeParameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterDeclarationContext parameterDeclaration() {
			return GetRuleContext<ParameterDeclarationContext>(0);
		}
		public TemplateParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateParameterContext templateParameter() {
		TemplateParameterContext _localctx = new TemplateParameterContext(Context, State);
		EnterRule(_localctx, 338, RULE_templateParameter);
		try {
			State = 1897;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,273,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1895;
				typeParameter();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1896;
				parameterDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(CPP14Parser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Typename_() { return GetToken(CPP14Parser.Typename_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TheTypeIdContext theTypeId() {
			return GetRuleContext<TheTypeIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less() { return GetToken(CPP14Parser.Less, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TemplateparameterListContext templateparameterList() {
			return GetRuleContext<TemplateparameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(CPP14Parser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext typeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(Context, State);
		EnterRule(_localctx, 340, RULE_typeParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1908;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Class:
			case Template:
				{
				State = 1904;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Template) {
					{
					State = 1899;
					Match(Template);
					State = 1900;
					Match(Less);
					State = 1901;
					templateparameterList();
					State = 1902;
					Match(Greater);
					}
				}

				State = 1906;
				Match(Class);
				}
				break;
			case Typename_:
				{
				State = 1907;
				Match(Typename_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1921;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,279,Context) ) {
			case 1:
				{
				{
				State = 1911;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Ellipsis) {
					{
					State = 1910;
					Match(Ellipsis);
					}
				}

				State = 1914;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 1913;
					Match(Identifier);
					}
				}

				}
				}
				break;
			case 2:
				{
				{
				State = 1917;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 1916;
					Match(Identifier);
					}
				}

				State = 1919;
				Match(Assign);
				State = 1920;
				theTypeId();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTemplateIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TemplateNameContext templateName() {
			return GetRuleContext<TemplateNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less() { return GetToken(CPP14Parser.Less, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(CPP14Parser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TemplateArgumentListContext templateArgumentList() {
			return GetRuleContext<TemplateArgumentListContext>(0);
		}
		public SimpleTemplateIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleTemplateId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleTemplateId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTemplateIdContext simpleTemplateId() {
		SimpleTemplateIdContext _localctx = new SimpleTemplateIdContext(Context, State);
		EnterRule(_localctx, 342, RULE_simpleTemplateId);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1923;
			templateName();
			State = 1924;
			Match(Less);
			State = 1926;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IntegerLiteral) | (1L << CharacterLiteral) | (1L << FloatingLiteral) | (1L << StringLiteral) | (1L << BooleanLiteral) | (1L << PointerLiteral) | (1L << UserDefinedLiteral) | (1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Class) | (1L << Const) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << Enum) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Static_cast - 65)) | (1L << (Struct - 65)) | (1L << (This - 65)) | (1L << (Typeid_ - 65)) | (1L << (Typename_ - 65)) | (1L << (Union - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Volatile - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (Not - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (Doublecolon - 65)))) != 0) || _la==Identifier) {
				{
				State = 1925;
				templateArgumentList();
				}
			}

			State = 1928;
			Match(Greater);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTemplateIdContext simpleTemplateId() {
			return GetRuleContext<SimpleTemplateIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less() { return GetToken(CPP14Parser.Less, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(CPP14Parser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OperatorFunctionIdContext operatorFunctionId() {
			return GetRuleContext<OperatorFunctionIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralOperatorIdContext literalOperatorId() {
			return GetRuleContext<LiteralOperatorIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateArgumentListContext templateArgumentList() {
			return GetRuleContext<TemplateArgumentListContext>(0);
		}
		public TemplateIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateIdContext templateId() {
		TemplateIdContext _localctx = new TemplateIdContext(Context, State);
		EnterRule(_localctx, 344, RULE_templateId);
		int _la;
		try {
			State = 1941;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1930;
				simpleTemplateId();
				}
				break;
			case Operator:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1933;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,281,Context) ) {
				case 1:
					{
					State = 1931;
					operatorFunctionId();
					}
					break;
				case 2:
					{
					State = 1932;
					literalOperatorId();
					}
					break;
				}
				State = 1935;
				Match(Less);
				State = 1937;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IntegerLiteral) | (1L << CharacterLiteral) | (1L << FloatingLiteral) | (1L << StringLiteral) | (1L << BooleanLiteral) | (1L << PointerLiteral) | (1L << UserDefinedLiteral) | (1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Class) | (1L << Const) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << Enum) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Static_cast - 65)) | (1L << (Struct - 65)) | (1L << (This - 65)) | (1L << (Typeid_ - 65)) | (1L << (Typename_ - 65)) | (1L << (Union - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Volatile - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (Not - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (Doublecolon - 65)))) != 0) || _la==Identifier) {
					{
					State = 1936;
					templateArgumentList();
					}
				}

				State = 1939;
				Match(Greater);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public TemplateNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateNameContext templateName() {
		TemplateNameContext _localctx = new TemplateNameContext(Context, State);
		EnterRule(_localctx, 346, RULE_templateName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1943;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TemplateArgumentContext[] templateArgument() {
			return GetRuleContexts<TemplateArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateArgumentContext templateArgument(int i) {
			return GetRuleContext<TemplateArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Ellipsis() { return GetTokens(CPP14Parser.Ellipsis); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis(int i) {
			return GetToken(CPP14Parser.Ellipsis, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CPP14Parser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CPP14Parser.Comma, i);
		}
		public TemplateArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateArgumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateArgumentListContext templateArgumentList() {
		TemplateArgumentListContext _localctx = new TemplateArgumentListContext(Context, State);
		EnterRule(_localctx, 348, RULE_templateArgumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1945;
			templateArgument();
			State = 1947;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Ellipsis) {
				{
				State = 1946;
				Match(Ellipsis);
				}
			}

			State = 1956;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 1949;
				Match(Comma);
				State = 1950;
				templateArgument();
				State = 1952;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Ellipsis) {
					{
					State = 1951;
					Match(Ellipsis);
					}
				}

				}
				}
				State = 1958;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TheTypeIdContext theTypeId() {
			return GetRuleContext<TheTypeIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdExpressionContext idExpression() {
			return GetRuleContext<IdExpressionContext>(0);
		}
		public TemplateArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateArgumentContext templateArgument() {
		TemplateArgumentContext _localctx = new TemplateArgumentContext(Context, State);
		EnterRule(_localctx, 350, RULE_templateArgument);
		try {
			State = 1962;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,287,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1959;
				theTypeId();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1960;
				constantExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1961;
				idExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Typename_() { return GetToken(CPP14Parser.Typename_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NestedNameSpecifierContext nestedNameSpecifier() {
			return GetRuleContext<NestedNameSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTemplateIdContext simpleTemplateId() {
			return GetRuleContext<SimpleTemplateIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		public TypeNameSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeNameSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeNameSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameSpecifierContext typeNameSpecifier() {
		TypeNameSpecifierContext _localctx = new TypeNameSpecifierContext(Context, State);
		EnterRule(_localctx, 352, RULE_typeNameSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1964;
			Match(Typename_);
			State = 1965;
			nestedNameSpecifier(0);
			State = 1971;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,289,Context) ) {
			case 1:
				{
				State = 1966;
				Match(Identifier);
				}
				break;
			case 2:
				{
				State = 1968;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Template) {
					{
					State = 1967;
					Match(Template);
					}
				}

				State = 1970;
				simpleTemplateId();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitInstantiationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extern() { return GetToken(CPP14Parser.Extern, 0); }
		public ExplicitInstantiationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitInstantiation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitInstantiation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitInstantiationContext explicitInstantiation() {
		ExplicitInstantiationContext _localctx = new ExplicitInstantiationContext(Context, State);
		EnterRule(_localctx, 354, RULE_explicitInstantiation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1974;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Extern) {
				{
				State = 1973;
				Match(Extern);
				}
			}

			State = 1976;
			Match(Template);
			State = 1977;
			declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitSpecializationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less() { return GetToken(CPP14Parser.Less, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(CPP14Parser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public ExplicitSpecializationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitSpecialization; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitSpecialization(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitSpecializationContext explicitSpecialization() {
		ExplicitSpecializationContext _localctx = new ExplicitSpecializationContext(Context, State);
		EnterRule(_localctx, 356, RULE_explicitSpecialization);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1979;
			Match(Template);
			State = 1980;
			Match(Less);
			State = 1981;
			Match(Greater);
			State = 1982;
			declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Try() { return GetToken(CPP14Parser.Try, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HandlerSeqContext handlerSeq() {
			return GetRuleContext<HandlerSeqContext>(0);
		}
		public TryBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryBlockContext tryBlock() {
		TryBlockContext _localctx = new TryBlockContext(Context, State);
		EnterRule(_localctx, 358, RULE_tryBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1984;
			Match(Try);
			State = 1985;
			compoundStatement();
			State = 1986;
			handlerSeq();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTryBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Try() { return GetToken(CPP14Parser.Try, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HandlerSeqContext handlerSeq() {
			return GetRuleContext<HandlerSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorInitializerContext constructorInitializer() {
			return GetRuleContext<ConstructorInitializerContext>(0);
		}
		public FunctionTryBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionTryBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionTryBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTryBlockContext functionTryBlock() {
		FunctionTryBlockContext _localctx = new FunctionTryBlockContext(Context, State);
		EnterRule(_localctx, 360, RULE_functionTryBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1988;
			Match(Try);
			State = 1990;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 1989;
				constructorInitializer();
				}
			}

			State = 1992;
			compoundStatement();
			State = 1993;
			handlerSeq();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerSeqContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public HandlerContext[] handler() {
			return GetRuleContexts<HandlerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HandlerContext handler(int i) {
			return GetRuleContext<HandlerContext>(i);
		}
		public HandlerSeqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerSeq; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerSeq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HandlerSeqContext handlerSeq() {
		HandlerSeqContext _localctx = new HandlerSeqContext(Context, State);
		EnterRule(_localctx, 362, RULE_handlerSeq);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1996;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1995;
				handler();
				}
				}
				State = 1998;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Catch );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Catch() { return GetToken(CPP14Parser.Catch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExceptionDeclarationContext exceptionDeclaration() {
			return GetRuleContext<ExceptionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public HandlerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handler; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandler(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HandlerContext handler() {
		HandlerContext _localctx = new HandlerContext(Context, State);
		EnterRule(_localctx, 364, RULE_handler);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2000;
			Match(Catch);
			State = 2001;
			Match(LeftParen);
			State = 2002;
			exceptionDeclaration();
			State = 2003;
			Match(RightParen);
			State = 2004;
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierSeqContext typeSpecifierSeq() {
			return GetRuleContext<TypeSpecifierSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbstractDeclaratorContext abstractDeclarator() {
			return GetRuleContext<AbstractDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		public ExceptionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExceptionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionDeclarationContext exceptionDeclaration() {
		ExceptionDeclarationContext _localctx = new ExceptionDeclarationContext(Context, State);
		EnterRule(_localctx, 366, RULE_exceptionDeclaration);
		int _la;
		try {
			State = 2015;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Alignas:
			case Auto:
			case Bool:
			case Char:
			case Char16:
			case Char32:
			case Class:
			case Const:
			case Decltype:
			case Double:
			case Enum:
			case Float:
			case Int:
			case Long:
			case Short:
			case Signed:
			case Struct:
			case Typename_:
			case Union:
			case Unsigned:
			case Void:
			case Volatile:
			case Wchar:
			case LeftBracket:
			case Doublecolon:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2007;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 2006;
					attributeSpecifierSeq();
					}
				}

				State = 2009;
				typeSpecifierSeq();
				State = 2012;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,294,Context) ) {
				case 1:
					{
					State = 2010;
					declarator();
					}
					break;
				case 2:
					{
					State = 2011;
					abstractDeclarator();
					}
					break;
				}
				}
				break;
			case Ellipsis:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2014;
				Match(Ellipsis);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Throw() { return GetToken(CPP14Parser.Throw, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public ThrowExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThrowExpressionContext throwExpression() {
		ThrowExpressionContext _localctx = new ThrowExpressionContext(Context, State);
		EnterRule(_localctx, 368, RULE_throwExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2017;
			Match(Throw);
			State = 2019;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IntegerLiteral) | (1L << CharacterLiteral) | (1L << FloatingLiteral) | (1L << StringLiteral) | (1L << BooleanLiteral) | (1L << PointerLiteral) | (1L << UserDefinedLiteral) | (1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Static_cast - 65)) | (1L << (This - 65)) | (1L << (Throw - 65)) | (1L << (Typeid_ - 65)) | (1L << (Typename_ - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (Not - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (Doublecolon - 65)))) != 0) || _la==Identifier) {
				{
				State = 2018;
				assignmentExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DynamicExceptionSpecificationContext dynamicExceptionSpecification() {
			return GetRuleContext<DynamicExceptionSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoeExceptSpecificationContext noeExceptSpecification() {
			return GetRuleContext<NoeExceptSpecificationContext>(0);
		}
		public ExceptionSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExceptionSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionSpecificationContext exceptionSpecification() {
		ExceptionSpecificationContext _localctx = new ExceptionSpecificationContext(Context, State);
		EnterRule(_localctx, 370, RULE_exceptionSpecification);
		try {
			State = 2023;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Throw:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2021;
				dynamicExceptionSpecification();
				}
				break;
			case Noexcept:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2022;
				noeExceptSpecification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DynamicExceptionSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Throw() { return GetToken(CPP14Parser.Throw, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeIdListContext typeIdList() {
			return GetRuleContext<TypeIdListContext>(0);
		}
		public DynamicExceptionSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dynamicExceptionSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDynamicExceptionSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DynamicExceptionSpecificationContext dynamicExceptionSpecification() {
		DynamicExceptionSpecificationContext _localctx = new DynamicExceptionSpecificationContext(Context, State);
		EnterRule(_localctx, 372, RULE_dynamicExceptionSpecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2025;
			Match(Throw);
			State = 2026;
			Match(LeftParen);
			State = 2028;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 13)) & ~0x3f) == 0 && ((1L << (_la - 13)) & ((1L << (Auto - 13)) | (1L << (Bool - 13)) | (1L << (Char - 13)) | (1L << (Char16 - 13)) | (1L << (Char32 - 13)) | (1L << (Class - 13)) | (1L << (Const - 13)) | (1L << (Decltype - 13)) | (1L << (Double - 13)) | (1L << (Enum - 13)) | (1L << (Float - 13)) | (1L << (Int - 13)) | (1L << (Long - 13)) | (1L << (Short - 13)) | (1L << (Signed - 13)) | (1L << (Struct - 13)) | (1L << (Typename_ - 13)))) != 0) || ((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (Union - 77)) | (1L << (Unsigned - 77)) | (1L << (Void - 77)) | (1L << (Volatile - 77)) | (1L << (Wchar - 77)) | (1L << (Doublecolon - 77)) | (1L << (Identifier - 77)))) != 0)) {
				{
				State = 2027;
				typeIdList();
				}
			}

			State = 2030;
			Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeIdListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TheTypeIdContext[] theTypeId() {
			return GetRuleContexts<TheTypeIdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TheTypeIdContext theTypeId(int i) {
			return GetRuleContext<TheTypeIdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Ellipsis() { return GetTokens(CPP14Parser.Ellipsis); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis(int i) {
			return GetToken(CPP14Parser.Ellipsis, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CPP14Parser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CPP14Parser.Comma, i);
		}
		public TypeIdListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeIdList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeIdList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeIdListContext typeIdList() {
		TypeIdListContext _localctx = new TypeIdListContext(Context, State);
		EnterRule(_localctx, 374, RULE_typeIdList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2032;
			theTypeId();
			State = 2034;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Ellipsis) {
				{
				State = 2033;
				Match(Ellipsis);
				}
			}

			State = 2043;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 2036;
				Match(Comma);
				State = 2037;
				theTypeId();
				State = 2039;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Ellipsis) {
					{
					State = 2038;
					Match(Ellipsis);
					}
				}

				}
				}
				State = 2045;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoeExceptSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Noexcept() { return GetToken(CPP14Parser.Noexcept, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public NoeExceptSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noeExceptSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoeExceptSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NoeExceptSpecificationContext noeExceptSpecification() {
		NoeExceptSpecificationContext _localctx = new NoeExceptSpecificationContext(Context, State);
		EnterRule(_localctx, 376, RULE_noeExceptSpecification);
		try {
			State = 2052;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,302,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2046;
				Match(Noexcept);
				State = 2047;
				Match(LeftParen);
				State = 2048;
				constantExpression();
				State = 2049;
				Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2051;
				Match(Noexcept);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TheOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode New() { return GetToken(CPP14Parser.New, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(CPP14Parser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(CPP14Parser.RightBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Delete() { return GetToken(CPP14Parser.Delete, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(CPP14Parser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(CPP14Parser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star() { return GetToken(CPP14Parser.Star, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Div() { return GetToken(CPP14Parser.Div, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mod() { return GetToken(CPP14Parser.Mod, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Caret() { return GetToken(CPP14Parser.Caret, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(CPP14Parser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(CPP14Parser.Or, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tilde() { return GetToken(CPP14Parser.Tilde, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(CPP14Parser.Not, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Greater() { return GetTokens(CPP14Parser.Greater); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater(int i) {
			return GetToken(CPP14Parser.Greater, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Less() { return GetTokens(CPP14Parser.Less); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less(int i) {
			return GetToken(CPP14Parser.Less, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterEqual() { return GetToken(CPP14Parser.GreaterEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusAssign() { return GetToken(CPP14Parser.PlusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusAssign() { return GetToken(CPP14Parser.MinusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StarAssign() { return GetToken(CPP14Parser.StarAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ModAssign() { return GetToken(CPP14Parser.ModAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XorAssign() { return GetToken(CPP14Parser.XorAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AndAssign() { return GetToken(CPP14Parser.AndAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OrAssign() { return GetToken(CPP14Parser.OrAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftAssign() { return GetToken(CPP14Parser.RightShiftAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShiftAssign() { return GetToken(CPP14Parser.LeftShiftAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(CPP14Parser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEqual() { return GetToken(CPP14Parser.NotEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessEqual() { return GetToken(CPP14Parser.LessEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AndAnd() { return GetToken(CPP14Parser.AndAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OrOr() { return GetToken(CPP14Parser.OrOr, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(CPP14Parser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(CPP14Parser.MinusMinus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ArrowStar() { return GetToken(CPP14Parser.ArrowStar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow() { return GetToken(CPP14Parser.Arrow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public TheOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_theOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTheOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TheOperatorContext theOperator() {
		TheOperatorContext _localctx = new TheOperatorContext(Context, State);
		EnterRule(_localctx, 378, RULE_theOperator);
		try {
			State = 2105;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,305,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2054;
				Match(New);
				State = 2057;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,303,Context) ) {
				case 1:
					{
					State = 2055;
					Match(LeftBracket);
					State = 2056;
					Match(RightBracket);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2059;
				Match(Delete);
				State = 2062;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,304,Context) ) {
				case 1:
					{
					State = 2060;
					Match(LeftBracket);
					State = 2061;
					Match(RightBracket);
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2064;
				Match(Plus);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2065;
				Match(Minus);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2066;
				Match(Star);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2067;
				Match(Div);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2068;
				Match(Mod);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2069;
				Match(Caret);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2070;
				Match(And);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2071;
				Match(Or);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2072;
				Match(Tilde);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2073;
				Match(Not);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2074;
				Match(Assign);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 2075;
				Match(Greater);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 2076;
				Match(Less);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 2077;
				Match(GreaterEqual);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 2078;
				Match(PlusAssign);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 2079;
				Match(MinusAssign);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 2080;
				Match(StarAssign);
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 2081;
				Match(ModAssign);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 2082;
				Match(XorAssign);
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 2083;
				Match(AndAssign);
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 2084;
				Match(OrAssign);
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 2085;
				Match(Less);
				State = 2086;
				Match(Less);
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 2087;
				Match(Greater);
				State = 2088;
				Match(Greater);
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 2089;
				Match(RightShiftAssign);
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 2090;
				Match(LeftShiftAssign);
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 2091;
				Match(Equal);
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 2092;
				Match(NotEqual);
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 2093;
				Match(LessEqual);
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 2094;
				Match(AndAnd);
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 2095;
				Match(OrOr);
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 2096;
				Match(PlusPlus);
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 2097;
				Match(MinusMinus);
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 2098;
				Match(Comma);
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 2099;
				Match(ArrowStar);
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 2100;
				Match(Arrow);
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 2101;
				Match(LeftParen);
				State = 2102;
				Match(RightParen);
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 2103;
				Match(LeftBracket);
				State = 2104;
				Match(RightBracket);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(CPP14Parser.IntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CharacterLiteral() { return GetToken(CPP14Parser.CharacterLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FloatingLiteral() { return GetToken(CPP14Parser.FloatingLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(CPP14Parser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BooleanLiteral() { return GetToken(CPP14Parser.BooleanLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PointerLiteral() { return GetToken(CPP14Parser.PointerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UserDefinedLiteral() { return GetToken(CPP14Parser.UserDefinedLiteral, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 380, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2107;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IntegerLiteral) | (1L << CharacterLiteral) | (1L << FloatingLiteral) | (1L << StringLiteral) | (1L << BooleanLiteral) | (1L << PointerLiteral) | (1L << UserDefinedLiteral))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 5: return nestedNameSpecifier_sempred((NestedNameSpecifierContext)_localctx, predIndex);
		case 15: return postfixExpression_sempred((PostfixExpressionContext)_localctx, predIndex);
		case 25: return noPointerNewDeclarator_sempred((NoPointerNewDeclaratorContext)_localctx, predIndex);
		case 115: return noPointerDeclarator_sempred((NoPointerDeclaratorContext)_localctx, predIndex);
		case 126: return noPointerAbstractDeclarator_sempred((NoPointerAbstractDeclaratorContext)_localctx, predIndex);
		case 128: return noPointerAbstractPackDeclarator_sempred((NoPointerAbstractPackDeclaratorContext)_localctx, predIndex);
		}
		return true;
	}
	private bool nestedNameSpecifier_sempred(NestedNameSpecifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool postfixExpression_sempred(PostfixExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 7);
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 4);
		case 4: return Precpred(Context, 3);
		}
		return true;
	}
	private bool noPointerNewDeclarator_sempred(NoPointerNewDeclaratorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 1);
		}
		return true;
	}
	private bool noPointerDeclarator_sempred(NoPointerDeclaratorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(Context, 2);
		}
		return true;
	}
	private bool noPointerAbstractDeclarator_sempred(NoPointerAbstractDeclaratorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 4);
		}
		return true;
	}
	private bool noPointerAbstractPackDeclarator_sempred(NoPointerAbstractPackDeclaratorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x93', '\x840', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[', 
		'\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^', 
		'\x4', '_', '\t', '_', '\x4', '`', '\t', '`', '\x4', '\x61', '\t', '\x61', 
		'\x4', '\x62', '\t', '\x62', '\x4', '\x63', '\t', '\x63', '\x4', '\x64', 
		'\t', '\x64', '\x4', '\x65', '\t', '\x65', '\x4', '\x66', '\t', '\x66', 
		'\x4', 'g', '\t', 'g', '\x4', 'h', '\t', 'h', '\x4', 'i', '\t', 'i', '\x4', 
		'j', '\t', 'j', '\x4', 'k', '\t', 'k', '\x4', 'l', '\t', 'l', '\x4', 'm', 
		'\t', 'm', '\x4', 'n', '\t', 'n', '\x4', 'o', '\t', 'o', '\x4', 'p', '\t', 
		'p', '\x4', 'q', '\t', 'q', '\x4', 'r', '\t', 'r', '\x4', 's', '\t', 's', 
		'\x4', 't', '\t', 't', '\x4', 'u', '\t', 'u', '\x4', 'v', '\t', 'v', '\x4', 
		'w', '\t', 'w', '\x4', 'x', '\t', 'x', '\x4', 'y', '\t', 'y', '\x4', 'z', 
		'\t', 'z', '\x4', '{', '\t', '{', '\x4', '|', '\t', '|', '\x4', '}', '\t', 
		'}', '\x4', '~', '\t', '~', '\x4', '\x7F', '\t', '\x7F', '\x4', '\x80', 
		'\t', '\x80', '\x4', '\x81', '\t', '\x81', '\x4', '\x82', '\t', '\x82', 
		'\x4', '\x83', '\t', '\x83', '\x4', '\x84', '\t', '\x84', '\x4', '\x85', 
		'\t', '\x85', '\x4', '\x86', '\t', '\x86', '\x4', '\x87', '\t', '\x87', 
		'\x4', '\x88', '\t', '\x88', '\x4', '\x89', '\t', '\x89', '\x4', '\x8A', 
		'\t', '\x8A', '\x4', '\x8B', '\t', '\x8B', '\x4', '\x8C', '\t', '\x8C', 
		'\x4', '\x8D', '\t', '\x8D', '\x4', '\x8E', '\t', '\x8E', '\x4', '\x8F', 
		'\t', '\x8F', '\x4', '\x90', '\t', '\x90', '\x4', '\x91', '\t', '\x91', 
		'\x4', '\x92', '\t', '\x92', '\x4', '\x93', '\t', '\x93', '\x4', '\x94', 
		'\t', '\x94', '\x4', '\x95', '\t', '\x95', '\x4', '\x96', '\t', '\x96', 
		'\x4', '\x97', '\t', '\x97', '\x4', '\x98', '\t', '\x98', '\x4', '\x99', 
		'\t', '\x99', '\x4', '\x9A', '\t', '\x9A', '\x4', '\x9B', '\t', '\x9B', 
		'\x4', '\x9C', '\t', '\x9C', '\x4', '\x9D', '\t', '\x9D', '\x4', '\x9E', 
		'\t', '\x9E', '\x4', '\x9F', '\t', '\x9F', '\x4', '\xA0', '\t', '\xA0', 
		'\x4', '\xA1', '\t', '\xA1', '\x4', '\xA2', '\t', '\xA2', '\x4', '\xA3', 
		'\t', '\xA3', '\x4', '\xA4', '\t', '\xA4', '\x4', '\xA5', '\t', '\xA5', 
		'\x4', '\xA6', '\t', '\xA6', '\x4', '\xA7', '\t', '\xA7', '\x4', '\xA8', 
		'\t', '\xA8', '\x4', '\xA9', '\t', '\xA9', '\x4', '\xAA', '\t', '\xAA', 
		'\x4', '\xAB', '\t', '\xAB', '\x4', '\xAC', '\t', '\xAC', '\x4', '\xAD', 
		'\t', '\xAD', '\x4', '\xAE', '\t', '\xAE', '\x4', '\xAF', '\t', '\xAF', 
		'\x4', '\xB0', '\t', '\xB0', '\x4', '\xB1', '\t', '\xB1', '\x4', '\xB2', 
		'\t', '\xB2', '\x4', '\xB3', '\t', '\xB3', '\x4', '\xB4', '\t', '\xB4', 
		'\x4', '\xB5', '\t', '\xB5', '\x4', '\xB6', '\t', '\xB6', '\x4', '\xB7', 
		'\t', '\xB7', '\x4', '\xB8', '\t', '\xB8', '\x4', '\xB9', '\t', '\xB9', 
		'\x4', '\xBA', '\t', '\xBA', '\x4', '\xBB', '\t', '\xBB', '\x4', '\xBC', 
		'\t', '\xBC', '\x4', '\xBD', '\t', '\xBD', '\x4', '\xBE', '\t', '\xBE', 
		'\x4', '\xBF', '\t', '\xBF', '\x4', '\xC0', '\t', '\xC0', '\x3', '\x2', 
		'\x5', '\x2', '\x182', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x6', '\x3', '\x187', '\n', '\x3', '\r', '\x3', '\xE', '\x3', 
		'\x188', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x192', '\n', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x196', '\n', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x5', '\x5', '\x19F', '\n', '\x5', '\x3', '\x5', 
		'\x5', '\x5', '\x1A2', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x5', 
		'\x6', '\x1A6', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x1AE', '\n', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', 
		'\a', '\x1B5', '\n', '\a', '\x3', '\a', '\x5', '\a', '\x1B8', '\n', '\a', 
		'\x3', '\a', '\a', '\a', '\x1BB', '\n', '\a', '\f', '\a', '\xE', '\a', 
		'\x1BE', '\v', '\a', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x1C2', '\n', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x5', '\t', 
		'\x1C8', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x5', '\n', '\x1D0', '\n', '\n', '\x5', '\n', 
		'\x1D2', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\a', '\f', '\x1D9', '\n', '\f', '\f', '\f', '\xE', '\f', 
		'\x1DC', '\v', '\f', '\x3', '\f', '\x5', '\f', '\x1DF', '\n', '\f', '\x3', 
		'\r', '\x3', '\r', '\x5', '\r', '\x1E3', '\n', '\r', '\x3', '\xE', '\x5', 
		'\xE', '\x1E6', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', 
		'\x1EA', '\n', '\xE', '\x3', '\xF', '\x5', '\xF', '\x1ED', '\n', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', 
		'\x5', '\x10', '\x1F4', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', 
		'\x10', '\x1F8', '\n', '\x10', '\x3', '\x10', '\x5', '\x10', '\x1FB', 
		'\n', '\x10', '\x3', '\x10', '\x5', '\x10', '\x1FE', '\n', '\x10', '\x3', 
		'\x10', '\x5', '\x10', '\x201', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x207', '\n', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x5', '\x11', '\x20B', '\n', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x5', '\x11', '\x20F', '\n', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x5', '\x11', '\x21D', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x5', '\x11', '\x221', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x5', '\x11', '\x227', '\n', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', 
		'\x22E', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x5', '\x11', '\x234', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x5', '\x11', '\x238', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', 
		'\x11', '\x23C', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\x23F', '\v', 
		'\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x14', '\x5', '\x14', '\x246', '\n', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x5', '\x14', '\x24B', '\n', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', 
		'\x14', '\x258', '\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x25F', '\n', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', 
		'\x15', '\x26B', '\n', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x5', '\x15', '\x275', '\n', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x17', '\x5', '\x17', '\x27A', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x5', '\x17', '\x27E', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x285', '\n', '\x17', 
		'\x3', '\x17', '\x5', '\x17', '\x288', '\n', '\x17', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x5', 
		'\x19', '\x290', '\n', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', 
		'\x294', '\n', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x297', '\n', '\x1A', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x5', '\x1B', '\x29E', '\n', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x2A5', '\n', '\x1B', 
		'\a', '\x1B', '\x2A7', '\n', '\x1B', '\f', '\x1B', '\xE', '\x1B', '\x2AA', 
		'\v', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x2AE', '\n', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x2B2', '\n', '\x1C', 
		'\x3', '\x1D', '\x5', '\x1D', '\x2B5', '\n', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x2BA', '\n', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x2C9', '\n', '\x1F', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\a', ' ', '\x2CE', '\n', ' ', '\f', ' ', 
		'\xE', ' ', '\x2D1', '\v', ' ', '\x3', '!', '\x3', '!', '\x3', '!', '\a', 
		'!', '\x2D6', '\n', '!', '\f', '!', '\xE', '!', '\x2D9', '\v', '!', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\a', '\"', '\x2DE', '\n', '\"', '\f', 
		'\"', '\xE', '\"', '\x2E1', '\v', '\"', '\x3', '#', '\x3', '#', '\x3', 
		'#', '\x3', '#', '\a', '#', '\x2E7', '\n', '#', '\f', '#', '\xE', '#', 
		'\x2EA', '\v', '#', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x5', 
		'$', '\x2F0', '\n', '$', '\x3', '%', '\x3', '%', '\x3', '%', '\a', '%', 
		'\x2F5', '\n', '%', '\f', '%', '\xE', '%', '\x2F8', '\v', '%', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\a', '&', '\x2FD', '\n', '&', '\f', '&', 
		'\xE', '&', '\x300', '\v', '&', '\x3', '\'', '\x3', '\'', '\x3', '\'', 
		'\a', '\'', '\x305', '\n', '\'', '\f', '\'', '\xE', '\'', '\x308', '\v', 
		'\'', '\x3', '(', '\x3', '(', '\x3', '(', '\a', '(', '\x30D', '\n', '(', 
		'\f', '(', '\xE', '(', '\x310', '\v', '(', '\x3', ')', '\x3', ')', '\x3', 
		')', '\a', ')', '\x315', '\n', ')', '\f', ')', '\xE', ')', '\x318', '\v', 
		')', '\x3', '*', '\x3', '*', '\x3', '*', '\a', '*', '\x31D', '\n', '*', 
		'\f', '*', '\xE', '*', '\x320', '\v', '*', '\x3', '+', '\x3', '+', '\x3', 
		'+', '\a', '+', '\x325', '\n', '+', '\f', '+', '\xE', '+', '\x328', '\v', 
		'+', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', 
		',', '\x5', ',', '\x330', '\n', ',', '\x3', '-', '\x3', '-', '\x3', '-', 
		'\x3', '-', '\x3', '-', '\x3', '-', '\x5', '-', '\x338', '\n', '-', '\x3', 
		'.', '\x3', '.', '\x3', '/', '\x3', '/', '\x3', '/', '\a', '/', '\x33F', 
		'\n', '/', '\f', '/', '\xE', '/', '\x342', '\v', '/', '\x3', '\x30', '\x3', 
		'\x30', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x5', '\x31', '\x349', 
		'\n', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', 
		'\x3', '\x31', '\x3', '\x31', '\x5', '\x31', '\x351', '\n', '\x31', '\x5', 
		'\x31', '\x353', '\n', '\x31', '\x3', '\x32', '\x5', '\x32', '\x356', 
		'\n', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x5', '\x32', '\x35C', '\n', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', 
		'\x32', '\x3', '\x33', '\x5', '\x33', '\x362', '\n', '\x33', '\x3', '\x33', 
		'\x3', '\x33', '\x3', '\x34', '\x3', '\x34', '\x5', '\x34', '\x368', '\n', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x35', '\x6', '\x35', '\x36D', 
		'\n', '\x35', '\r', '\x35', '\xE', '\x35', '\x36E', '\x3', '\x36', '\x3', 
		'\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', 
		'\x36', '\x5', '\x36', '\x378', '\n', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x5', '\x36', 
		'\x380', '\n', '\x36', '\x3', '\x37', '\x3', '\x37', '\x5', '\x37', '\x384', 
		'\n', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', 
		'\x3', '\x37', '\x5', '\x37', '\x38B', '\n', '\x37', '\x5', '\x37', '\x38D', 
		'\n', '\x37', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', 
		'\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', 
		'\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', 
		'\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x5', '\x38', 
		'\x3A1', '\n', '\x38', '\x3', '\x38', '\x3', '\x38', '\x5', '\x38', '\x3A5', 
		'\n', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', 
		'\x5', '\x38', '\x3AB', '\n', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', 
		'\x38', '\x5', '\x38', '\x3B0', '\n', '\x38', '\x3', '\x39', '\x3', '\x39', 
		'\x5', '\x39', '\x3B4', '\n', '\x39', '\x3', ':', '\x5', ':', '\x3B7', 
		'\n', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ';', '\x3', ';', 
		'\x5', ';', '\x3BE', '\n', ';', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', 
		'<', '\x3', '<', '\x5', '<', '\x3C5', '\n', '<', '\x3', '<', '\x3', '<', 
		'\x5', '<', '\x3C9', '\n', '<', '\x3', '<', '\x3', '<', '\x3', '=', '\x3', 
		'=', '\x3', '>', '\x6', '>', '\x3D0', '\n', '>', '\r', '>', '\xE', '>', 
		'\x3D1', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', 
		'?', '\x3', '?', '\x3', '?', '\x3', '?', '\x5', '?', '\x3DD', '\n', '?', 
		'\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', 
		'\x3', '@', '\x3', '@', '\x5', '@', '\x3E7', '\n', '@', '\x3', '\x41', 
		'\x3', '\x41', '\x3', '\x41', '\x5', '\x41', '\x3EC', '\n', '\x41', '\x3', 
		'\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x42', '\x5', 
		'\x42', '\x3F3', '\n', '\x42', '\x3', '\x42', '\x5', '\x42', '\x3F6', 
		'\n', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x5', '\x42', 
		'\x3FB', '\n', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x5', 
		'\x42', '\x400', '\n', '\x42', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', 
		'\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', 
		'\x3', '\x44', '\x3', '\x44', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', 
		'\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', 
		'\x3', '\x46', '\x5', '\x46', '\x415', '\n', '\x46', '\x3', 'G', '\x6', 
		'G', '\x418', '\n', 'G', '\r', 'G', '\xE', 'G', '\x419', '\x3', 'G', '\x5', 
		'G', '\x41D', '\n', 'G', '\x3', 'H', '\x3', 'H', '\x3', 'I', '\x3', 'I', 
		'\x3', 'J', '\x3', 'J', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x5', 'K', 
		'\x428', '\n', 'K', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x5', 
		'L', '\x42E', '\n', 'L', '\x3', 'M', '\x6', 'M', '\x431', '\n', 'M', '\r', 
		'M', '\xE', 'M', '\x432', '\x3', 'M', '\x5', 'M', '\x436', '\n', 'M', 
		'\x3', 'N', '\x6', 'N', '\x439', '\n', 'N', '\r', 'N', '\xE', 'N', '\x43A', 
		'\x3', 'N', '\x5', 'N', '\x43E', '\n', 'N', '\x3', 'O', '\x3', 'O', '\x3', 
		'P', '\x3', 'P', '\x3', 'Q', '\x5', 'Q', '\x445', '\n', 'Q', '\x3', 'Q', 
		'\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', 
		'\x5', 'Q', '\x44E', '\n', 'Q', '\x3', 'Q', '\x6', 'Q', '\x451', '\n', 
		'Q', '\r', 'Q', '\xE', 'Q', '\x452', '\x3', 'Q', '\x5', 'Q', '\x456', 
		'\n', 'Q', '\x3', 'Q', '\x3', 'Q', '\x5', 'Q', '\x45A', '\n', 'Q', '\x3', 
		'Q', '\x3', 'Q', '\x5', 'Q', '\x45E', '\n', 'Q', '\x3', 'Q', '\x3', 'Q', 
		'\x5', 'Q', '\x462', '\n', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x5', 
		'Q', '\x467', '\n', 'Q', '\x3', 'Q', '\a', 'Q', '\x46A', '\n', 'Q', '\f', 
		'Q', '\xE', 'Q', '\x46D', '\v', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', 
		'\x5', 'Q', '\x472', '\n', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 
		'Q', '\x5', 'Q', '\x478', '\n', 'Q', '\x3', 'R', '\x3', 'R', '\x3', 'R', 
		'\x3', 'R', '\x5', 'R', '\x47E', '\n', 'R', '\x3', 'S', '\x3', 'S', '\x3', 
		'S', '\x3', 'S', '\x5', 'S', '\x484', '\n', 'S', '\x3', 'S', '\x3', 'S', 
		'\x3', 'T', '\x3', 'T', '\x5', 'T', '\x48A', '\n', 'T', '\x3', 'T', '\x5', 
		'T', '\x48D', '\n', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', 
		'\x5', 'T', '\x493', '\n', 'T', '\x3', 'T', '\x3', 'T', '\x5', 'T', '\x497', 
		'\n', 'T', '\x3', 'T', '\x3', 'T', '\x5', 'T', '\x49B', '\n', 'T', '\x3', 
		'T', '\x5', 'T', '\x49E', '\n', 'T', '\x3', 'U', '\x3', 'U', '\x3', 'V', 
		'\x3', 'V', '\x3', 'V', '\x3', 'V', '\x5', 'V', '\x4A6', '\n', 'V', '\x5', 
		'V', '\x4A8', '\n', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'W', '\x3', 'W', 
		'\x5', 'W', '\x4AE', '\n', 'W', '\x3', 'W', '\x5', 'W', '\x4B1', '\n', 
		'W', '\x3', 'W', '\x5', 'W', '\x4B4', '\n', 'W', '\x3', 'W', '\x5', 'W', 
		'\x4B7', '\n', 'W', '\x3', 'X', '\x3', 'X', '\x5', 'X', '\x4BB', '\n', 
		'X', '\x3', 'X', '\x3', 'X', '\x5', 'X', '\x4BF', '\n', 'X', '\x3', 'X', 
		'\x3', 'X', '\x3', 'Y', '\x3', 'Y', '\x5', 'Y', '\x4C5', '\n', 'Y', '\x3', 
		'Z', '\x3', 'Z', '\x3', 'Z', '\x3', '[', '\x3', '[', '\x3', '[', '\a', 
		'[', '\x4CD', '\n', '[', '\f', '[', '\xE', '[', '\x4D0', '\v', '[', '\x3', 
		'\\', '\x3', '\\', '\x3', '\\', '\x5', '\\', '\x4D5', '\n', '\\', '\x3', 
		']', '\x3', ']', '\x3', '^', '\x3', '^', '\x5', '^', '\x4DB', '\n', '^', 
		'\x3', '_', '\x3', '_', '\x3', '`', '\x5', '`', '\x4E0', '\n', '`', '\x3', 
		'`', '\x3', '`', '\x3', '`', '\x5', '`', '\x4E5', '\n', '`', '\x3', '`', 
		'\x3', '`', '\x5', '`', '\x4E9', '\n', '`', '\x3', '`', '\x3', '`', '\x3', 
		'\x61', '\x3', '\x61', '\x3', '\x62', '\x3', '\x62', '\x3', '\x62', '\x3', 
		'\x62', '\x3', '\x62', '\x3', '\x62', '\x3', '\x63', '\x5', '\x63', '\x4F6', 
		'\n', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x64', '\x3', '\x64', 
		'\x5', '\x64', '\x4FC', '\n', '\x64', '\x3', '\x64', '\x3', '\x64', '\x5', 
		'\x64', '\x500', '\n', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', 
		'\x3', '\x65', '\x5', '\x65', '\x506', '\n', '\x65', '\x3', '\x65', '\x3', 
		'\x65', '\x3', '\x65', '\x5', '\x65', '\x50B', '\n', '\x65', '\x3', '\x65', 
		'\x3', '\x65', '\x3', '\x65', '\x3', '\x66', '\x3', '\x66', '\x3', '\x66', 
		'\x3', '\x66', '\x3', '\x66', '\x3', '\x66', '\x3', 'g', '\x3', 'g', '\x3', 
		'g', '\x3', 'g', '\x5', 'g', '\x51A', '\n', 'g', '\x3', 'g', '\x3', 'g', 
		'\x5', 'g', '\x51E', '\n', 'g', '\x3', 'h', '\x6', 'h', '\x521', '\n', 
		'h', '\r', 'h', '\xE', 'h', '\x522', '\x3', 'i', '\x3', 'i', '\x3', 'i', 
		'\x5', 'i', '\x528', '\n', 'i', '\x3', 'i', '\x3', 'i', '\x3', 'i', '\x5', 
		'i', '\x52D', '\n', 'i', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x3', 'j', 
		'\x5', 'j', '\x533', '\n', 'j', '\x3', 'j', '\x5', 'j', '\x536', '\n', 
		'j', '\x3', 'j', '\x3', 'j', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\a', 
		'k', '\x53D', '\n', 'k', '\f', 'k', '\xE', 'k', '\x540', '\v', 'k', '\x3', 
		'k', '\x5', 'k', '\x543', '\n', 'k', '\x3', 'l', '\x3', 'l', '\x3', 'l', 
		'\x5', 'l', '\x548', '\n', 'l', '\x3', 'l', '\x3', 'l', '\x5', 'l', '\x54C', 
		'\n', 'l', '\x3', 'm', '\x3', 'm', '\x3', 'n', '\x3', 'n', '\x5', 'n', 
		'\x552', '\n', 'n', '\x3', 'n', '\x3', 'n', '\x3', 'o', '\x6', 'o', '\x557', 
		'\n', 'o', '\r', 'o', '\xE', 'o', '\x558', '\x3', 'p', '\x3', 'p', '\x3', 
		'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', '\x3', 
		'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', '\x6', 'p', '\x568', 
		'\n', 'p', '\r', 'p', '\xE', 'p', '\x569', '\x5', 'p', '\x56C', '\n', 
		'p', '\x3', 'q', '\x3', 'q', '\x3', 'q', '\a', 'q', '\x571', '\n', 'q', 
		'\f', 'q', '\xE', 'q', '\x574', '\v', 'q', '\x3', 'r', '\x3', 'r', '\x5', 
		'r', '\x578', '\n', 'r', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', 
		'\x3', 's', '\x5', 's', '\x57F', '\n', 's', '\x3', 't', '\x3', 't', '\x5', 
		't', '\x583', '\n', 't', '\a', 't', '\x585', '\n', 't', '\f', 't', '\xE', 
		't', '\x588', '\v', 't', '\x3', 't', '\x3', 't', '\x3', 'u', '\x3', 'u', 
		'\x3', 'u', '\x5', 'u', '\x58F', '\n', 'u', '\x3', 'u', '\x3', 'u', '\x3', 
		'u', '\x3', 'u', '\x5', 'u', '\x595', '\n', 'u', '\x3', 'u', '\x3', 'u', 
		'\x3', 'u', '\x3', 'u', '\x5', 'u', '\x59B', '\n', 'u', '\x3', 'u', '\x3', 
		'u', '\x5', 'u', '\x59F', '\n', 'u', '\x5', 'u', '\x5A1', '\n', 'u', '\a', 
		'u', '\x5A3', '\n', 'u', '\f', 'u', '\xE', 'u', '\x5A6', '\v', 'u', '\x3', 
		'v', '\x3', 'v', '\x5', 'v', '\x5AA', '\n', 'v', '\x3', 'v', '\x3', 'v', 
		'\x5', 'v', '\x5AE', '\n', 'v', '\x3', 'v', '\x5', 'v', '\x5B1', '\n', 
		'v', '\x3', 'v', '\x5', 'v', '\x5B4', '\n', 'v', '\x3', 'v', '\x5', 'v', 
		'\x5B7', '\n', 'v', '\x3', 'w', '\x3', 'w', '\x3', 'w', '\x5', 'w', '\x5BC', 
		'\n', 'w', '\x3', 'x', '\x3', 'x', '\x5', 'x', '\x5C0', '\n', 'x', '\x3', 
		'x', '\x5', 'x', '\x5C3', '\n', 'x', '\x3', 'x', '\x3', 'x', '\x5', 'x', 
		'\x5C7', '\n', 'x', '\x3', 'x', '\x5', 'x', '\x5CA', '\n', 'x', '\x5', 
		'x', '\x5CC', '\n', 'x', '\x3', 'y', '\x6', 'y', '\x5CF', '\n', 'y', '\r', 
		'y', '\xE', 'y', '\x5D0', '\x3', 'z', '\x3', 'z', '\x3', '{', '\x3', '{', 
		'\x3', '|', '\x5', '|', '\x5D8', '\n', '|', '\x3', '|', '\x3', '|', '\x3', 
		'}', '\x3', '}', '\x5', '}', '\x5DE', '\n', '}', '\x3', '~', '\x3', '~', 
		'\x5', '~', '\x5E2', '\n', '~', '\x3', '~', '\x3', '~', '\x3', '~', '\x3', 
		'~', '\x5', '~', '\x5E8', '\n', '~', '\x3', '\x7F', '\x3', '\x7F', '\x6', 
		'\x7F', '\x5EC', '\n', '\x7F', '\r', '\x7F', '\xE', '\x7F', '\x5ED', '\x3', 
		'\x7F', '\x5', '\x7F', '\x5F1', '\n', '\x7F', '\x5', '\x7F', '\x5F3', 
		'\n', '\x7F', '\x3', '\x80', '\x3', '\x80', '\x3', '\x80', '\x3', '\x80', 
		'\x5', '\x80', '\x5F9', '\n', '\x80', '\x3', '\x80', '\x3', '\x80', '\x5', 
		'\x80', '\x5FD', '\n', '\x80', '\x3', '\x80', '\x3', '\x80', '\x3', '\x80', 
		'\x3', '\x80', '\x5', '\x80', '\x603', '\n', '\x80', '\x3', '\x80', '\x3', 
		'\x80', '\x3', '\x80', '\x3', '\x80', '\x3', '\x80', '\x5', '\x80', '\x60A', 
		'\n', '\x80', '\x3', '\x80', '\x3', '\x80', '\x5', '\x80', '\x60E', '\n', 
		'\x80', '\x5', '\x80', '\x610', '\n', '\x80', '\a', '\x80', '\x612', '\n', 
		'\x80', '\f', '\x80', '\xE', '\x80', '\x615', '\v', '\x80', '\x3', '\x81', 
		'\a', '\x81', '\x618', '\n', '\x81', '\f', '\x81', '\xE', '\x81', '\x61B', 
		'\v', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x82', '\x3', '\x82', 
		'\x3', '\x82', '\x3', '\x82', '\x3', '\x82', '\x3', '\x82', '\x3', '\x82', 
		'\x5', '\x82', '\x626', '\n', '\x82', '\x3', '\x82', '\x3', '\x82', '\x5', 
		'\x82', '\x62A', '\n', '\x82', '\x5', '\x82', '\x62C', '\n', '\x82', '\a', 
		'\x82', '\x62E', '\n', '\x82', '\f', '\x82', '\xE', '\x82', '\x631', '\v', 
		'\x82', '\x3', '\x83', '\x3', '\x83', '\x5', '\x83', '\x635', '\n', '\x83', 
		'\x3', '\x83', '\x5', '\x83', '\x638', '\n', '\x83', '\x3', '\x84', '\x3', 
		'\x84', '\x3', '\x84', '\a', '\x84', '\x63D', '\n', '\x84', '\f', '\x84', 
		'\xE', '\x84', '\x640', '\v', '\x84', '\x3', '\x85', '\x5', '\x85', '\x643', 
		'\n', '\x85', '\x3', '\x85', '\x3', '\x85', '\x3', '\x85', '\x5', '\x85', 
		'\x648', '\n', '\x85', '\x5', '\x85', '\x64A', '\n', '\x85', '\x3', '\x85', 
		'\x3', '\x85', '\x5', '\x85', '\x64E', '\n', '\x85', '\x3', '\x86', '\x5', 
		'\x86', '\x651', '\n', '\x86', '\x3', '\x86', '\x5', '\x86', '\x654', 
		'\n', '\x86', '\x3', '\x86', '\x3', '\x86', '\x5', '\x86', '\x658', '\n', 
		'\x86', '\x3', '\x86', '\x3', '\x86', '\x3', '\x87', '\x5', '\x87', '\x65D', 
		'\n', '\x87', '\x3', '\x87', '\x3', '\x87', '\x3', '\x87', '\x3', '\x87', 
		'\x3', '\x87', '\x5', '\x87', '\x664', '\n', '\x87', '\x3', '\x88', '\x3', 
		'\x88', '\x3', '\x88', '\x3', '\x88', '\x3', '\x88', '\x5', '\x88', '\x66B', 
		'\n', '\x88', '\x3', '\x89', '\x3', '\x89', '\x3', '\x89', '\x5', '\x89', 
		'\x670', '\n', '\x89', '\x3', '\x8A', '\x3', '\x8A', '\x5', '\x8A', '\x674', 
		'\n', '\x8A', '\x3', '\x8B', '\x3', '\x8B', '\x5', '\x8B', '\x678', '\n', 
		'\x8B', '\x3', '\x8B', '\x3', '\x8B', '\x3', '\x8B', '\x5', '\x8B', '\x67D', 
		'\n', '\x8B', '\a', '\x8B', '\x67F', '\n', '\x8B', '\f', '\x8B', '\xE', 
		'\x8B', '\x682', '\v', '\x8B', '\x3', '\x8C', '\x3', '\x8C', '\x3', '\x8C', 
		'\x5', '\x8C', '\x687', '\n', '\x8C', '\x5', '\x8C', '\x689', '\n', '\x8C', 
		'\x3', '\x8C', '\x3', '\x8C', '\x3', '\x8D', '\x3', '\x8D', '\x5', '\x8D', 
		'\x68F', '\n', '\x8D', '\x3', '\x8E', '\x3', '\x8E', '\x3', '\x8E', '\x5', 
		'\x8E', '\x694', '\n', '\x8E', '\x3', '\x8E', '\x3', '\x8E', '\x3', '\x8F', 
		'\x3', '\x8F', '\x5', '\x8F', '\x69A', '\n', '\x8F', '\x3', '\x8F', '\x3', 
		'\x8F', '\x5', '\x8F', '\x69E', '\n', '\x8F', '\x5', '\x8F', '\x6A0', 
		'\n', '\x8F', '\x3', '\x8F', '\x5', '\x8F', '\x6A3', '\n', '\x8F', '\x3', 
		'\x8F', '\x3', '\x8F', '\x5', '\x8F', '\x6A7', '\n', '\x8F', '\x3', '\x8F', 
		'\x3', '\x8F', '\x5', '\x8F', '\x6AB', '\n', '\x8F', '\x5', '\x8F', '\x6AD', 
		'\n', '\x8F', '\x5', '\x8F', '\x6AF', '\n', '\x8F', '\x3', '\x90', '\x5', 
		'\x90', '\x6B2', '\n', '\x90', '\x3', '\x90', '\x3', '\x90', '\x3', '\x91', 
		'\x3', '\x91', '\x3', '\x92', '\x3', '\x92', '\x3', '\x93', '\x3', '\x93', 
		'\x3', '\x93', '\x3', '\x93', '\x6', '\x93', '\x6BE', '\n', '\x93', '\r', 
		'\x93', '\xE', '\x93', '\x6BF', '\x3', '\x94', '\x5', '\x94', '\x6C3', 
		'\n', '\x94', '\x3', '\x94', '\x5', '\x94', '\x6C6', '\n', '\x94', '\x3', 
		'\x94', '\x5', '\x94', '\x6C9', '\n', '\x94', '\x3', '\x94', '\x3', '\x94', 
		'\x3', '\x94', '\x3', '\x94', '\x3', '\x94', '\x3', '\x94', '\x3', '\x94', 
		'\x5', '\x94', '\x6D2', '\n', '\x94', '\x3', '\x95', '\x3', '\x95', '\x3', 
		'\x95', '\a', '\x95', '\x6D7', '\n', '\x95', '\f', '\x95', '\xE', '\x95', 
		'\x6DA', '\v', '\x95', '\x3', '\x96', '\x3', '\x96', '\x5', '\x96', '\x6DE', 
		'\n', '\x96', '\x3', '\x96', '\x5', '\x96', '\x6E1', '\n', '\x96', '\x3', 
		'\x96', '\x5', '\x96', '\x6E4', '\n', '\x96', '\x5', '\x96', '\x6E6', 
		'\n', '\x96', '\x3', '\x96', '\x5', '\x96', '\x6E9', '\n', '\x96', '\x3', 
		'\x96', '\x5', '\x96', '\x6EC', '\n', '\x96', '\x3', '\x96', '\x3', '\x96', 
		'\x5', '\x96', '\x6F0', '\n', '\x96', '\x3', '\x97', '\x6', '\x97', '\x6F3', 
		'\n', '\x97', '\r', '\x97', '\xE', '\x97', '\x6F4', '\x3', '\x98', '\x3', 
		'\x98', '\x3', '\x99', '\x3', '\x99', '\x3', '\x99', '\x3', '\x99', '\x3', 
		'\x9A', '\x3', '\x9A', '\x3', '\x9A', '\x3', '\x9B', '\x3', '\x9B', '\x5', 
		'\x9B', '\x702', '\n', '\x9B', '\x3', '\x9B', '\x3', '\x9B', '\x3', '\x9B', 
		'\x5', '\x9B', '\x707', '\n', '\x9B', '\a', '\x9B', '\x709', '\n', '\x9B', 
		'\f', '\x9B', '\xE', '\x9B', '\x70C', '\v', '\x9B', '\x3', '\x9C', '\x5', 
		'\x9C', '\x70F', '\n', '\x9C', '\x3', '\x9C', '\x3', '\x9C', '\x3', '\x9C', 
		'\x5', '\x9C', '\x714', '\n', '\x9C', '\x3', '\x9C', '\x3', '\x9C', '\x3', 
		'\x9C', '\x5', '\x9C', '\x719', '\n', '\x9C', '\x3', '\x9C', '\x3', '\x9C', 
		'\x5', '\x9C', '\x71D', '\n', '\x9C', '\x3', '\x9D', '\x5', '\x9D', '\x720', 
		'\n', '\x9D', '\x3', '\x9D', '\x3', '\x9D', '\x5', '\x9D', '\x724', '\n', 
		'\x9D', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9F', '\x3', '\x9F', '\x3', 
		'\xA0', '\x3', '\xA0', '\x3', '\xA0', '\x3', '\xA1', '\x3', '\xA1', '\x5', 
		'\xA1', '\x72F', '\n', '\xA1', '\x3', '\xA2', '\x3', '\xA2', '\x5', '\xA2', 
		'\x733', '\n', '\xA2', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', 
		'\xA4', '\x3', '\xA4', '\x5', '\xA4', '\x73A', '\n', '\xA4', '\x3', '\xA4', 
		'\x3', '\xA4', '\x3', '\xA4', '\x5', '\xA4', '\x73F', '\n', '\xA4', '\a', 
		'\xA4', '\x741', '\n', '\xA4', '\f', '\xA4', '\xE', '\xA4', '\x744', '\v', 
		'\xA4', '\x3', '\xA5', '\x3', '\xA5', '\x3', '\xA5', '\x5', '\xA5', '\x749', 
		'\n', '\xA5', '\x3', '\xA5', '\x3', '\xA5', '\x5', '\xA5', '\x74D', '\n', 
		'\xA5', '\x3', '\xA6', '\x3', '\xA6', '\x5', '\xA6', '\x751', '\n', '\xA6', 
		'\x3', '\xA7', '\x3', '\xA7', '\x3', '\xA7', '\x3', '\xA8', '\x3', '\xA8', 
		'\x3', '\xA8', '\x3', '\xA8', '\x5', '\xA8', '\x75A', '\n', '\xA8', '\x3', 
		'\xA9', '\x3', '\xA9', '\x3', '\xA9', '\x3', '\xA9', '\x3', '\xA9', '\x3', 
		'\xA9', '\x3', '\xAA', '\x3', '\xAA', '\x3', '\xAA', '\a', '\xAA', '\x765', 
		'\n', '\xAA', '\f', '\xAA', '\xE', '\xAA', '\x768', '\v', '\xAA', '\x3', 
		'\xAB', '\x3', '\xAB', '\x5', '\xAB', '\x76C', '\n', '\xAB', '\x3', '\xAC', 
		'\x3', '\xAC', '\x3', '\xAC', '\x3', '\xAC', '\x3', '\xAC', '\x5', '\xAC', 
		'\x773', '\n', '\xAC', '\x3', '\xAC', '\x3', '\xAC', '\x5', '\xAC', '\x777', 
		'\n', '\xAC', '\x3', '\xAC', '\x5', '\xAC', '\x77A', '\n', '\xAC', '\x3', 
		'\xAC', '\x5', '\xAC', '\x77D', '\n', '\xAC', '\x3', '\xAC', '\x5', '\xAC', 
		'\x780', '\n', '\xAC', '\x3', '\xAC', '\x3', '\xAC', '\x5', '\xAC', '\x784', 
		'\n', '\xAC', '\x3', '\xAD', '\x3', '\xAD', '\x3', '\xAD', '\x5', '\xAD', 
		'\x789', '\n', '\xAD', '\x3', '\xAD', '\x3', '\xAD', '\x3', '\xAE', '\x3', 
		'\xAE', '\x3', '\xAE', '\x5', '\xAE', '\x790', '\n', '\xAE', '\x3', '\xAE', 
		'\x3', '\xAE', '\x5', '\xAE', '\x794', '\n', '\xAE', '\x3', '\xAE', '\x3', 
		'\xAE', '\x5', '\xAE', '\x798', '\n', '\xAE', '\x3', '\xAF', '\x3', '\xAF', 
		'\x3', '\xB0', '\x3', '\xB0', '\x5', '\xB0', '\x79E', '\n', '\xB0', '\x3', 
		'\xB0', '\x3', '\xB0', '\x3', '\xB0', '\x5', '\xB0', '\x7A3', '\n', '\xB0', 
		'\a', '\xB0', '\x7A5', '\n', '\xB0', '\f', '\xB0', '\xE', '\xB0', '\x7A8', 
		'\v', '\xB0', '\x3', '\xB1', '\x3', '\xB1', '\x3', '\xB1', '\x5', '\xB1', 
		'\x7AD', '\n', '\xB1', '\x3', '\xB2', '\x3', '\xB2', '\x3', '\xB2', '\x3', 
		'\xB2', '\x5', '\xB2', '\x7B3', '\n', '\xB2', '\x3', '\xB2', '\x5', '\xB2', 
		'\x7B6', '\n', '\xB2', '\x3', '\xB3', '\x5', '\xB3', '\x7B9', '\n', '\xB3', 
		'\x3', '\xB3', '\x3', '\xB3', '\x3', '\xB3', '\x3', '\xB4', '\x3', '\xB4', 
		'\x3', '\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x3', '\xB5', '\x3', '\xB5', 
		'\x3', '\xB5', '\x3', '\xB5', '\x3', '\xB6', '\x3', '\xB6', '\x5', '\xB6', 
		'\x7C9', '\n', '\xB6', '\x3', '\xB6', '\x3', '\xB6', '\x3', '\xB6', '\x3', 
		'\xB7', '\x6', '\xB7', '\x7CF', '\n', '\xB7', '\r', '\xB7', '\xE', '\xB7', 
		'\x7D0', '\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x3', 
		'\xB8', '\x3', '\xB8', '\x3', '\xB9', '\x5', '\xB9', '\x7DA', '\n', '\xB9', 
		'\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x5', '\xB9', '\x7DF', '\n', 
		'\xB9', '\x3', '\xB9', '\x5', '\xB9', '\x7E2', '\n', '\xB9', '\x3', '\xBA', 
		'\x3', '\xBA', '\x5', '\xBA', '\x7E6', '\n', '\xBA', '\x3', '\xBB', '\x3', 
		'\xBB', '\x5', '\xBB', '\x7EA', '\n', '\xBB', '\x3', '\xBC', '\x3', '\xBC', 
		'\x3', '\xBC', '\x5', '\xBC', '\x7EF', '\n', '\xBC', '\x3', '\xBC', '\x3', 
		'\xBC', '\x3', '\xBD', '\x3', '\xBD', '\x5', '\xBD', '\x7F5', '\n', '\xBD', 
		'\x3', '\xBD', '\x3', '\xBD', '\x3', '\xBD', '\x5', '\xBD', '\x7FA', '\n', 
		'\xBD', '\a', '\xBD', '\x7FC', '\n', '\xBD', '\f', '\xBD', '\xE', '\xBD', 
		'\x7FF', '\v', '\xBD', '\x3', '\xBE', '\x3', '\xBE', '\x3', '\xBE', '\x3', 
		'\xBE', '\x3', '\xBE', '\x3', '\xBE', '\x5', '\xBE', '\x807', '\n', '\xBE', 
		'\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x5', '\xBF', '\x80C', '\n', 
		'\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x5', '\xBF', '\x811', 
		'\n', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', 
		'\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', 
		'\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', 
		'\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', 
		'\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', 
		'\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', 
		'\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', 
		'\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', 
		'\x3', '\xBF', '\x3', '\xBF', '\x5', '\xBF', '\x83C', '\n', '\xBF', '\x3', 
		'\xC0', '\x3', '\xC0', '\x3', '\xC0', '\x3', '\x419', '\b', '\f', ' ', 
		'\x34', '\xE8', '\xFE', '\x102', '\xC1', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', 
		'\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 
		'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 
		'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', 
		'\x84', '\x86', '\x88', '\x8A', '\x8C', '\x8E', '\x90', '\x92', '\x94', 
		'\x96', '\x98', '\x9A', '\x9C', '\x9E', '\xA0', '\xA2', '\xA4', '\xA6', 
		'\xA8', '\xAA', '\xAC', '\xAE', '\xB0', '\xB2', '\xB4', '\xB6', '\xB8', 
		'\xBA', '\xBC', '\xBE', '\xC0', '\xC2', '\xC4', '\xC6', '\xC8', '\xCA', 
		'\xCC', '\xCE', '\xD0', '\xD2', '\xD4', '\xD6', '\xD8', '\xDA', '\xDC', 
		'\xDE', '\xE0', '\xE2', '\xE4', '\xE6', '\xE8', '\xEA', '\xEC', '\xEE', 
		'\xF0', '\xF2', '\xF4', '\xF6', '\xF8', '\xFA', '\xFC', '\xFE', '\x100', 
		'\x102', '\x104', '\x106', '\x108', '\x10A', '\x10C', '\x10E', '\x110', 
		'\x112', '\x114', '\x116', '\x118', '\x11A', '\x11C', '\x11E', '\x120', 
		'\x122', '\x124', '\x126', '\x128', '\x12A', '\x12C', '\x12E', '\x130', 
		'\x132', '\x134', '\x136', '\x138', '\x13A', '\x13C', '\x13E', '\x140', 
		'\x142', '\x144', '\x146', '\x148', '\x14A', '\x14C', '\x14E', '\x150', 
		'\x152', '\x154', '\x156', '\x158', '\x15A', '\x15C', '\x15E', '\x160', 
		'\x162', '\x164', '\x166', '\x168', '\x16A', '\x16C', '\x16E', '\x170', 
		'\x172', '\x174', '\x176', '\x178', '\x17A', '\x17C', '\x17E', '\x2', 
		'\x19', '\x4', '\x2', '\x63', '\x63', 'g', 'g', '\x6', '\x2', '\x1A', 
		'\x1A', '!', '!', '<', '<', '\x43', '\x43', '\x4', '\x2', '~', '~', '\x83', 
		'\x83', '\x3', '\x2', 'z', '{', '\x4', '\x2', ']', '_', '\x63', '\x66', 
		'\x4', '\x2', '}', '}', '\x84', '\x84', '\x3', '\x2', '_', '\x61', '\x3', 
		'\x2', ']', '^', '\x4', '\x2', 'h', 'i', 'v', 'w', '\x3', '\x2', 't', 
		'u', '\x4', '\x2', 'g', 'g', 'j', 's', '\a', '\x2', '&', '&', '\x31', 
		'\x31', ';', ';', '\x41', '\x41', 'H', 'H', '\x5', '\x2', '$', '$', '.', 
		'.', 'R', 'R', '\x4', '\x2', '\x30', '\x30', '>', '>', '\x4', '\x2', '?', 
		'?', 'P', 'P', '\x4', '\x2', '\x17', '\x17', '\x44', '\x44', '\x3', '\x2', 
		'W', '\\', '\x4', '\x2', '\x63', '\x63', 'x', 'x', '\x4', '\x2', '\x18', 
		'\x18', 'T', 'T', '\x3', '\x2', '\x1D', '\x1E', '\x4', '\x2', '(', '(', 
		'\x37', '\x37', '\x3', '\x2', '\x38', ':', '\x3', '\x2', '\x3', '\t', 
		'\x2', '\x929', '\x2', '\x181', '\x3', '\x2', '\x2', '\x2', '\x4', '\x191', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '\x195', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\x1A1', '\x3', '\x2', '\x2', '\x2', '\n', '\x1A3', '\x3', '\x2', 
		'\x2', '\x2', '\f', '\x1A9', '\x3', '\x2', '\x2', '\x2', '\xE', '\x1BF', 
		'\x3', '\x2', '\x2', '\x2', '\x10', '\x1C5', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '\x1D1', '\x3', '\x2', '\x2', '\x2', '\x14', '\x1D3', '\x3', '\x2', 
		'\x2', '\x2', '\x16', '\x1D5', '\x3', '\x2', '\x2', '\x2', '\x18', '\x1E2', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\x1E9', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\x1EC', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F1', '\x3', '\x2', 
		'\x2', '\x2', ' ', '\x220', '\x3', '\x2', '\x2', '\x2', '\"', '\x240', 
		'\x3', '\x2', '\x2', '\x2', '$', '\x242', '\x3', '\x2', '\x2', '\x2', 
		'&', '\x257', '\x3', '\x2', '\x2', '\x2', '(', '\x274', '\x3', '\x2', 
		'\x2', '\x2', '*', '\x276', '\x3', '\x2', '\x2', '\x2', ',', '\x279', 
		'\x3', '\x2', '\x2', '\x2', '.', '\x289', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x28D', '\x3', '\x2', '\x2', '\x2', '\x32', '\x296', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x298', '\x3', '\x2', '\x2', '\x2', '\x36', '\x2B1', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x2B4', '\x3', '\x2', '\x2', '\x2', 
		':', '\x2BD', '\x3', '\x2', '\x2', '\x2', '<', '\x2C8', '\x3', '\x2', 
		'\x2', '\x2', '>', '\x2CA', '\x3', '\x2', '\x2', '\x2', '@', '\x2D2', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x2DA', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x2E2', '\x3', '\x2', '\x2', '\x2', '\x46', '\x2EF', '\x3', '\x2', 
		'\x2', '\x2', 'H', '\x2F1', '\x3', '\x2', '\x2', '\x2', 'J', '\x2F9', 
		'\x3', '\x2', '\x2', '\x2', 'L', '\x301', '\x3', '\x2', '\x2', '\x2', 
		'N', '\x309', '\x3', '\x2', '\x2', '\x2', 'P', '\x311', '\x3', '\x2', 
		'\x2', '\x2', 'R', '\x319', '\x3', '\x2', '\x2', '\x2', 'T', '\x321', 
		'\x3', '\x2', '\x2', '\x2', 'V', '\x329', '\x3', '\x2', '\x2', '\x2', 
		'X', '\x337', '\x3', '\x2', '\x2', '\x2', 'Z', '\x339', '\x3', '\x2', 
		'\x2', '\x2', '\\', '\x33B', '\x3', '\x2', '\x2', '\x2', '^', '\x343', 
		'\x3', '\x2', '\x2', '\x2', '`', '\x352', '\x3', '\x2', '\x2', '\x2', 
		'\x62', '\x355', '\x3', '\x2', '\x2', '\x2', '\x64', '\x361', '\x3', '\x2', 
		'\x2', '\x2', '\x66', '\x365', '\x3', '\x2', '\x2', '\x2', 'h', '\x36C', 
		'\x3', '\x2', '\x2', '\x2', 'j', '\x37F', '\x3', '\x2', '\x2', '\x2', 
		'l', '\x38C', '\x3', '\x2', '\x2', '\x2', 'n', '\x3AF', '\x3', '\x2', 
		'\x2', '\x2', 'p', '\x3B3', '\x3', '\x2', '\x2', '\x2', 'r', '\x3B6', 
		'\x3', '\x2', '\x2', '\x2', 't', '\x3BD', '\x3', '\x2', '\x2', '\x2', 
		'v', '\x3C8', '\x3', '\x2', '\x2', '\x2', 'x', '\x3CC', '\x3', '\x2', 
		'\x2', '\x2', 'z', '\x3CF', '\x3', '\x2', '\x2', '\x2', '|', '\x3DC', 
		'\x3', '\x2', '\x2', '\x2', '~', '\x3E6', '\x3', '\x2', '\x2', '\x2', 
		'\x80', '\x3E8', '\x3', '\x2', '\x2', '\x2', '\x82', '\x3FF', '\x3', '\x2', 
		'\x2', '\x2', '\x84', '\x401', '\x3', '\x2', '\x2', '\x2', '\x86', '\x409', 
		'\x3', '\x2', '\x2', '\x2', '\x88', '\x40B', '\x3', '\x2', '\x2', '\x2', 
		'\x8A', '\x414', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x417', '\x3', '\x2', 
		'\x2', '\x2', '\x8E', '\x41E', '\x3', '\x2', '\x2', '\x2', '\x90', '\x420', 
		'\x3', '\x2', '\x2', '\x2', '\x92', '\x422', '\x3', '\x2', '\x2', '\x2', 
		'\x94', '\x427', '\x3', '\x2', '\x2', '\x2', '\x96', '\x42D', '\x3', '\x2', 
		'\x2', '\x2', '\x98', '\x430', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x438', 
		'\x3', '\x2', '\x2', '\x2', '\x9C', '\x43F', '\x3', '\x2', '\x2', '\x2', 
		'\x9E', '\x441', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x477', '\x3', '\x2', 
		'\x2', '\x2', '\xA2', '\x47D', '\x3', '\x2', '\x2', '\x2', '\xA4', '\x47F', 
		'\x3', '\x2', '\x2', '\x2', '\xA6', '\x49D', '\x3', '\x2', '\x2', '\x2', 
		'\xA8', '\x49F', '\x3', '\x2', '\x2', '\x2', '\xAA', '\x4A1', '\x3', '\x2', 
		'\x2', '\x2', '\xAC', '\x4AB', '\x3', '\x2', '\x2', '\x2', '\xAE', '\x4B8', 
		'\x3', '\x2', '\x2', '\x2', '\xB0', '\x4C2', '\x3', '\x2', '\x2', '\x2', 
		'\xB2', '\x4C6', '\x3', '\x2', '\x2', '\x2', '\xB4', '\x4C9', '\x3', '\x2', 
		'\x2', '\x2', '\xB6', '\x4D1', '\x3', '\x2', '\x2', '\x2', '\xB8', '\x4D6', 
		'\x3', '\x2', '\x2', '\x2', '\xBA', '\x4DA', '\x3', '\x2', '\x2', '\x2', 
		'\xBC', '\x4DC', '\x3', '\x2', '\x2', '\x2', '\xBE', '\x4DF', '\x3', '\x2', 
		'\x2', '\x2', '\xC0', '\x4EC', '\x3', '\x2', '\x2', '\x2', '\xC2', '\x4EE', 
		'\x3', '\x2', '\x2', '\x2', '\xC4', '\x4F5', '\x3', '\x2', '\x2', '\x2', 
		'\xC6', '\x4F9', '\x3', '\x2', '\x2', '\x2', '\xC8', '\x505', '\x3', '\x2', 
		'\x2', '\x2', '\xCA', '\x50F', '\x3', '\x2', '\x2', '\x2', '\xCC', '\x515', 
		'\x3', '\x2', '\x2', '\x2', '\xCE', '\x520', '\x3', '\x2', '\x2', '\x2', 
		'\xD0', '\x52C', '\x3', '\x2', '\x2', '\x2', '\xD2', '\x52E', '\x3', '\x2', 
		'\x2', '\x2', '\xD4', '\x539', '\x3', '\x2', '\x2', '\x2', '\xD6', '\x547', 
		'\x3', '\x2', '\x2', '\x2', '\xD8', '\x54D', '\x3', '\x2', '\x2', '\x2', 
		'\xDA', '\x54F', '\x3', '\x2', '\x2', '\x2', '\xDC', '\x556', '\x3', '\x2', 
		'\x2', '\x2', '\xDE', '\x56B', '\x3', '\x2', '\x2', '\x2', '\xE0', '\x56D', 
		'\x3', '\x2', '\x2', '\x2', '\xE2', '\x575', '\x3', '\x2', '\x2', '\x2', 
		'\xE4', '\x57E', '\x3', '\x2', '\x2', '\x2', '\xE6', '\x586', '\x3', '\x2', 
		'\x2', '\x2', '\xE8', '\x594', '\x3', '\x2', '\x2', '\x2', '\xEA', '\x5A7', 
		'\x3', '\x2', '\x2', '\x2', '\xEC', '\x5B8', '\x3', '\x2', '\x2', '\x2', 
		'\xEE', '\x5CB', '\x3', '\x2', '\x2', '\x2', '\xF0', '\x5CE', '\x3', '\x2', 
		'\x2', '\x2', '\xF2', '\x5D2', '\x3', '\x2', '\x2', '\x2', '\xF4', '\x5D4', 
		'\x3', '\x2', '\x2', '\x2', '\xF6', '\x5D7', '\x3', '\x2', '\x2', '\x2', 
		'\xF8', '\x5DB', '\x3', '\x2', '\x2', '\x2', '\xFA', '\x5E7', '\x3', '\x2', 
		'\x2', '\x2', '\xFC', '\x5F2', '\x3', '\x2', '\x2', '\x2', '\xFE', '\x602', 
		'\x3', '\x2', '\x2', '\x2', '\x100', '\x619', '\x3', '\x2', '\x2', '\x2', 
		'\x102', '\x61E', '\x3', '\x2', '\x2', '\x2', '\x104', '\x632', '\x3', 
		'\x2', '\x2', '\x2', '\x106', '\x639', '\x3', '\x2', '\x2', '\x2', '\x108', 
		'\x642', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x650', '\x3', '\x2', '\x2', 
		'\x2', '\x10C', '\x663', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x66A', 
		'\x3', '\x2', '\x2', '\x2', '\x110', '\x66F', '\x3', '\x2', '\x2', '\x2', 
		'\x112', '\x673', '\x3', '\x2', '\x2', '\x2', '\x114', '\x675', '\x3', 
		'\x2', '\x2', '\x2', '\x116', '\x683', '\x3', '\x2', '\x2', '\x2', '\x118', 
		'\x68E', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x690', '\x3', '\x2', '\x2', 
		'\x2', '\x11C', '\x6AE', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x6B1', 
		'\x3', '\x2', '\x2', '\x2', '\x120', '\x6B5', '\x3', '\x2', '\x2', '\x2', 
		'\x122', '\x6B7', '\x3', '\x2', '\x2', '\x2', '\x124', '\x6BD', '\x3', 
		'\x2', '\x2', '\x2', '\x126', '\x6D1', '\x3', '\x2', '\x2', '\x2', '\x128', 
		'\x6D3', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x6EF', '\x3', '\x2', '\x2', 
		'\x2', '\x12C', '\x6F2', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x6F6', 
		'\x3', '\x2', '\x2', '\x2', '\x130', '\x6F8', '\x3', '\x2', '\x2', '\x2', 
		'\x132', '\x6FC', '\x3', '\x2', '\x2', '\x2', '\x134', '\x6FF', '\x3', 
		'\x2', '\x2', '\x2', '\x136', '\x70E', '\x3', '\x2', '\x2', '\x2', '\x138', 
		'\x723', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x725', '\x3', '\x2', '\x2', 
		'\x2', '\x13C', '\x727', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x729', 
		'\x3', '\x2', '\x2', '\x2', '\x140', '\x72C', '\x3', '\x2', '\x2', '\x2', 
		'\x142', '\x730', '\x3', '\x2', '\x2', '\x2', '\x144', '\x734', '\x3', 
		'\x2', '\x2', '\x2', '\x146', '\x737', '\x3', '\x2', '\x2', '\x2', '\x148', 
		'\x745', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x750', '\x3', '\x2', '\x2', 
		'\x2', '\x14C', '\x752', '\x3', '\x2', '\x2', '\x2', '\x14E', '\x755', 
		'\x3', '\x2', '\x2', '\x2', '\x150', '\x75B', '\x3', '\x2', '\x2', '\x2', 
		'\x152', '\x761', '\x3', '\x2', '\x2', '\x2', '\x154', '\x76B', '\x3', 
		'\x2', '\x2', '\x2', '\x156', '\x776', '\x3', '\x2', '\x2', '\x2', '\x158', 
		'\x785', '\x3', '\x2', '\x2', '\x2', '\x15A', '\x797', '\x3', '\x2', '\x2', 
		'\x2', '\x15C', '\x799', '\x3', '\x2', '\x2', '\x2', '\x15E', '\x79B', 
		'\x3', '\x2', '\x2', '\x2', '\x160', '\x7AC', '\x3', '\x2', '\x2', '\x2', 
		'\x162', '\x7AE', '\x3', '\x2', '\x2', '\x2', '\x164', '\x7B8', '\x3', 
		'\x2', '\x2', '\x2', '\x166', '\x7BD', '\x3', '\x2', '\x2', '\x2', '\x168', 
		'\x7C2', '\x3', '\x2', '\x2', '\x2', '\x16A', '\x7C6', '\x3', '\x2', '\x2', 
		'\x2', '\x16C', '\x7CE', '\x3', '\x2', '\x2', '\x2', '\x16E', '\x7D2', 
		'\x3', '\x2', '\x2', '\x2', '\x170', '\x7E1', '\x3', '\x2', '\x2', '\x2', 
		'\x172', '\x7E3', '\x3', '\x2', '\x2', '\x2', '\x174', '\x7E9', '\x3', 
		'\x2', '\x2', '\x2', '\x176', '\x7EB', '\x3', '\x2', '\x2', '\x2', '\x178', 
		'\x7F2', '\x3', '\x2', '\x2', '\x2', '\x17A', '\x806', '\x3', '\x2', '\x2', 
		'\x2', '\x17C', '\x83B', '\x3', '\x2', '\x2', '\x2', '\x17E', '\x83D', 
		'\x3', '\x2', '\x2', '\x2', '\x180', '\x182', '\x5', 'z', '>', '\x2', 
		'\x181', '\x180', '\x3', '\x2', '\x2', '\x2', '\x181', '\x182', '\x3', 
		'\x2', '\x2', '\x2', '\x182', '\x183', '\x3', '\x2', '\x2', '\x2', '\x183', 
		'\x184', '\a', '\x2', '\x2', '\x3', '\x184', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '\x185', '\x187', '\x5', '\x17E', '\xC0', '\x2', '\x186', '\x185', 
		'\x3', '\x2', '\x2', '\x2', '\x187', '\x188', '\x3', '\x2', '\x2', '\x2', 
		'\x188', '\x186', '\x3', '\x2', '\x2', '\x2', '\x188', '\x189', '\x3', 
		'\x2', '\x2', '\x2', '\x189', '\x192', '\x3', '\x2', '\x2', '\x2', '\x18A', 
		'\x192', '\a', 'G', '\x2', '\x2', '\x18B', '\x18C', '\a', 'W', '\x2', 
		'\x2', '\x18C', '\x18D', '\x5', '\\', '/', '\x2', '\x18D', '\x18E', '\a', 
		'X', '\x2', '\x2', '\x18E', '\x192', '\x3', '\x2', '\x2', '\x2', '\x18F', 
		'\x192', '\x5', '\x6', '\x4', '\x2', '\x190', '\x192', '\x5', '\xE', '\b', 
		'\x2', '\x191', '\x186', '\x3', '\x2', '\x2', '\x2', '\x191', '\x18A', 
		'\x3', '\x2', '\x2', '\x2', '\x191', '\x18B', '\x3', '\x2', '\x2', '\x2', 
		'\x191', '\x18F', '\x3', '\x2', '\x2', '\x2', '\x191', '\x190', '\x3', 
		'\x2', '\x2', '\x2', '\x192', '\x5', '\x3', '\x2', '\x2', '\x2', '\x193', 
		'\x196', '\x5', '\b', '\x5', '\x2', '\x194', '\x196', '\x5', '\n', '\x6', 
		'\x2', '\x195', '\x193', '\x3', '\x2', '\x2', '\x2', '\x195', '\x194', 
		'\x3', '\x2', '\x2', '\x2', '\x196', '\a', '\x3', '\x2', '\x2', '\x2', 
		'\x197', '\x1A2', '\a', '\x86', '\x2', '\x2', '\x198', '\x1A2', '\x5', 
		'\x14C', '\xA7', '\x2', '\x199', '\x1A2', '\x5', '\x13E', '\xA0', '\x2', 
		'\x19A', '\x1A2', '\x5', '\x14E', '\xA8', '\x2', '\x19B', '\x19E', '\a', 
		'\x65', '\x2', '\x2', '\x19C', '\x19F', '\x5', '\x118', '\x8D', '\x2', 
		'\x19D', '\x19F', '\x5', '\xA4', 'S', '\x2', '\x19E', '\x19C', '\x3', 
		'\x2', '\x2', '\x2', '\x19E', '\x19D', '\x3', '\x2', '\x2', '\x2', '\x19F', 
		'\x1A2', '\x3', '\x2', '\x2', '\x2', '\x1A0', '\x1A2', '\x5', '\x15A', 
		'\xAE', '\x2', '\x1A1', '\x197', '\x3', '\x2', '\x2', '\x2', '\x1A1', 
		'\x198', '\x3', '\x2', '\x2', '\x2', '\x1A1', '\x199', '\x3', '\x2', '\x2', 
		'\x2', '\x1A1', '\x19A', '\x3', '\x2', '\x2', '\x2', '\x1A1', '\x19B', 
		'\x3', '\x2', '\x2', '\x2', '\x1A1', '\x1A0', '\x3', '\x2', '\x2', '\x2', 
		'\x1A2', '\t', '\x3', '\x2', '\x2', '\x2', '\x1A3', '\x1A5', '\x5', '\f', 
		'\a', '\x2', '\x1A4', '\x1A6', '\a', '\x46', '\x2', '\x2', '\x1A5', '\x1A4', 
		'\x3', '\x2', '\x2', '\x2', '\x1A5', '\x1A6', '\x3', '\x2', '\x2', '\x2', 
		'\x1A6', '\x1A7', '\x3', '\x2', '\x2', '\x2', '\x1A7', '\x1A8', '\x5', 
		'\b', '\x5', '\x2', '\x1A8', '\v', '\x3', '\x2', '\x2', '\x2', '\x1A9', 
		'\x1AD', '\b', '\a', '\x1', '\x2', '\x1AA', '\x1AE', '\x5', '\xA2', 'R', 
		'\x2', '\x1AB', '\x1AE', '\x5', '\xBA', '^', '\x2', '\x1AC', '\x1AE', 
		'\x5', '\xA4', 'S', '\x2', '\x1AD', '\x1AA', '\x3', '\x2', '\x2', '\x2', 
		'\x1AD', '\x1AB', '\x3', '\x2', '\x2', '\x2', '\x1AD', '\x1AC', '\x3', 
		'\x2', '\x2', '\x2', '\x1AD', '\x1AE', '\x3', '\x2', '\x2', '\x2', '\x1AE', 
		'\x1AF', '\x3', '\x2', '\x2', '\x2', '\x1AF', '\x1B0', '\a', '\x81', '\x2', 
		'\x2', '\x1B0', '\x1BC', '\x3', '\x2', '\x2', '\x2', '\x1B1', '\x1B7', 
		'\f', '\x3', '\x2', '\x2', '\x1B2', '\x1B8', '\a', '\x86', '\x2', '\x2', 
		'\x1B3', '\x1B5', '\a', '\x46', '\x2', '\x2', '\x1B4', '\x1B3', '\x3', 
		'\x2', '\x2', '\x2', '\x1B4', '\x1B5', '\x3', '\x2', '\x2', '\x2', '\x1B5', 
		'\x1B6', '\x3', '\x2', '\x2', '\x2', '\x1B6', '\x1B8', '\x5', '\x158', 
		'\xAD', '\x2', '\x1B7', '\x1B2', '\x3', '\x2', '\x2', '\x2', '\x1B7', 
		'\x1B4', '\x3', '\x2', '\x2', '\x2', '\x1B8', '\x1B9', '\x3', '\x2', '\x2', 
		'\x2', '\x1B9', '\x1BB', '\a', '\x81', '\x2', '\x2', '\x1BA', '\x1B1', 
		'\x3', '\x2', '\x2', '\x2', '\x1BB', '\x1BE', '\x3', '\x2', '\x2', '\x2', 
		'\x1BC', '\x1BA', '\x3', '\x2', '\x2', '\x2', '\x1BC', '\x1BD', '\x3', 
		'\x2', '\x2', '\x2', '\x1BD', '\r', '\x3', '\x2', '\x2', '\x2', '\x1BE', 
		'\x1BC', '\x3', '\x2', '\x2', '\x2', '\x1BF', '\x1C1', '\x5', '\x10', 
		'\t', '\x2', '\x1C0', '\x1C2', '\x5', '\x1E', '\x10', '\x2', '\x1C1', 
		'\x1C0', '\x3', '\x2', '\x2', '\x2', '\x1C1', '\x1C2', '\x3', '\x2', '\x2', 
		'\x2', '\x1C2', '\x1C3', '\x3', '\x2', '\x2', '\x2', '\x1C3', '\x1C4', 
		'\x5', '\x66', '\x34', '\x2', '\x1C4', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\x1C5', '\x1C7', '\a', 'Y', '\x2', '\x2', '\x1C6', '\x1C8', '\x5', '\x12', 
		'\n', '\x2', '\x1C7', '\x1C6', '\x3', '\x2', '\x2', '\x2', '\x1C7', '\x1C8', 
		'\x3', '\x2', '\x2', '\x2', '\x1C8', '\x1C9', '\x3', '\x2', '\x2', '\x2', 
		'\x1C9', '\x1CA', '\a', 'Z', '\x2', '\x2', '\x1CA', '\x11', '\x3', '\x2', 
		'\x2', '\x2', '\x1CB', '\x1D2', '\x5', '\x16', '\f', '\x2', '\x1CC', '\x1CF', 
		'\x5', '\x14', '\v', '\x2', '\x1CD', '\x1CE', '\a', '|', '\x2', '\x2', 
		'\x1CE', '\x1D0', '\x5', '\x16', '\f', '\x2', '\x1CF', '\x1CD', '\x3', 
		'\x2', '\x2', '\x2', '\x1CF', '\x1D0', '\x3', '\x2', '\x2', '\x2', '\x1D0', 
		'\x1D2', '\x3', '\x2', '\x2', '\x2', '\x1D1', '\x1CB', '\x3', '\x2', '\x2', 
		'\x2', '\x1D1', '\x1CC', '\x3', '\x2', '\x2', '\x2', '\x1D2', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '\x1D3', '\x1D4', '\t', '\x2', '\x2', '\x2', 
		'\x1D4', '\x15', '\x3', '\x2', '\x2', '\x2', '\x1D5', '\x1DA', '\x5', 
		'\x18', '\r', '\x2', '\x1D6', '\x1D7', '\a', '|', '\x2', '\x2', '\x1D7', 
		'\x1D9', '\x5', '\x18', '\r', '\x2', '\x1D8', '\x1D6', '\x3', '\x2', '\x2', 
		'\x2', '\x1D9', '\x1DC', '\x3', '\x2', '\x2', '\x2', '\x1DA', '\x1D8', 
		'\x3', '\x2', '\x2', '\x2', '\x1DA', '\x1DB', '\x3', '\x2', '\x2', '\x2', 
		'\x1DB', '\x1DE', '\x3', '\x2', '\x2', '\x2', '\x1DC', '\x1DA', '\x3', 
		'\x2', '\x2', '\x2', '\x1DD', '\x1DF', '\a', '\x85', '\x2', '\x2', '\x1DE', 
		'\x1DD', '\x3', '\x2', '\x2', '\x2', '\x1DE', '\x1DF', '\x3', '\x2', '\x2', 
		'\x2', '\x1DF', '\x17', '\x3', '\x2', '\x2', '\x2', '\x1E0', '\x1E3', 
		'\x5', '\x1A', '\xE', '\x2', '\x1E1', '\x1E3', '\x5', '\x1C', '\xF', '\x2', 
		'\x1E2', '\x1E0', '\x3', '\x2', '\x2', '\x2', '\x1E2', '\x1E1', '\x3', 
		'\x2', '\x2', '\x2', '\x1E3', '\x19', '\x3', '\x2', '\x2', '\x2', '\x1E4', 
		'\x1E6', '\a', '\x63', '\x2', '\x2', '\x1E5', '\x1E4', '\x3', '\x2', '\x2', 
		'\x2', '\x1E5', '\x1E6', '\x3', '\x2', '\x2', '\x2', '\x1E6', '\x1E7', 
		'\x3', '\x2', '\x2', '\x2', '\x1E7', '\x1EA', '\a', '\x86', '\x2', '\x2', 
		'\x1E8', '\x1EA', '\a', 'G', '\x2', '\x2', '\x1E9', '\x1E5', '\x3', '\x2', 
		'\x2', '\x2', '\x1E9', '\x1E8', '\x3', '\x2', '\x2', '\x2', '\x1EA', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\x1EB', '\x1ED', '\a', '\x63', '\x2', '\x2', 
		'\x1EC', '\x1EB', '\x3', '\x2', '\x2', '\x2', '\x1EC', '\x1ED', '\x3', 
		'\x2', '\x2', '\x2', '\x1ED', '\x1EE', '\x3', '\x2', '\x2', '\x2', '\x1EE', 
		'\x1EF', '\a', '\x86', '\x2', '\x2', '\x1EF', '\x1F0', '\x5', '\x10E', 
		'\x88', '\x2', '\x1F0', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x1F1', '\x1F3', 
		'\a', 'W', '\x2', '\x2', '\x1F2', '\x1F4', '\x5', '\x104', '\x83', '\x2', 
		'\x1F3', '\x1F2', '\x3', '\x2', '\x2', '\x2', '\x1F3', '\x1F4', '\x3', 
		'\x2', '\x2', '\x2', '\x1F4', '\x1F5', '\x3', '\x2', '\x2', '\x2', '\x1F5', 
		'\x1F7', '\a', 'X', '\x2', '\x2', '\x1F6', '\x1F8', '\a', '\x31', '\x2', 
		'\x2', '\x1F7', '\x1F6', '\x3', '\x2', '\x2', '\x2', '\x1F7', '\x1F8', 
		'\x3', '\x2', '\x2', '\x2', '\x1F8', '\x1FA', '\x3', '\x2', '\x2', '\x2', 
		'\x1F9', '\x1FB', '\x5', '\x174', '\xBB', '\x2', '\x1FA', '\x1F9', '\x3', 
		'\x2', '\x2', '\x2', '\x1FA', '\x1FB', '\x3', '\x2', '\x2', '\x2', '\x1FB', 
		'\x1FD', '\x3', '\x2', '\x2', '\x2', '\x1FC', '\x1FE', '\x5', '\xCE', 
		'h', '\x2', '\x1FD', '\x1FC', '\x3', '\x2', '\x2', '\x2', '\x1FD', '\x1FE', 
		'\x3', '\x2', '\x2', '\x2', '\x1FE', '\x200', '\x3', '\x2', '\x2', '\x2', 
		'\x1FF', '\x201', '\x5', '\xEC', 'w', '\x2', '\x200', '\x1FF', '\x3', 
		'\x2', '\x2', '\x2', '\x200', '\x201', '\x3', '\x2', '\x2', '\x2', '\x201', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\x202', '\x203', '\b', '\x11', '\x1', 
		'\x2', '\x203', '\x221', '\x5', '\x4', '\x3', '\x2', '\x204', '\x207', 
		'\x5', '\xA0', 'Q', '\x2', '\x205', '\x207', '\x5', '\x162', '\xB2', '\x2', 
		'\x206', '\x204', '\x3', '\x2', '\x2', '\x2', '\x206', '\x205', '\x3', 
		'\x2', '\x2', '\x2', '\x207', '\x20E', '\x3', '\x2', '\x2', '\x2', '\x208', 
		'\x20A', '\a', 'W', '\x2', '\x2', '\x209', '\x20B', '\x5', '$', '\x13', 
		'\x2', '\x20A', '\x209', '\x3', '\x2', '\x2', '\x2', '\x20A', '\x20B', 
		'\x3', '\x2', '\x2', '\x2', '\x20B', '\x20C', '\x3', '\x2', '\x2', '\x2', 
		'\x20C', '\x20F', '\a', 'X', '\x2', '\x2', '\x20D', '\x20F', '\x5', '\x116', 
		'\x8C', '\x2', '\x20E', '\x208', '\x3', '\x2', '\x2', '\x2', '\x20E', 
		'\x20D', '\x3', '\x2', '\x2', '\x2', '\x20F', '\x221', '\x3', '\x2', '\x2', 
		'\x2', '\x210', '\x211', '\t', '\x3', '\x2', '\x2', '\x211', '\x212', 
		'\a', 'h', '\x2', '\x2', '\x212', '\x213', '\x5', '\xF8', '}', '\x2', 
		'\x213', '\x214', '\a', 'i', '\x2', '\x2', '\x214', '\x215', '\a', 'W', 
		'\x2', '\x2', '\x215', '\x216', '\x5', '\\', '/', '\x2', '\x216', '\x217', 
		'\a', 'X', '\x2', '\x2', '\x217', '\x221', '\x3', '\x2', '\x2', '\x2', 
		'\x218', '\x219', '\x5', '\"', '\x12', '\x2', '\x219', '\x21C', '\a', 
		'W', '\x2', '\x2', '\x21A', '\x21D', '\x5', '\\', '/', '\x2', '\x21B', 
		'\x21D', '\x5', '\xF8', '}', '\x2', '\x21C', '\x21A', '\x3', '\x2', '\x2', 
		'\x2', '\x21C', '\x21B', '\x3', '\x2', '\x2', '\x2', '\x21D', '\x21E', 
		'\x3', '\x2', '\x2', '\x2', '\x21E', '\x21F', '\a', 'X', '\x2', '\x2', 
		'\x21F', '\x221', '\x3', '\x2', '\x2', '\x2', '\x220', '\x202', '\x3', 
		'\x2', '\x2', '\x2', '\x220', '\x206', '\x3', '\x2', '\x2', '\x2', '\x220', 
		'\x210', '\x3', '\x2', '\x2', '\x2', '\x220', '\x218', '\x3', '\x2', '\x2', 
		'\x2', '\x221', '\x23D', '\x3', '\x2', '\x2', '\x2', '\x222', '\x223', 
		'\f', '\t', '\x2', '\x2', '\x223', '\x226', '\a', 'Y', '\x2', '\x2', '\x224', 
		'\x227', '\x5', '\\', '/', '\x2', '\x225', '\x227', '\x5', '\x116', '\x8C', 
		'\x2', '\x226', '\x224', '\x3', '\x2', '\x2', '\x2', '\x226', '\x225', 
		'\x3', '\x2', '\x2', '\x2', '\x227', '\x228', '\x3', '\x2', '\x2', '\x2', 
		'\x228', '\x229', '\a', 'Z', '\x2', '\x2', '\x229', '\x23C', '\x3', '\x2', 
		'\x2', '\x2', '\x22A', '\x22B', '\f', '\b', '\x2', '\x2', '\x22B', '\x22D', 
		'\a', 'W', '\x2', '\x2', '\x22C', '\x22E', '\x5', '$', '\x13', '\x2', 
		'\x22D', '\x22C', '\x3', '\x2', '\x2', '\x2', '\x22D', '\x22E', '\x3', 
		'\x2', '\x2', '\x2', '\x22E', '\x22F', '\x3', '\x2', '\x2', '\x2', '\x22F', 
		'\x23C', '\a', 'X', '\x2', '\x2', '\x230', '\x231', '\f', '\x6', '\x2', 
		'\x2', '\x231', '\x237', '\t', '\x4', '\x2', '\x2', '\x232', '\x234', 
		'\a', '\x46', '\x2', '\x2', '\x233', '\x232', '\x3', '\x2', '\x2', '\x2', 
		'\x233', '\x234', '\x3', '\x2', '\x2', '\x2', '\x234', '\x235', '\x3', 
		'\x2', '\x2', '\x2', '\x235', '\x238', '\x5', '\x6', '\x4', '\x2', '\x236', 
		'\x238', '\x5', '&', '\x14', '\x2', '\x237', '\x233', '\x3', '\x2', '\x2', 
		'\x2', '\x237', '\x236', '\x3', '\x2', '\x2', '\x2', '\x238', '\x23C', 
		'\x3', '\x2', '\x2', '\x2', '\x239', '\x23A', '\f', '\x5', '\x2', '\x2', 
		'\x23A', '\x23C', '\t', '\x5', '\x2', '\x2', '\x23B', '\x222', '\x3', 
		'\x2', '\x2', '\x2', '\x23B', '\x22A', '\x3', '\x2', '\x2', '\x2', '\x23B', 
		'\x230', '\x3', '\x2', '\x2', '\x2', '\x23B', '\x239', '\x3', '\x2', '\x2', 
		'\x2', '\x23C', '\x23F', '\x3', '\x2', '\x2', '\x2', '\x23D', '\x23B', 
		'\x3', '\x2', '\x2', '\x2', '\x23D', '\x23E', '\x3', '\x2', '\x2', '\x2', 
		'\x23E', '!', '\x3', '\x2', '\x2', '\x2', '\x23F', '\x23D', '\x3', '\x2', 
		'\x2', '\x2', '\x240', '\x241', '\a', 'M', '\x2', '\x2', '\x241', '#', 
		'\x3', '\x2', '\x2', '\x2', '\x242', '\x243', '\x5', '\x114', '\x8B', 
		'\x2', '\x243', '%', '\x3', '\x2', '\x2', '\x2', '\x244', '\x246', '\x5', 
		'\f', '\a', '\x2', '\x245', '\x244', '\x3', '\x2', '\x2', '\x2', '\x245', 
		'\x246', '\x3', '\x2', '\x2', '\x2', '\x246', '\x24A', '\x3', '\x2', '\x2', 
		'\x2', '\x247', '\x248', '\x5', '\xA2', 'R', '\x2', '\x248', '\x249', 
		'\a', '\x81', '\x2', '\x2', '\x249', '\x24B', '\x3', '\x2', '\x2', '\x2', 
		'\x24A', '\x247', '\x3', '\x2', '\x2', '\x2', '\x24A', '\x24B', '\x3', 
		'\x2', '\x2', '\x2', '\x24B', '\x24C', '\x3', '\x2', '\x2', '\x2', '\x24C', 
		'\x24D', '\a', '\x65', '\x2', '\x2', '\x24D', '\x258', '\x5', '\xA2', 
		'R', '\x2', '\x24E', '\x24F', '\x5', '\f', '\a', '\x2', '\x24F', '\x250', 
		'\a', '\x46', '\x2', '\x2', '\x250', '\x251', '\x5', '\x158', '\xAD', 
		'\x2', '\x251', '\x252', '\a', '\x81', '\x2', '\x2', '\x252', '\x253', 
		'\a', '\x65', '\x2', '\x2', '\x253', '\x254', '\x5', '\xA2', 'R', '\x2', 
		'\x254', '\x258', '\x3', '\x2', '\x2', '\x2', '\x255', '\x256', '\a', 
		'\x65', '\x2', '\x2', '\x256', '\x258', '\x5', '\xA4', 'S', '\x2', '\x257', 
		'\x245', '\x3', '\x2', '\x2', '\x2', '\x257', '\x24E', '\x3', '\x2', '\x2', 
		'\x2', '\x257', '\x255', '\x3', '\x2', '\x2', '\x2', '\x258', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\x259', '\x275', '\x5', ' ', '\x11', '\x2', '\x25A', 
		'\x25F', '\a', 'z', '\x2', '\x2', '\x25B', '\x25F', '\a', '{', '\x2', 
		'\x2', '\x25C', '\x25F', '\x5', '*', '\x16', '\x2', '\x25D', '\x25F', 
		'\a', '@', '\x2', '\x2', '\x25E', '\x25A', '\x3', '\x2', '\x2', '\x2', 
		'\x25E', '\x25B', '\x3', '\x2', '\x2', '\x2', '\x25E', '\x25C', '\x3', 
		'\x2', '\x2', '\x2', '\x25E', '\x25D', '\x3', '\x2', '\x2', '\x2', '\x25F', 
		'\x260', '\x3', '\x2', '\x2', '\x2', '\x260', '\x275', '\x5', '(', '\x15', 
		'\x2', '\x261', '\x26A', '\a', '@', '\x2', '\x2', '\x262', '\x263', '\a', 
		'W', '\x2', '\x2', '\x263', '\x264', '\x5', '\xF8', '}', '\x2', '\x264', 
		'\x265', '\a', 'X', '\x2', '\x2', '\x265', '\x26B', '\x3', '\x2', '\x2', 
		'\x2', '\x266', '\x267', '\a', '\x85', '\x2', '\x2', '\x267', '\x268', 
		'\a', 'W', '\x2', '\x2', '\x268', '\x269', '\a', '\x86', '\x2', '\x2', 
		'\x269', '\x26B', '\a', 'X', '\x2', '\x2', '\x26A', '\x262', '\x3', '\x2', 
		'\x2', '\x2', '\x26A', '\x266', '\x3', '\x2', '\x2', '\x2', '\x26B', '\x275', 
		'\x3', '\x2', '\x2', '\x2', '\x26C', '\x26D', '\a', '\r', '\x2', '\x2', 
		'\x26D', '\x26E', '\a', 'W', '\x2', '\x2', '\x26E', '\x26F', '\x5', '\xF8', 
		'}', '\x2', '\x26F', '\x270', '\a', 'X', '\x2', '\x2', '\x270', '\x275', 
		'\x3', '\x2', '\x2', '\x2', '\x271', '\x275', '\x5', ':', '\x1E', '\x2', 
		'\x272', '\x275', '\x5', ',', '\x17', '\x2', '\x273', '\x275', '\x5', 
		'\x38', '\x1D', '\x2', '\x274', '\x259', '\x3', '\x2', '\x2', '\x2', '\x274', 
		'\x25E', '\x3', '\x2', '\x2', '\x2', '\x274', '\x261', '\x3', '\x2', '\x2', 
		'\x2', '\x274', '\x26C', '\x3', '\x2', '\x2', '\x2', '\x274', '\x271', 
		'\x3', '\x2', '\x2', '\x2', '\x274', '\x272', '\x3', '\x2', '\x2', '\x2', 
		'\x274', '\x273', '\x3', '\x2', '\x2', '\x2', '\x275', ')', '\x3', '\x2', 
		'\x2', '\x2', '\x276', '\x277', '\t', '\x6', '\x2', '\x2', '\x277', '+', 
		'\x3', '\x2', '\x2', '\x2', '\x278', '\x27A', '\a', '\x81', '\x2', '\x2', 
		'\x279', '\x278', '\x3', '\x2', '\x2', '\x2', '\x279', '\x27A', '\x3', 
		'\x2', '\x2', '\x2', '\x27A', '\x27B', '\x3', '\x2', '\x2', '\x2', '\x27B', 
		'\x27D', '\a', '\x33', '\x2', '\x2', '\x27C', '\x27E', '\x5', '.', '\x18', 
		'\x2', '\x27D', '\x27C', '\x3', '\x2', '\x2', '\x2', '\x27D', '\x27E', 
		'\x3', '\x2', '\x2', '\x2', '\x27E', '\x284', '\x3', '\x2', '\x2', '\x2', 
		'\x27F', '\x285', '\x5', '\x30', '\x19', '\x2', '\x280', '\x281', '\a', 
		'W', '\x2', '\x2', '\x281', '\x282', '\x5', '\xF8', '}', '\x2', '\x282', 
		'\x283', '\a', 'X', '\x2', '\x2', '\x283', '\x285', '\x3', '\x2', '\x2', 
		'\x2', '\x284', '\x27F', '\x3', '\x2', '\x2', '\x2', '\x284', '\x280', 
		'\x3', '\x2', '\x2', '\x2', '\x285', '\x287', '\x3', '\x2', '\x2', '\x2', 
		'\x286', '\x288', '\x5', '\x36', '\x1C', '\x2', '\x287', '\x286', '\x3', 
		'\x2', '\x2', '\x2', '\x287', '\x288', '\x3', '\x2', '\x2', '\x2', '\x288', 
		'-', '\x3', '\x2', '\x2', '\x2', '\x289', '\x28A', '\a', 'W', '\x2', '\x2', 
		'\x28A', '\x28B', '\x5', '$', '\x13', '\x2', '\x28B', '\x28C', '\a', 'X', 
		'\x2', '\x2', '\x28C', '/', '\x3', '\x2', '\x2', '\x2', '\x28D', '\x28F', 
		'\x5', '\x98', 'M', '\x2', '\x28E', '\x290', '\x5', '\x32', '\x1A', '\x2', 
		'\x28F', '\x28E', '\x3', '\x2', '\x2', '\x2', '\x28F', '\x290', '\x3', 
		'\x2', '\x2', '\x2', '\x290', '\x31', '\x3', '\x2', '\x2', '\x2', '\x291', 
		'\x293', '\x5', '\xEE', 'x', '\x2', '\x292', '\x294', '\x5', '\x32', '\x1A', 
		'\x2', '\x293', '\x292', '\x3', '\x2', '\x2', '\x2', '\x293', '\x294', 
		'\x3', '\x2', '\x2', '\x2', '\x294', '\x297', '\x3', '\x2', '\x2', '\x2', 
		'\x295', '\x297', '\x5', '\x34', '\x1B', '\x2', '\x296', '\x291', '\x3', 
		'\x2', '\x2', '\x2', '\x296', '\x295', '\x3', '\x2', '\x2', '\x2', '\x297', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x298', '\x299', '\b', '\x1B', '\x1', 
		'\x2', '\x299', '\x29A', '\a', 'Y', '\x2', '\x2', '\x29A', '\x29B', '\x5', 
		'\\', '/', '\x2', '\x29B', '\x29D', '\a', 'Z', '\x2', '\x2', '\x29C', 
		'\x29E', '\x5', '\xCE', 'h', '\x2', '\x29D', '\x29C', '\x3', '\x2', '\x2', 
		'\x2', '\x29D', '\x29E', '\x3', '\x2', '\x2', '\x2', '\x29E', '\x2A8', 
		'\x3', '\x2', '\x2', '\x2', '\x29F', '\x2A0', '\f', '\x3', '\x2', '\x2', 
		'\x2A0', '\x2A1', '\a', 'Y', '\x2', '\x2', '\x2A1', '\x2A2', '\x5', '^', 
		'\x30', '\x2', '\x2A2', '\x2A4', '\a', 'Z', '\x2', '\x2', '\x2A3', '\x2A5', 
		'\x5', '\xCE', 'h', '\x2', '\x2A4', '\x2A3', '\x3', '\x2', '\x2', '\x2', 
		'\x2A4', '\x2A5', '\x3', '\x2', '\x2', '\x2', '\x2A5', '\x2A7', '\x3', 
		'\x2', '\x2', '\x2', '\x2A6', '\x29F', '\x3', '\x2', '\x2', '\x2', '\x2A7', 
		'\x2AA', '\x3', '\x2', '\x2', '\x2', '\x2A8', '\x2A6', '\x3', '\x2', '\x2', 
		'\x2', '\x2A8', '\x2A9', '\x3', '\x2', '\x2', '\x2', '\x2A9', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x2AA', '\x2A8', '\x3', '\x2', '\x2', '\x2', 
		'\x2AB', '\x2AD', '\a', 'W', '\x2', '\x2', '\x2AC', '\x2AE', '\x5', '$', 
		'\x13', '\x2', '\x2AD', '\x2AC', '\x3', '\x2', '\x2', '\x2', '\x2AD', 
		'\x2AE', '\x3', '\x2', '\x2', '\x2', '\x2AE', '\x2AF', '\x3', '\x2', '\x2', 
		'\x2', '\x2AF', '\x2B2', '\a', 'X', '\x2', '\x2', '\x2B0', '\x2B2', '\x5', 
		'\x116', '\x8C', '\x2', '\x2B1', '\x2AB', '\x3', '\x2', '\x2', '\x2', 
		'\x2B1', '\x2B0', '\x3', '\x2', '\x2', '\x2', '\x2B2', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x2B3', '\x2B5', '\a', '\x81', '\x2', '\x2', '\x2B4', 
		'\x2B3', '\x3', '\x2', '\x2', '\x2', '\x2B4', '\x2B5', '\x3', '\x2', '\x2', 
		'\x2', '\x2B5', '\x2B6', '\x3', '\x2', '\x2', '\x2', '\x2B6', '\x2B9', 
		'\a', '\x1E', '\x2', '\x2', '\x2B7', '\x2B8', '\a', 'Y', '\x2', '\x2', 
		'\x2B8', '\x2BA', '\a', 'Z', '\x2', '\x2', '\x2B9', '\x2B7', '\x3', '\x2', 
		'\x2', '\x2', '\x2B9', '\x2BA', '\x3', '\x2', '\x2', '\x2', '\x2BA', '\x2BB', 
		'\x3', '\x2', '\x2', '\x2', '\x2BB', '\x2BC', '\x5', '<', '\x1F', '\x2', 
		'\x2BC', '\x39', '\x3', '\x2', '\x2', '\x2', '\x2BD', '\x2BE', '\a', '\x34', 
		'\x2', '\x2', '\x2BE', '\x2BF', '\a', 'W', '\x2', '\x2', '\x2BF', '\x2C0', 
		'\x5', '\\', '/', '\x2', '\x2C0', '\x2C1', '\a', 'X', '\x2', '\x2', '\x2C1', 
		';', '\x3', '\x2', '\x2', '\x2', '\x2C2', '\x2C9', '\x5', '(', '\x15', 
		'\x2', '\x2C3', '\x2C4', '\a', 'W', '\x2', '\x2', '\x2C4', '\x2C5', '\x5', 
		'\xF8', '}', '\x2', '\x2C5', '\x2C6', '\a', 'X', '\x2', '\x2', '\x2C6', 
		'\x2C7', '\x5', '<', '\x1F', '\x2', '\x2C7', '\x2C9', '\x3', '\x2', '\x2', 
		'\x2', '\x2C8', '\x2C2', '\x3', '\x2', '\x2', '\x2', '\x2C8', '\x2C3', 
		'\x3', '\x2', '\x2', '\x2', '\x2C9', '=', '\x3', '\x2', '\x2', '\x2', 
		'\x2CA', '\x2CF', '\x5', '<', '\x1F', '\x2', '\x2CB', '\x2CC', '\t', '\a', 
		'\x2', '\x2', '\x2CC', '\x2CE', '\x5', '<', '\x1F', '\x2', '\x2CD', '\x2CB', 
		'\x3', '\x2', '\x2', '\x2', '\x2CE', '\x2D1', '\x3', '\x2', '\x2', '\x2', 
		'\x2CF', '\x2CD', '\x3', '\x2', '\x2', '\x2', '\x2CF', '\x2D0', '\x3', 
		'\x2', '\x2', '\x2', '\x2D0', '?', '\x3', '\x2', '\x2', '\x2', '\x2D1', 
		'\x2CF', '\x3', '\x2', '\x2', '\x2', '\x2D2', '\x2D7', '\x5', '>', ' ', 
		'\x2', '\x2D3', '\x2D4', '\t', '\b', '\x2', '\x2', '\x2D4', '\x2D6', '\x5', 
		'>', ' ', '\x2', '\x2D5', '\x2D3', '\x3', '\x2', '\x2', '\x2', '\x2D6', 
		'\x2D9', '\x3', '\x2', '\x2', '\x2', '\x2D7', '\x2D5', '\x3', '\x2', '\x2', 
		'\x2', '\x2D7', '\x2D8', '\x3', '\x2', '\x2', '\x2', '\x2D8', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\x2D9', '\x2D7', '\x3', '\x2', '\x2', '\x2', 
		'\x2DA', '\x2DF', '\x5', '@', '!', '\x2', '\x2DB', '\x2DC', '\t', '\t', 
		'\x2', '\x2', '\x2DC', '\x2DE', '\x5', '@', '!', '\x2', '\x2DD', '\x2DB', 
		'\x3', '\x2', '\x2', '\x2', '\x2DE', '\x2E1', '\x3', '\x2', '\x2', '\x2', 
		'\x2DF', '\x2DD', '\x3', '\x2', '\x2', '\x2', '\x2DF', '\x2E0', '\x3', 
		'\x2', '\x2', '\x2', '\x2E0', '\x43', '\x3', '\x2', '\x2', '\x2', '\x2E1', 
		'\x2DF', '\x3', '\x2', '\x2', '\x2', '\x2E2', '\x2E8', '\x5', '\x42', 
		'\"', '\x2', '\x2E3', '\x2E4', '\x5', '\x46', '$', '\x2', '\x2E4', '\x2E5', 
		'\x5', '\x42', '\"', '\x2', '\x2E5', '\x2E7', '\x3', '\x2', '\x2', '\x2', 
		'\x2E6', '\x2E3', '\x3', '\x2', '\x2', '\x2', '\x2E7', '\x2EA', '\x3', 
		'\x2', '\x2', '\x2', '\x2E8', '\x2E6', '\x3', '\x2', '\x2', '\x2', '\x2E8', 
		'\x2E9', '\x3', '\x2', '\x2', '\x2', '\x2E9', '\x45', '\x3', '\x2', '\x2', 
		'\x2', '\x2EA', '\x2E8', '\x3', '\x2', '\x2', '\x2', '\x2EB', '\x2EC', 
		'\a', 'i', '\x2', '\x2', '\x2EC', '\x2F0', '\a', 'i', '\x2', '\x2', '\x2ED', 
		'\x2EE', '\a', 'h', '\x2', '\x2', '\x2EE', '\x2F0', '\a', 'h', '\x2', 
		'\x2', '\x2EF', '\x2EB', '\x3', '\x2', '\x2', '\x2', '\x2EF', '\x2ED', 
		'\x3', '\x2', '\x2', '\x2', '\x2F0', 'G', '\x3', '\x2', '\x2', '\x2', 
		'\x2F1', '\x2F6', '\x5', '\x44', '#', '\x2', '\x2F2', '\x2F3', '\t', '\n', 
		'\x2', '\x2', '\x2F3', '\x2F5', '\x5', '\x44', '#', '\x2', '\x2F4', '\x2F2', 
		'\x3', '\x2', '\x2', '\x2', '\x2F5', '\x2F8', '\x3', '\x2', '\x2', '\x2', 
		'\x2F6', '\x2F4', '\x3', '\x2', '\x2', '\x2', '\x2F6', '\x2F7', '\x3', 
		'\x2', '\x2', '\x2', '\x2F7', 'I', '\x3', '\x2', '\x2', '\x2', '\x2F8', 
		'\x2F6', '\x3', '\x2', '\x2', '\x2', '\x2F9', '\x2FE', '\x5', 'H', '%', 
		'\x2', '\x2FA', '\x2FB', '\t', '\v', '\x2', '\x2', '\x2FB', '\x2FD', '\x5', 
		'H', '%', '\x2', '\x2FC', '\x2FA', '\x3', '\x2', '\x2', '\x2', '\x2FD', 
		'\x300', '\x3', '\x2', '\x2', '\x2', '\x2FE', '\x2FC', '\x3', '\x2', '\x2', 
		'\x2', '\x2FE', '\x2FF', '\x3', '\x2', '\x2', '\x2', '\x2FF', 'K', '\x3', 
		'\x2', '\x2', '\x2', '\x300', '\x2FE', '\x3', '\x2', '\x2', '\x2', '\x301', 
		'\x306', '\x5', 'J', '&', '\x2', '\x302', '\x303', '\a', '\x63', '\x2', 
		'\x2', '\x303', '\x305', '\x5', 'J', '&', '\x2', '\x304', '\x302', '\x3', 
		'\x2', '\x2', '\x2', '\x305', '\x308', '\x3', '\x2', '\x2', '\x2', '\x306', 
		'\x304', '\x3', '\x2', '\x2', '\x2', '\x306', '\x307', '\x3', '\x2', '\x2', 
		'\x2', '\x307', 'M', '\x3', '\x2', '\x2', '\x2', '\x308', '\x306', '\x3', 
		'\x2', '\x2', '\x2', '\x309', '\x30E', '\x5', 'L', '\'', '\x2', '\x30A', 
		'\x30B', '\a', '\x62', '\x2', '\x2', '\x30B', '\x30D', '\x5', 'L', '\'', 
		'\x2', '\x30C', '\x30A', '\x3', '\x2', '\x2', '\x2', '\x30D', '\x310', 
		'\x3', '\x2', '\x2', '\x2', '\x30E', '\x30C', '\x3', '\x2', '\x2', '\x2', 
		'\x30E', '\x30F', '\x3', '\x2', '\x2', '\x2', '\x30F', 'O', '\x3', '\x2', 
		'\x2', '\x2', '\x310', '\x30E', '\x3', '\x2', '\x2', '\x2', '\x311', '\x316', 
		'\x5', 'N', '(', '\x2', '\x312', '\x313', '\a', '\x64', '\x2', '\x2', 
		'\x313', '\x315', '\x5', 'N', '(', '\x2', '\x314', '\x312', '\x3', '\x2', 
		'\x2', '\x2', '\x315', '\x318', '\x3', '\x2', '\x2', '\x2', '\x316', '\x314', 
		'\x3', '\x2', '\x2', '\x2', '\x316', '\x317', '\x3', '\x2', '\x2', '\x2', 
		'\x317', 'Q', '\x3', '\x2', '\x2', '\x2', '\x318', '\x316', '\x3', '\x2', 
		'\x2', '\x2', '\x319', '\x31E', '\x5', 'P', ')', '\x2', '\x31A', '\x31B', 
		'\a', 'x', '\x2', '\x2', '\x31B', '\x31D', '\x5', 'P', ')', '\x2', '\x31C', 
		'\x31A', '\x3', '\x2', '\x2', '\x2', '\x31D', '\x320', '\x3', '\x2', '\x2', 
		'\x2', '\x31E', '\x31C', '\x3', '\x2', '\x2', '\x2', '\x31E', '\x31F', 
		'\x3', '\x2', '\x2', '\x2', '\x31F', 'S', '\x3', '\x2', '\x2', '\x2', 
		'\x320', '\x31E', '\x3', '\x2', '\x2', '\x2', '\x321', '\x326', '\x5', 
		'R', '*', '\x2', '\x322', '\x323', '\a', 'y', '\x2', '\x2', '\x323', '\x325', 
		'\x5', 'R', '*', '\x2', '\x324', '\x322', '\x3', '\x2', '\x2', '\x2', 
		'\x325', '\x328', '\x3', '\x2', '\x2', '\x2', '\x326', '\x324', '\x3', 
		'\x2', '\x2', '\x2', '\x326', '\x327', '\x3', '\x2', '\x2', '\x2', '\x327', 
		'U', '\x3', '\x2', '\x2', '\x2', '\x328', '\x326', '\x3', '\x2', '\x2', 
		'\x2', '\x329', '\x32F', '\x5', 'T', '+', '\x2', '\x32A', '\x32B', '\a', 
		'\x7F', '\x2', '\x2', '\x32B', '\x32C', '\x5', '\\', '/', '\x2', '\x32C', 
		'\x32D', '\a', '\x80', '\x2', '\x2', '\x32D', '\x32E', '\x5', 'X', '-', 
		'\x2', '\x32E', '\x330', '\x3', '\x2', '\x2', '\x2', '\x32F', '\x32A', 
		'\x3', '\x2', '\x2', '\x2', '\x32F', '\x330', '\x3', '\x2', '\x2', '\x2', 
		'\x330', 'W', '\x3', '\x2', '\x2', '\x2', '\x331', '\x338', '\x5', 'V', 
		',', '\x2', '\x332', '\x333', '\x5', 'T', '+', '\x2', '\x333', '\x334', 
		'\x5', 'Z', '.', '\x2', '\x334', '\x335', '\x5', '\x112', '\x8A', '\x2', 
		'\x335', '\x338', '\x3', '\x2', '\x2', '\x2', '\x336', '\x338', '\x5', 
		'\x172', '\xBA', '\x2', '\x337', '\x331', '\x3', '\x2', '\x2', '\x2', 
		'\x337', '\x332', '\x3', '\x2', '\x2', '\x2', '\x337', '\x336', '\x3', 
		'\x2', '\x2', '\x2', '\x338', 'Y', '\x3', '\x2', '\x2', '\x2', '\x339', 
		'\x33A', '\t', '\f', '\x2', '\x2', '\x33A', '[', '\x3', '\x2', '\x2', 
		'\x2', '\x33B', '\x340', '\x5', 'X', '-', '\x2', '\x33C', '\x33D', '\a', 
		'|', '\x2', '\x2', '\x33D', '\x33F', '\x5', 'X', '-', '\x2', '\x33E', 
		'\x33C', '\x3', '\x2', '\x2', '\x2', '\x33F', '\x342', '\x3', '\x2', '\x2', 
		'\x2', '\x340', '\x33E', '\x3', '\x2', '\x2', '\x2', '\x340', '\x341', 
		'\x3', '\x2', '\x2', '\x2', '\x341', ']', '\x3', '\x2', '\x2', '\x2', 
		'\x342', '\x340', '\x3', '\x2', '\x2', '\x2', '\x343', '\x344', '\x5', 
		'V', ',', '\x2', '\x344', '_', '\x3', '\x2', '\x2', '\x2', '\x345', '\x353', 
		'\x5', '\x62', '\x32', '\x2', '\x346', '\x353', '\x5', 'x', '=', '\x2', 
		'\x347', '\x349', '\x5', '\xCE', 'h', '\x2', '\x348', '\x347', '\x3', 
		'\x2', '\x2', '\x2', '\x348', '\x349', '\x3', '\x2', '\x2', '\x2', '\x349', 
		'\x350', '\x3', '\x2', '\x2', '\x2', '\x34A', '\x351', '\x5', '\x64', 
		'\x33', '\x2', '\x34B', '\x351', '\x5', '\x66', '\x34', '\x2', '\x34C', 
		'\x351', '\x5', 'j', '\x36', '\x2', '\x34D', '\x351', '\x5', 'n', '\x38', 
		'\x2', '\x34E', '\x351', '\x5', 'v', '<', '\x2', '\x34F', '\x351', '\x5', 
		'\x168', '\xB5', '\x2', '\x350', '\x34A', '\x3', '\x2', '\x2', '\x2', 
		'\x350', '\x34B', '\x3', '\x2', '\x2', '\x2', '\x350', '\x34C', '\x3', 
		'\x2', '\x2', '\x2', '\x350', '\x34D', '\x3', '\x2', '\x2', '\x2', '\x350', 
		'\x34E', '\x3', '\x2', '\x2', '\x2', '\x350', '\x34F', '\x3', '\x2', '\x2', 
		'\x2', '\x351', '\x353', '\x3', '\x2', '\x2', '\x2', '\x352', '\x345', 
		'\x3', '\x2', '\x2', '\x2', '\x352', '\x346', '\x3', '\x2', '\x2', '\x2', 
		'\x352', '\x348', '\x3', '\x2', '\x2', '\x2', '\x353', '\x61', '\x3', 
		'\x2', '\x2', '\x2', '\x354', '\x356', '\x5', '\xCE', 'h', '\x2', '\x355', 
		'\x354', '\x3', '\x2', '\x2', '\x2', '\x355', '\x356', '\x3', '\x2', '\x2', 
		'\x2', '\x356', '\x35B', '\x3', '\x2', '\x2', '\x2', '\x357', '\x35C', 
		'\a', '\x86', '\x2', '\x2', '\x358', '\x359', '\a', '\x12', '\x2', '\x2', 
		'\x359', '\x35C', '\x5', '^', '\x30', '\x2', '\x35A', '\x35C', '\a', '\x1D', 
		'\x2', '\x2', '\x35B', '\x357', '\x3', '\x2', '\x2', '\x2', '\x35B', '\x358', 
		'\x3', '\x2', '\x2', '\x2', '\x35B', '\x35A', '\x3', '\x2', '\x2', '\x2', 
		'\x35C', '\x35D', '\x3', '\x2', '\x2', '\x2', '\x35D', '\x35E', '\a', 
		'\x80', '\x2', '\x2', '\x35E', '\x35F', '\x5', '`', '\x31', '\x2', '\x35F', 
		'\x63', '\x3', '\x2', '\x2', '\x2', '\x360', '\x362', '\x5', '\\', '/', 
		'\x2', '\x361', '\x360', '\x3', '\x2', '\x2', '\x2', '\x361', '\x362', 
		'\x3', '\x2', '\x2', '\x2', '\x362', '\x363', '\x3', '\x2', '\x2', '\x2', 
		'\x363', '\x364', '\a', '\x82', '\x2', '\x2', '\x364', '\x65', '\x3', 
		'\x2', '\x2', '\x2', '\x365', '\x367', '\a', '[', '\x2', '\x2', '\x366', 
		'\x368', '\x5', 'h', '\x35', '\x2', '\x367', '\x366', '\x3', '\x2', '\x2', 
		'\x2', '\x367', '\x368', '\x3', '\x2', '\x2', '\x2', '\x368', '\x369', 
		'\x3', '\x2', '\x2', '\x2', '\x369', '\x36A', '\a', '\\', '\x2', '\x2', 
		'\x36A', 'g', '\x3', '\x2', '\x2', '\x2', '\x36B', '\x36D', '\x5', '`', 
		'\x31', '\x2', '\x36C', '\x36B', '\x3', '\x2', '\x2', '\x2', '\x36D', 
		'\x36E', '\x3', '\x2', '\x2', '\x2', '\x36E', '\x36C', '\x3', '\x2', '\x2', 
		'\x2', '\x36E', '\x36F', '\x3', '\x2', '\x2', '\x2', '\x36F', 'i', '\x3', 
		'\x2', '\x2', '\x2', '\x370', '\x371', '\a', '-', '\x2', '\x2', '\x371', 
		'\x372', '\a', 'W', '\x2', '\x2', '\x372', '\x373', '\x5', 'l', '\x37', 
		'\x2', '\x373', '\x374', '\a', 'X', '\x2', '\x2', '\x374', '\x377', '\x5', 
		'`', '\x31', '\x2', '\x375', '\x376', '\a', '\"', '\x2', '\x2', '\x376', 
		'\x378', '\x5', '`', '\x31', '\x2', '\x377', '\x375', '\x3', '\x2', '\x2', 
		'\x2', '\x377', '\x378', '\x3', '\x2', '\x2', '\x2', '\x378', '\x380', 
		'\x3', '\x2', '\x2', '\x2', '\x379', '\x37A', '\a', '\x45', '\x2', '\x2', 
		'\x37A', '\x37B', '\a', 'W', '\x2', '\x2', '\x37B', '\x37C', '\x5', 'l', 
		'\x37', '\x2', '\x37C', '\x37D', '\a', 'X', '\x2', '\x2', '\x37D', '\x37E', 
		'\x5', '`', '\x31', '\x2', '\x37E', '\x380', '\x3', '\x2', '\x2', '\x2', 
		'\x37F', '\x370', '\x3', '\x2', '\x2', '\x2', '\x37F', '\x379', '\x3', 
		'\x2', '\x2', '\x2', '\x380', 'k', '\x3', '\x2', '\x2', '\x2', '\x381', 
		'\x38D', '\x5', '\\', '/', '\x2', '\x382', '\x384', '\x5', '\xCE', 'h', 
		'\x2', '\x383', '\x382', '\x3', '\x2', '\x2', '\x2', '\x383', '\x384', 
		'\x3', '\x2', '\x2', '\x2', '\x384', '\x385', '\x3', '\x2', '\x2', '\x2', 
		'\x385', '\x386', '\x5', '\x8C', 'G', '\x2', '\x386', '\x38A', '\x5', 
		'\xE4', 's', '\x2', '\x387', '\x388', '\a', 'g', '\x2', '\x2', '\x388', 
		'\x38B', '\x5', '\x112', '\x8A', '\x2', '\x389', '\x38B', '\x5', '\x116', 
		'\x8C', '\x2', '\x38A', '\x387', '\x3', '\x2', '\x2', '\x2', '\x38A', 
		'\x389', '\x3', '\x2', '\x2', '\x2', '\x38B', '\x38D', '\x3', '\x2', '\x2', 
		'\x2', '\x38C', '\x381', '\x3', '\x2', '\x2', '\x2', '\x38C', '\x383', 
		'\x3', '\x2', '\x2', '\x2', '\x38D', 'm', '\x3', '\x2', '\x2', '\x2', 
		'\x38E', '\x38F', '\a', 'V', '\x2', '\x2', '\x38F', '\x390', '\a', 'W', 
		'\x2', '\x2', '\x390', '\x391', '\x5', 'l', '\x37', '\x2', '\x391', '\x392', 
		'\a', 'X', '\x2', '\x2', '\x392', '\x393', '\x5', '`', '\x31', '\x2', 
		'\x393', '\x3B0', '\x3', '\x2', '\x2', '\x2', '\x394', '\x395', '\a', 
		'\x1F', '\x2', '\x2', '\x395', '\x396', '\x5', '`', '\x31', '\x2', '\x396', 
		'\x397', '\a', 'V', '\x2', '\x2', '\x397', '\x398', '\a', 'W', '\x2', 
		'\x2', '\x398', '\x399', '\x5', '\\', '/', '\x2', '\x399', '\x39A', '\a', 
		'X', '\x2', '\x2', '\x39A', '\x39B', '\a', '\x82', '\x2', '\x2', '\x39B', 
		'\x3B0', '\x3', '\x2', '\x2', '\x2', '\x39C', '\x39D', '\a', '*', '\x2', 
		'\x2', '\x39D', '\x3AA', '\a', 'W', '\x2', '\x2', '\x39E', '\x3A0', '\x5', 
		'p', '\x39', '\x2', '\x39F', '\x3A1', '\x5', 'l', '\x37', '\x2', '\x3A0', 
		'\x39F', '\x3', '\x2', '\x2', '\x2', '\x3A0', '\x3A1', '\x3', '\x2', '\x2', 
		'\x2', '\x3A1', '\x3A2', '\x3', '\x2', '\x2', '\x2', '\x3A2', '\x3A4', 
		'\a', '\x82', '\x2', '\x2', '\x3A3', '\x3A5', '\x5', '\\', '/', '\x2', 
		'\x3A4', '\x3A3', '\x3', '\x2', '\x2', '\x2', '\x3A4', '\x3A5', '\x3', 
		'\x2', '\x2', '\x2', '\x3A5', '\x3AB', '\x3', '\x2', '\x2', '\x2', '\x3A6', 
		'\x3A7', '\x5', 'r', ':', '\x2', '\x3A7', '\x3A8', '\a', '\x80', '\x2', 
		'\x2', '\x3A8', '\x3A9', '\x5', 't', ';', '\x2', '\x3A9', '\x3AB', '\x3', 
		'\x2', '\x2', '\x2', '\x3AA', '\x39E', '\x3', '\x2', '\x2', '\x2', '\x3AA', 
		'\x3A6', '\x3', '\x2', '\x2', '\x2', '\x3AB', '\x3AC', '\x3', '\x2', '\x2', 
		'\x2', '\x3AC', '\x3AD', '\a', 'X', '\x2', '\x2', '\x3AD', '\x3AE', '\x5', 
		'`', '\x31', '\x2', '\x3AE', '\x3B0', '\x3', '\x2', '\x2', '\x2', '\x3AF', 
		'\x38E', '\x3', '\x2', '\x2', '\x2', '\x3AF', '\x394', '\x3', '\x2', '\x2', 
		'\x2', '\x3AF', '\x39C', '\x3', '\x2', '\x2', '\x2', '\x3B0', 'o', '\x3', 
		'\x2', '\x2', '\x2', '\x3B1', '\x3B4', '\x5', '\x64', '\x33', '\x2', '\x3B2', 
		'\x3B4', '\x5', '\x82', '\x42', '\x2', '\x3B3', '\x3B1', '\x3', '\x2', 
		'\x2', '\x2', '\x3B3', '\x3B2', '\x3', '\x2', '\x2', '\x2', '\x3B4', 'q', 
		'\x3', '\x2', '\x2', '\x2', '\x3B5', '\x3B7', '\x5', '\xCE', 'h', '\x2', 
		'\x3B6', '\x3B5', '\x3', '\x2', '\x2', '\x2', '\x3B6', '\x3B7', '\x3', 
		'\x2', '\x2', '\x2', '\x3B7', '\x3B8', '\x3', '\x2', '\x2', '\x2', '\x3B8', 
		'\x3B9', '\x5', '\x8C', 'G', '\x2', '\x3B9', '\x3BA', '\x5', '\xE4', 's', 
		'\x2', '\x3BA', 's', '\x3', '\x2', '\x2', '\x2', '\x3BB', '\x3BE', '\x5', 
		'\\', '/', '\x2', '\x3BC', '\x3BE', '\x5', '\x116', '\x8C', '\x2', '\x3BD', 
		'\x3BB', '\x3', '\x2', '\x2', '\x2', '\x3BD', '\x3BC', '\x3', '\x2', '\x2', 
		'\x2', '\x3BE', 'u', '\x3', '\x2', '\x2', '\x2', '\x3BF', '\x3C9', '\a', 
		'\x11', '\x2', '\x2', '\x3C0', '\x3C9', '\a', '\x1B', '\x2', '\x2', '\x3C1', 
		'\x3C4', '\a', '=', '\x2', '\x2', '\x3C2', '\x3C5', '\x5', '\\', '/', 
		'\x2', '\x3C3', '\x3C5', '\x5', '\x116', '\x8C', '\x2', '\x3C4', '\x3C2', 
		'\x3', '\x2', '\x2', '\x2', '\x3C4', '\x3C3', '\x3', '\x2', '\x2', '\x2', 
		'\x3C4', '\x3C5', '\x3', '\x2', '\x2', '\x2', '\x3C5', '\x3C9', '\x3', 
		'\x2', '\x2', '\x2', '\x3C6', '\x3C7', '\a', ',', '\x2', '\x2', '\x3C7', 
		'\x3C9', '\a', '\x86', '\x2', '\x2', '\x3C8', '\x3BF', '\x3', '\x2', '\x2', 
		'\x2', '\x3C8', '\x3C0', '\x3', '\x2', '\x2', '\x2', '\x3C8', '\x3C1', 
		'\x3', '\x2', '\x2', '\x2', '\x3C8', '\x3C6', '\x3', '\x2', '\x2', '\x2', 
		'\x3C9', '\x3CA', '\x3', '\x2', '\x2', '\x2', '\x3CA', '\x3CB', '\a', 
		'\x82', '\x2', '\x2', '\x3CB', 'w', '\x3', '\x2', '\x2', '\x2', '\x3CC', 
		'\x3CD', '\x5', '~', '@', '\x2', '\x3CD', 'y', '\x3', '\x2', '\x2', '\x2', 
		'\x3CE', '\x3D0', '\x5', '|', '?', '\x2', '\x3CF', '\x3CE', '\x3', '\x2', 
		'\x2', '\x2', '\x3D0', '\x3D1', '\x3', '\x2', '\x2', '\x2', '\x3D1', '\x3CF', 
		'\x3', '\x2', '\x2', '\x2', '\x3D1', '\x3D2', '\x3', '\x2', '\x2', '\x2', 
		'\x3D2', '{', '\x3', '\x2', '\x2', '\x2', '\x3D3', '\x3DD', '\x5', '~', 
		'@', '\x2', '\x3D4', '\x3DD', '\x5', '\x10A', '\x86', '\x2', '\x3D5', 
		'\x3DD', '\x5', '\x150', '\xA9', '\x2', '\x3D6', '\x3DD', '\x5', '\x164', 
		'\xB3', '\x2', '\x3D7', '\x3DD', '\x5', '\x166', '\xB4', '\x2', '\x3D8', 
		'\x3DD', '\x5', '\xCC', 'g', '\x2', '\x3D9', '\x3DD', '\x5', '\xBE', '`', 
		'\x2', '\x3DA', '\x3DD', '\x5', '\x86', '\x44', '\x2', '\x3DB', '\x3DD', 
		'\x5', '\x88', '\x45', '\x2', '\x3DC', '\x3D3', '\x3', '\x2', '\x2', '\x2', 
		'\x3DC', '\x3D4', '\x3', '\x2', '\x2', '\x2', '\x3DC', '\x3D5', '\x3', 
		'\x2', '\x2', '\x2', '\x3DC', '\x3D6', '\x3', '\x2', '\x2', '\x2', '\x3DC', 
		'\x3D7', '\x3', '\x2', '\x2', '\x2', '\x3DC', '\x3D8', '\x3', '\x2', '\x2', 
		'\x2', '\x3DC', '\x3D9', '\x3', '\x2', '\x2', '\x2', '\x3DC', '\x3DA', 
		'\x3', '\x2', '\x2', '\x2', '\x3DC', '\x3DB', '\x3', '\x2', '\x2', '\x2', 
		'\x3DD', '}', '\x3', '\x2', '\x2', '\x2', '\x3DE', '\x3E7', '\x5', '\x82', 
		'\x42', '\x2', '\x3DF', '\x3E7', '\x5', '\xCA', '\x66', '\x2', '\x3E0', 
		'\x3E7', '\x5', '\xC2', '\x62', '\x2', '\x3E1', '\x3E7', '\x5', '\xC6', 
		'\x64', '\x2', '\x3E2', '\x3E7', '\x5', '\xC8', '\x65', '\x2', '\x3E3', 
		'\x3E7', '\x5', '\x84', '\x43', '\x2', '\x3E4', '\x3E7', '\x5', '\x80', 
		'\x41', '\x2', '\x3E5', '\x3E7', '\x5', '\xAE', 'X', '\x2', '\x3E6', '\x3DE', 
		'\x3', '\x2', '\x2', '\x2', '\x3E6', '\x3DF', '\x3', '\x2', '\x2', '\x2', 
		'\x3E6', '\x3E0', '\x3', '\x2', '\x2', '\x2', '\x3E6', '\x3E1', '\x3', 
		'\x2', '\x2', '\x2', '\x3E6', '\x3E2', '\x3', '\x2', '\x2', '\x2', '\x3E6', 
		'\x3E3', '\x3', '\x2', '\x2', '\x2', '\x3E6', '\x3E4', '\x3', '\x2', '\x2', 
		'\x2', '\x3E6', '\x3E5', '\x3', '\x2', '\x2', '\x2', '\x3E7', '\x7F', 
		'\x3', '\x2', '\x2', '\x2', '\x3E8', '\x3E9', '\a', 'Q', '\x2', '\x2', 
		'\x3E9', '\x3EB', '\a', '\x86', '\x2', '\x2', '\x3EA', '\x3EC', '\x5', 
		'\xCE', 'h', '\x2', '\x3EB', '\x3EA', '\x3', '\x2', '\x2', '\x2', '\x3EB', 
		'\x3EC', '\x3', '\x2', '\x2', '\x2', '\x3EC', '\x3ED', '\x3', '\x2', '\x2', 
		'\x2', '\x3ED', '\x3EE', '\a', 'g', '\x2', '\x2', '\x3EE', '\x3EF', '\x5', 
		'\xF8', '}', '\x2', '\x3EF', '\x3F0', '\a', '\x82', '\x2', '\x2', '\x3F0', 
		'\x81', '\x3', '\x2', '\x2', '\x2', '\x3F1', '\x3F3', '\x5', '\x8C', 'G', 
		'\x2', '\x3F2', '\x3F1', '\x3', '\x2', '\x2', '\x2', '\x3F2', '\x3F3', 
		'\x3', '\x2', '\x2', '\x2', '\x3F3', '\x3F5', '\x3', '\x2', '\x2', '\x2', 
		'\x3F4', '\x3F6', '\x5', '\xE0', 'q', '\x2', '\x3F5', '\x3F4', '\x3', 
		'\x2', '\x2', '\x2', '\x3F5', '\x3F6', '\x3', '\x2', '\x2', '\x2', '\x3F6', 
		'\x3F7', '\x3', '\x2', '\x2', '\x2', '\x3F7', '\x400', '\a', '\x82', '\x2', 
		'\x2', '\x3F8', '\x3FA', '\x5', '\xCE', 'h', '\x2', '\x3F9', '\x3FB', 
		'\x5', '\x8C', 'G', '\x2', '\x3FA', '\x3F9', '\x3', '\x2', '\x2', '\x2', 
		'\x3FA', '\x3FB', '\x3', '\x2', '\x2', '\x2', '\x3FB', '\x3FC', '\x3', 
		'\x2', '\x2', '\x2', '\x3FC', '\x3FD', '\x5', '\xE0', 'q', '\x2', '\x3FD', 
		'\x3FE', '\a', '\x82', '\x2', '\x2', '\x3FE', '\x400', '\x3', '\x2', '\x2', 
		'\x2', '\x3FF', '\x3F2', '\x3', '\x2', '\x2', '\x2', '\x3FF', '\x3F8', 
		'\x3', '\x2', '\x2', '\x2', '\x400', '\x83', '\x3', '\x2', '\x2', '\x2', 
		'\x401', '\x402', '\a', '\x42', '\x2', '\x2', '\x402', '\x403', '\a', 
		'W', '\x2', '\x2', '\x403', '\x404', '\x5', '^', '\x30', '\x2', '\x404', 
		'\x405', '\a', '|', '\x2', '\x2', '\x405', '\x406', '\a', '\x6', '\x2', 
		'\x2', '\x406', '\x407', '\a', 'X', '\x2', '\x2', '\x407', '\x408', '\a', 
		'\x82', '\x2', '\x2', '\x408', '\x85', '\x3', '\x2', '\x2', '\x2', '\x409', 
		'\x40A', '\a', '\x82', '\x2', '\x2', '\x40A', '\x87', '\x3', '\x2', '\x2', 
		'\x2', '\x40B', '\x40C', '\x5', '\xCE', 'h', '\x2', '\x40C', '\x40D', 
		'\a', '\x82', '\x2', '\x2', '\x40D', '\x89', '\x3', '\x2', '\x2', '\x2', 
		'\x40E', '\x415', '\x5', '\x8E', 'H', '\x2', '\x40F', '\x415', '\x5', 
		'\x94', 'K', '\x2', '\x410', '\x415', '\x5', '\x90', 'I', '\x2', '\x411', 
		'\x415', '\a', '+', '\x2', '\x2', '\x412', '\x415', '\a', 'L', '\x2', 
		'\x2', '\x413', '\x415', '\a', '\x19', '\x2', '\x2', '\x414', '\x40E', 
		'\x3', '\x2', '\x2', '\x2', '\x414', '\x40F', '\x3', '\x2', '\x2', '\x2', 
		'\x414', '\x410', '\x3', '\x2', '\x2', '\x2', '\x414', '\x411', '\x3', 
		'\x2', '\x2', '\x2', '\x414', '\x412', '\x3', '\x2', '\x2', '\x2', '\x414', 
		'\x413', '\x3', '\x2', '\x2', '\x2', '\x415', '\x8B', '\x3', '\x2', '\x2', 
		'\x2', '\x416', '\x418', '\x5', '\x8A', '\x46', '\x2', '\x417', '\x416', 
		'\x3', '\x2', '\x2', '\x2', '\x418', '\x419', '\x3', '\x2', '\x2', '\x2', 
		'\x419', '\x41A', '\x3', '\x2', '\x2', '\x2', '\x419', '\x417', '\x3', 
		'\x2', '\x2', '\x2', '\x41A', '\x41C', '\x3', '\x2', '\x2', '\x2', '\x41B', 
		'\x41D', '\x5', '\xCE', 'h', '\x2', '\x41C', '\x41B', '\x3', '\x2', '\x2', 
		'\x2', '\x41C', '\x41D', '\x3', '\x2', '\x2', '\x2', '\x41D', '\x8D', 
		'\x3', '\x2', '\x2', '\x2', '\x41E', '\x41F', '\t', '\r', '\x2', '\x2', 
		'\x41F', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x420', '\x421', '\t', '\xE', 
		'\x2', '\x2', '\x421', '\x91', '\x3', '\x2', '\x2', '\x2', '\x422', '\x423', 
		'\a', '\x86', '\x2', '\x2', '\x423', '\x93', '\x3', '\x2', '\x2', '\x2', 
		'\x424', '\x428', '\x5', '\x96', 'L', '\x2', '\x425', '\x428', '\x5', 
		'\x11A', '\x8E', '\x2', '\x426', '\x428', '\x5', '\xAA', 'V', '\x2', '\x427', 
		'\x424', '\x3', '\x2', '\x2', '\x2', '\x427', '\x425', '\x3', '\x2', '\x2', 
		'\x2', '\x427', '\x426', '\x3', '\x2', '\x2', '\x2', '\x428', '\x95', 
		'\x3', '\x2', '\x2', '\x2', '\x429', '\x42E', '\x5', '\xA0', 'Q', '\x2', 
		'\x42A', '\x42E', '\x5', '\xA6', 'T', '\x2', '\x42B', '\x42E', '\x5', 
		'\x162', '\xB2', '\x2', '\x42C', '\x42E', '\x5', '\xF2', 'z', '\x2', '\x42D', 
		'\x429', '\x3', '\x2', '\x2', '\x2', '\x42D', '\x42A', '\x3', '\x2', '\x2', 
		'\x2', '\x42D', '\x42B', '\x3', '\x2', '\x2', '\x2', '\x42D', '\x42C', 
		'\x3', '\x2', '\x2', '\x2', '\x42E', '\x97', '\x3', '\x2', '\x2', '\x2', 
		'\x42F', '\x431', '\x5', '\x94', 'K', '\x2', '\x430', '\x42F', '\x3', 
		'\x2', '\x2', '\x2', '\x431', '\x432', '\x3', '\x2', '\x2', '\x2', '\x432', 
		'\x430', '\x3', '\x2', '\x2', '\x2', '\x432', '\x433', '\x3', '\x2', '\x2', 
		'\x2', '\x433', '\x435', '\x3', '\x2', '\x2', '\x2', '\x434', '\x436', 
		'\x5', '\xCE', 'h', '\x2', '\x435', '\x434', '\x3', '\x2', '\x2', '\x2', 
		'\x435', '\x436', '\x3', '\x2', '\x2', '\x2', '\x436', '\x99', '\x3', 
		'\x2', '\x2', '\x2', '\x437', '\x439', '\x5', '\x96', 'L', '\x2', '\x438', 
		'\x437', '\x3', '\x2', '\x2', '\x2', '\x439', '\x43A', '\x3', '\x2', '\x2', 
		'\x2', '\x43A', '\x438', '\x3', '\x2', '\x2', '\x2', '\x43A', '\x43B', 
		'\x3', '\x2', '\x2', '\x2', '\x43B', '\x43D', '\x3', '\x2', '\x2', '\x2', 
		'\x43C', '\x43E', '\x5', '\xCE', 'h', '\x2', '\x43D', '\x43C', '\x3', 
		'\x2', '\x2', '\x2', '\x43D', '\x43E', '\x3', '\x2', '\x2', '\x2', '\x43E', 
		'\x9B', '\x3', '\x2', '\x2', '\x2', '\x43F', '\x440', '\t', '\xF', '\x2', 
		'\x2', '\x440', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x441', '\x442', 
		'\t', '\x10', '\x2', '\x2', '\x442', '\x9F', '\x3', '\x2', '\x2', '\x2', 
		'\x443', '\x445', '\x5', '\f', '\a', '\x2', '\x444', '\x443', '\x3', '\x2', 
		'\x2', '\x2', '\x444', '\x445', '\x3', '\x2', '\x2', '\x2', '\x445', '\x446', 
		'\x3', '\x2', '\x2', '\x2', '\x446', '\x478', '\x5', '\xA2', 'R', '\x2', 
		'\x447', '\x448', '\x5', '\f', '\a', '\x2', '\x448', '\x449', '\a', '\x46', 
		'\x2', '\x2', '\x449', '\x44A', '\x5', '\x158', '\xAD', '\x2', '\x44A', 
		'\x478', '\x3', '\x2', '\x2', '\x2', '\x44B', '\x478', '\x5', '\x9E', 
		'P', '\x2', '\x44C', '\x44E', '\x5', '\x9E', 'P', '\x2', '\x44D', '\x44C', 
		'\x3', '\x2', '\x2', '\x2', '\x44D', '\x44E', '\x3', '\x2', '\x2', '\x2', 
		'\x44E', '\x450', '\x3', '\x2', '\x2', '\x2', '\x44F', '\x451', '\x5', 
		'\x9C', 'O', '\x2', '\x450', '\x44F', '\x3', '\x2', '\x2', '\x2', '\x451', 
		'\x452', '\x3', '\x2', '\x2', '\x2', '\x452', '\x450', '\x3', '\x2', '\x2', 
		'\x2', '\x452', '\x453', '\x3', '\x2', '\x2', '\x2', '\x453', '\x478', 
		'\x3', '\x2', '\x2', '\x2', '\x454', '\x456', '\x5', '\x9E', 'P', '\x2', 
		'\x455', '\x454', '\x3', '\x2', '\x2', '\x2', '\x455', '\x456', '\x3', 
		'\x2', '\x2', '\x2', '\x456', '\x457', '\x3', '\x2', '\x2', '\x2', '\x457', 
		'\x478', '\a', '\x14', '\x2', '\x2', '\x458', '\x45A', '\x5', '\x9E', 
		'P', '\x2', '\x459', '\x458', '\x3', '\x2', '\x2', '\x2', '\x459', '\x45A', 
		'\x3', '\x2', '\x2', '\x2', '\x45A', '\x45B', '\x3', '\x2', '\x2', '\x2', 
		'\x45B', '\x478', '\a', '\x15', '\x2', '\x2', '\x45C', '\x45E', '\x5', 
		'\x9E', 'P', '\x2', '\x45D', '\x45C', '\x3', '\x2', '\x2', '\x2', '\x45D', 
		'\x45E', '\x3', '\x2', '\x2', '\x2', '\x45E', '\x45F', '\x3', '\x2', '\x2', 
		'\x2', '\x45F', '\x478', '\a', '\x16', '\x2', '\x2', '\x460', '\x462', 
		'\x5', '\x9E', 'P', '\x2', '\x461', '\x460', '\x3', '\x2', '\x2', '\x2', 
		'\x461', '\x462', '\x3', '\x2', '\x2', '\x2', '\x462', '\x463', '\x3', 
		'\x2', '\x2', '\x2', '\x463', '\x478', '\a', 'U', '\x2', '\x2', '\x464', 
		'\x478', '\a', '\x10', '\x2', '\x2', '\x465', '\x467', '\x5', '\x9E', 
		'P', '\x2', '\x466', '\x465', '\x3', '\x2', '\x2', '\x2', '\x466', '\x467', 
		'\x3', '\x2', '\x2', '\x2', '\x467', '\x46B', '\x3', '\x2', '\x2', '\x2', 
		'\x468', '\x46A', '\x5', '\x9C', 'O', '\x2', '\x469', '\x468', '\x3', 
		'\x2', '\x2', '\x2', '\x46A', '\x46D', '\x3', '\x2', '\x2', '\x2', '\x46B', 
		'\x469', '\x3', '\x2', '\x2', '\x2', '\x46B', '\x46C', '\x3', '\x2', '\x2', 
		'\x2', '\x46C', '\x46E', '\x3', '\x2', '\x2', '\x2', '\x46D', '\x46B', 
		'\x3', '\x2', '\x2', '\x2', '\x46E', '\x478', '\a', '/', '\x2', '\x2', 
		'\x46F', '\x478', '\a', ')', '\x2', '\x2', '\x470', '\x472', '\x5', '\x9C', 
		'O', '\x2', '\x471', '\x470', '\x3', '\x2', '\x2', '\x2', '\x471', '\x472', 
		'\x3', '\x2', '\x2', '\x2', '\x472', '\x473', '\x3', '\x2', '\x2', '\x2', 
		'\x473', '\x478', '\a', ' ', '\x2', '\x2', '\x474', '\x478', '\a', 'S', 
		'\x2', '\x2', '\x475', '\x478', '\a', '\xF', '\x2', '\x2', '\x476', '\x478', 
		'\x5', '\xA4', 'S', '\x2', '\x477', '\x444', '\x3', '\x2', '\x2', '\x2', 
		'\x477', '\x447', '\x3', '\x2', '\x2', '\x2', '\x477', '\x44B', '\x3', 
		'\x2', '\x2', '\x2', '\x477', '\x44D', '\x3', '\x2', '\x2', '\x2', '\x477', 
		'\x455', '\x3', '\x2', '\x2', '\x2', '\x477', '\x459', '\x3', '\x2', '\x2', 
		'\x2', '\x477', '\x45D', '\x3', '\x2', '\x2', '\x2', '\x477', '\x461', 
		'\x3', '\x2', '\x2', '\x2', '\x477', '\x464', '\x3', '\x2', '\x2', '\x2', 
		'\x477', '\x466', '\x3', '\x2', '\x2', '\x2', '\x477', '\x46F', '\x3', 
		'\x2', '\x2', '\x2', '\x477', '\x471', '\x3', '\x2', '\x2', '\x2', '\x477', 
		'\x474', '\x3', '\x2', '\x2', '\x2', '\x477', '\x475', '\x3', '\x2', '\x2', 
		'\x2', '\x477', '\x476', '\x3', '\x2', '\x2', '\x2', '\x478', '\xA1', 
		'\x3', '\x2', '\x2', '\x2', '\x479', '\x47E', '\x5', '\x118', '\x8D', 
		'\x2', '\x47A', '\x47E', '\x5', '\xA8', 'U', '\x2', '\x47B', '\x47E', 
		'\x5', '\x92', 'J', '\x2', '\x47C', '\x47E', '\x5', '\x158', '\xAD', '\x2', 
		'\x47D', '\x479', '\x3', '\x2', '\x2', '\x2', '\x47D', '\x47A', '\x3', 
		'\x2', '\x2', '\x2', '\x47D', '\x47B', '\x3', '\x2', '\x2', '\x2', '\x47D', 
		'\x47C', '\x3', '\x2', '\x2', '\x2', '\x47E', '\xA3', '\x3', '\x2', '\x2', 
		'\x2', '\x47F', '\x480', '\a', '\x1C', '\x2', '\x2', '\x480', '\x483', 
		'\a', 'W', '\x2', '\x2', '\x481', '\x484', '\x5', '\\', '/', '\x2', '\x482', 
		'\x484', '\a', '\xF', '\x2', '\x2', '\x483', '\x481', '\x3', '\x2', '\x2', 
		'\x2', '\x483', '\x482', '\x3', '\x2', '\x2', '\x2', '\x484', '\x485', 
		'\x3', '\x2', '\x2', '\x2', '\x485', '\x486', '\a', 'X', '\x2', '\x2', 
		'\x486', '\xA5', '\x3', '\x2', '\x2', '\x2', '\x487', '\x496', '\x5', 
		'\x122', '\x92', '\x2', '\x488', '\x48A', '\x5', '\xCE', 'h', '\x2', '\x489', 
		'\x488', '\x3', '\x2', '\x2', '\x2', '\x489', '\x48A', '\x3', '\x2', '\x2', 
		'\x2', '\x48A', '\x48C', '\x3', '\x2', '\x2', '\x2', '\x48B', '\x48D', 
		'\x5', '\f', '\a', '\x2', '\x48C', '\x48B', '\x3', '\x2', '\x2', '\x2', 
		'\x48C', '\x48D', '\x3', '\x2', '\x2', '\x2', '\x48D', '\x48E', '\x3', 
		'\x2', '\x2', '\x2', '\x48E', '\x497', '\a', '\x86', '\x2', '\x2', '\x48F', 
		'\x497', '\x5', '\x158', '\xAD', '\x2', '\x490', '\x492', '\x5', '\f', 
		'\a', '\x2', '\x491', '\x493', '\a', '\x46', '\x2', '\x2', '\x492', '\x491', 
		'\x3', '\x2', '\x2', '\x2', '\x492', '\x493', '\x3', '\x2', '\x2', '\x2', 
		'\x493', '\x494', '\x3', '\x2', '\x2', '\x2', '\x494', '\x495', '\x5', 
		'\x158', '\xAD', '\x2', '\x495', '\x497', '\x3', '\x2', '\x2', '\x2', 
		'\x496', '\x489', '\x3', '\x2', '\x2', '\x2', '\x496', '\x48F', '\x3', 
		'\x2', '\x2', '\x2', '\x496', '\x490', '\x3', '\x2', '\x2', '\x2', '\x497', 
		'\x49E', '\x3', '\x2', '\x2', '\x2', '\x498', '\x49A', '\a', '#', '\x2', 
		'\x2', '\x499', '\x49B', '\x5', '\f', '\a', '\x2', '\x49A', '\x499', '\x3', 
		'\x2', '\x2', '\x2', '\x49A', '\x49B', '\x3', '\x2', '\x2', '\x2', '\x49B', 
		'\x49C', '\x3', '\x2', '\x2', '\x2', '\x49C', '\x49E', '\a', '\x86', '\x2', 
		'\x2', '\x49D', '\x487', '\x3', '\x2', '\x2', '\x2', '\x49D', '\x498', 
		'\x3', '\x2', '\x2', '\x2', '\x49E', '\xA7', '\x3', '\x2', '\x2', '\x2', 
		'\x49F', '\x4A0', '\a', '\x86', '\x2', '\x2', '\x4A0', '\xA9', '\x3', 
		'\x2', '\x2', '\x2', '\x4A1', '\x4A2', '\x5', '\xAC', 'W', '\x2', '\x4A2', 
		'\x4A7', '\a', '[', '\x2', '\x2', '\x4A3', '\x4A5', '\x5', '\xB4', '[', 
		'\x2', '\x4A4', '\x4A6', '\a', '|', '\x2', '\x2', '\x4A5', '\x4A4', '\x3', 
		'\x2', '\x2', '\x2', '\x4A5', '\x4A6', '\x3', '\x2', '\x2', '\x2', '\x4A6', 
		'\x4A8', '\x3', '\x2', '\x2', '\x2', '\x4A7', '\x4A3', '\x3', '\x2', '\x2', 
		'\x2', '\x4A7', '\x4A8', '\x3', '\x2', '\x2', '\x2', '\x4A8', '\x4A9', 
		'\x3', '\x2', '\x2', '\x2', '\x4A9', '\x4AA', '\a', '\\', '\x2', '\x2', 
		'\x4AA', '\xAB', '\x3', '\x2', '\x2', '\x2', '\x4AB', '\x4AD', '\x5', 
		'\xB0', 'Y', '\x2', '\x4AC', '\x4AE', '\x5', '\xCE', 'h', '\x2', '\x4AD', 
		'\x4AC', '\x3', '\x2', '\x2', '\x2', '\x4AD', '\x4AE', '\x3', '\x2', '\x2', 
		'\x2', '\x4AE', '\x4B3', '\x3', '\x2', '\x2', '\x2', '\x4AF', '\x4B1', 
		'\x5', '\f', '\a', '\x2', '\x4B0', '\x4AF', '\x3', '\x2', '\x2', '\x2', 
		'\x4B0', '\x4B1', '\x3', '\x2', '\x2', '\x2', '\x4B1', '\x4B2', '\x3', 
		'\x2', '\x2', '\x2', '\x4B2', '\x4B4', '\a', '\x86', '\x2', '\x2', '\x4B3', 
		'\x4B0', '\x3', '\x2', '\x2', '\x2', '\x4B3', '\x4B4', '\x3', '\x2', '\x2', 
		'\x2', '\x4B4', '\x4B6', '\x3', '\x2', '\x2', '\x2', '\x4B5', '\x4B7', 
		'\x5', '\xB2', 'Z', '\x2', '\x4B6', '\x4B5', '\x3', '\x2', '\x2', '\x2', 
		'\x4B6', '\x4B7', '\x3', '\x2', '\x2', '\x2', '\x4B7', '\xAD', '\x3', 
		'\x2', '\x2', '\x2', '\x4B8', '\x4BA', '\x5', '\xB0', 'Y', '\x2', '\x4B9', 
		'\x4BB', '\x5', '\xCE', 'h', '\x2', '\x4BA', '\x4B9', '\x3', '\x2', '\x2', 
		'\x2', '\x4BA', '\x4BB', '\x3', '\x2', '\x2', '\x2', '\x4BB', '\x4BC', 
		'\x3', '\x2', '\x2', '\x2', '\x4BC', '\x4BE', '\a', '\x86', '\x2', '\x2', 
		'\x4BD', '\x4BF', '\x5', '\xB2', 'Z', '\x2', '\x4BE', '\x4BD', '\x3', 
		'\x2', '\x2', '\x2', '\x4BE', '\x4BF', '\x3', '\x2', '\x2', '\x2', '\x4BF', 
		'\x4C0', '\x3', '\x2', '\x2', '\x2', '\x4C0', '\x4C1', '\a', '\x82', '\x2', 
		'\x2', '\x4C1', '\xAF', '\x3', '\x2', '\x2', '\x2', '\x4C2', '\x4C4', 
		'\a', '#', '\x2', '\x2', '\x4C3', '\x4C5', '\t', '\x11', '\x2', '\x2', 
		'\x4C4', '\x4C3', '\x3', '\x2', '\x2', '\x2', '\x4C4', '\x4C5', '\x3', 
		'\x2', '\x2', '\x2', '\x4C5', '\xB1', '\x3', '\x2', '\x2', '\x2', '\x4C6', 
		'\x4C7', '\a', '\x80', '\x2', '\x2', '\x4C7', '\x4C8', '\x5', '\x98', 
		'M', '\x2', '\x4C8', '\xB3', '\x3', '\x2', '\x2', '\x2', '\x4C9', '\x4CE', 
		'\x5', '\xB6', '\\', '\x2', '\x4CA', '\x4CB', '\a', '|', '\x2', '\x2', 
		'\x4CB', '\x4CD', '\x5', '\xB6', '\\', '\x2', '\x4CC', '\x4CA', '\x3', 
		'\x2', '\x2', '\x2', '\x4CD', '\x4D0', '\x3', '\x2', '\x2', '\x2', '\x4CE', 
		'\x4CC', '\x3', '\x2', '\x2', '\x2', '\x4CE', '\x4CF', '\x3', '\x2', '\x2', 
		'\x2', '\x4CF', '\xB5', '\x3', '\x2', '\x2', '\x2', '\x4D0', '\x4CE', 
		'\x3', '\x2', '\x2', '\x2', '\x4D1', '\x4D4', '\x5', '\xB8', ']', '\x2', 
		'\x4D2', '\x4D3', '\a', 'g', '\x2', '\x2', '\x4D3', '\x4D5', '\x5', '^', 
		'\x30', '\x2', '\x4D4', '\x4D2', '\x3', '\x2', '\x2', '\x2', '\x4D4', 
		'\x4D5', '\x3', '\x2', '\x2', '\x2', '\x4D5', '\xB7', '\x3', '\x2', '\x2', 
		'\x2', '\x4D6', '\x4D7', '\a', '\x86', '\x2', '\x2', '\x4D7', '\xB9', 
		'\x3', '\x2', '\x2', '\x2', '\x4D8', '\x4DB', '\x5', '\xBC', '_', '\x2', 
		'\x4D9', '\x4DB', '\x5', '\xC0', '\x61', '\x2', '\x4DA', '\x4D8', '\x3', 
		'\x2', '\x2', '\x2', '\x4DA', '\x4D9', '\x3', '\x2', '\x2', '\x2', '\x4DB', 
		'\xBB', '\x3', '\x2', '\x2', '\x2', '\x4DC', '\x4DD', '\a', '\x86', '\x2', 
		'\x2', '\x4DD', '\xBD', '\x3', '\x2', '\x2', '\x2', '\x4DE', '\x4E0', 
		'\a', '.', '\x2', '\x2', '\x4DF', '\x4DE', '\x3', '\x2', '\x2', '\x2', 
		'\x4DF', '\x4E0', '\x3', '\x2', '\x2', '\x2', '\x4E0', '\x4E1', '\x3', 
		'\x2', '\x2', '\x2', '\x4E1', '\x4E4', '\a', '\x32', '\x2', '\x2', '\x4E2', 
		'\x4E5', '\a', '\x86', '\x2', '\x2', '\x4E3', '\x4E5', '\x5', '\xBC', 
		'_', '\x2', '\x4E4', '\x4E2', '\x3', '\x2', '\x2', '\x2', '\x4E4', '\x4E3', 
		'\x3', '\x2', '\x2', '\x2', '\x4E4', '\x4E5', '\x3', '\x2', '\x2', '\x2', 
		'\x4E5', '\x4E6', '\x3', '\x2', '\x2', '\x2', '\x4E6', '\x4E8', '\a', 
		'[', '\x2', '\x2', '\x4E7', '\x4E9', '\x5', 'z', '>', '\x2', '\x4E8', 
		'\x4E7', '\x3', '\x2', '\x2', '\x2', '\x4E8', '\x4E9', '\x3', '\x2', '\x2', 
		'\x2', '\x4E9', '\x4EA', '\x3', '\x2', '\x2', '\x2', '\x4EA', '\x4EB', 
		'\a', '\\', '\x2', '\x2', '\x4EB', '\xBF', '\x3', '\x2', '\x2', '\x2', 
		'\x4EC', '\x4ED', '\a', '\x86', '\x2', '\x2', '\x4ED', '\xC1', '\x3', 
		'\x2', '\x2', '\x2', '\x4EE', '\x4EF', '\a', '\x32', '\x2', '\x2', '\x4EF', 
		'\x4F0', '\a', '\x86', '\x2', '\x2', '\x4F0', '\x4F1', '\a', 'g', '\x2', 
		'\x2', '\x4F1', '\x4F2', '\x5', '\xC4', '\x63', '\x2', '\x4F2', '\x4F3', 
		'\a', '\x82', '\x2', '\x2', '\x4F3', '\xC3', '\x3', '\x2', '\x2', '\x2', 
		'\x4F4', '\x4F6', '\x5', '\f', '\a', '\x2', '\x4F5', '\x4F4', '\x3', '\x2', 
		'\x2', '\x2', '\x4F5', '\x4F6', '\x3', '\x2', '\x2', '\x2', '\x4F6', '\x4F7', 
		'\x3', '\x2', '\x2', '\x2', '\x4F7', '\x4F8', '\x5', '\xBA', '^', '\x2', 
		'\x4F8', '\xC5', '\x3', '\x2', '\x2', '\x2', '\x4F9', '\x4FF', '\a', 'Q', 
		'\x2', '\x2', '\x4FA', '\x4FC', '\a', 'N', '\x2', '\x2', '\x4FB', '\x4FA', 
		'\x3', '\x2', '\x2', '\x2', '\x4FB', '\x4FC', '\x3', '\x2', '\x2', '\x2', 
		'\x4FC', '\x4FD', '\x3', '\x2', '\x2', '\x2', '\x4FD', '\x500', '\x5', 
		'\f', '\a', '\x2', '\x4FE', '\x500', '\a', '\x81', '\x2', '\x2', '\x4FF', 
		'\x4FB', '\x3', '\x2', '\x2', '\x2', '\x4FF', '\x4FE', '\x3', '\x2', '\x2', 
		'\x2', '\x500', '\x501', '\x3', '\x2', '\x2', '\x2', '\x501', '\x502', 
		'\x5', '\b', '\x5', '\x2', '\x502', '\x503', '\a', '\x82', '\x2', '\x2', 
		'\x503', '\xC7', '\x3', '\x2', '\x2', '\x2', '\x504', '\x506', '\x5', 
		'\xCE', 'h', '\x2', '\x505', '\x504', '\x3', '\x2', '\x2', '\x2', '\x505', 
		'\x506', '\x3', '\x2', '\x2', '\x2', '\x506', '\x507', '\x3', '\x2', '\x2', 
		'\x2', '\x507', '\x508', '\a', 'Q', '\x2', '\x2', '\x508', '\x50A', '\a', 
		'\x32', '\x2', '\x2', '\x509', '\x50B', '\x5', '\f', '\a', '\x2', '\x50A', 
		'\x509', '\x3', '\x2', '\x2', '\x2', '\x50A', '\x50B', '\x3', '\x2', '\x2', 
		'\x2', '\x50B', '\x50C', '\x3', '\x2', '\x2', '\x2', '\x50C', '\x50D', 
		'\x5', '\xBA', '^', '\x2', '\x50D', '\x50E', '\a', '\x82', '\x2', '\x2', 
		'\x50E', '\xC9', '\x3', '\x2', '\x2', '\x2', '\x50F', '\x510', '\a', '\xE', 
		'\x2', '\x2', '\x510', '\x511', '\a', 'W', '\x2', '\x2', '\x511', '\x512', 
		'\a', '\x6', '\x2', '\x2', '\x512', '\x513', '\a', 'X', '\x2', '\x2', 
		'\x513', '\x514', '\a', '\x82', '\x2', '\x2', '\x514', '\xCB', '\x3', 
		'\x2', '\x2', '\x2', '\x515', '\x516', '\a', '&', '\x2', '\x2', '\x516', 
		'\x51D', '\a', '\x6', '\x2', '\x2', '\x517', '\x519', '\a', '[', '\x2', 
		'\x2', '\x518', '\x51A', '\x5', 'z', '>', '\x2', '\x519', '\x518', '\x3', 
		'\x2', '\x2', '\x2', '\x519', '\x51A', '\x3', '\x2', '\x2', '\x2', '\x51A', 
		'\x51B', '\x3', '\x2', '\x2', '\x2', '\x51B', '\x51E', '\a', '\\', '\x2', 
		'\x2', '\x51C', '\x51E', '\x5', '|', '?', '\x2', '\x51D', '\x517', '\x3', 
		'\x2', '\x2', '\x2', '\x51D', '\x51C', '\x3', '\x2', '\x2', '\x2', '\x51E', 
		'\xCD', '\x3', '\x2', '\x2', '\x2', '\x51F', '\x521', '\x5', '\xD0', 'i', 
		'\x2', '\x520', '\x51F', '\x3', '\x2', '\x2', '\x2', '\x521', '\x522', 
		'\x3', '\x2', '\x2', '\x2', '\x522', '\x520', '\x3', '\x2', '\x2', '\x2', 
		'\x522', '\x523', '\x3', '\x2', '\x2', '\x2', '\x523', '\xCF', '\x3', 
		'\x2', '\x2', '\x2', '\x524', '\x525', '\a', 'Y', '\x2', '\x2', '\x525', 
		'\x527', '\a', 'Y', '\x2', '\x2', '\x526', '\x528', '\x5', '\xD4', 'k', 
		'\x2', '\x527', '\x526', '\x3', '\x2', '\x2', '\x2', '\x527', '\x528', 
		'\x3', '\x2', '\x2', '\x2', '\x528', '\x529', '\x3', '\x2', '\x2', '\x2', 
		'\x529', '\x52A', '\a', 'Z', '\x2', '\x2', '\x52A', '\x52D', '\a', 'Z', 
		'\x2', '\x2', '\x52B', '\x52D', '\x5', '\xD2', 'j', '\x2', '\x52C', '\x524', 
		'\x3', '\x2', '\x2', '\x2', '\x52C', '\x52B', '\x3', '\x2', '\x2', '\x2', 
		'\x52D', '\xD1', '\x3', '\x2', '\x2', '\x2', '\x52E', '\x52F', '\a', '\f', 
		'\x2', '\x2', '\x52F', '\x532', '\a', 'W', '\x2', '\x2', '\x530', '\x533', 
		'\x5', '\xF8', '}', '\x2', '\x531', '\x533', '\x5', '^', '\x30', '\x2', 
		'\x532', '\x530', '\x3', '\x2', '\x2', '\x2', '\x532', '\x531', '\x3', 
		'\x2', '\x2', '\x2', '\x533', '\x535', '\x3', '\x2', '\x2', '\x2', '\x534', 
		'\x536', '\a', '\x85', '\x2', '\x2', '\x535', '\x534', '\x3', '\x2', '\x2', 
		'\x2', '\x535', '\x536', '\x3', '\x2', '\x2', '\x2', '\x536', '\x537', 
		'\x3', '\x2', '\x2', '\x2', '\x537', '\x538', '\a', 'X', '\x2', '\x2', 
		'\x538', '\xD3', '\x3', '\x2', '\x2', '\x2', '\x539', '\x53E', '\x5', 
		'\xD6', 'l', '\x2', '\x53A', '\x53B', '\a', '|', '\x2', '\x2', '\x53B', 
		'\x53D', '\x5', '\xD6', 'l', '\x2', '\x53C', '\x53A', '\x3', '\x2', '\x2', 
		'\x2', '\x53D', '\x540', '\x3', '\x2', '\x2', '\x2', '\x53E', '\x53C', 
		'\x3', '\x2', '\x2', '\x2', '\x53E', '\x53F', '\x3', '\x2', '\x2', '\x2', 
		'\x53F', '\x542', '\x3', '\x2', '\x2', '\x2', '\x540', '\x53E', '\x3', 
		'\x2', '\x2', '\x2', '\x541', '\x543', '\a', '\x85', '\x2', '\x2', '\x542', 
		'\x541', '\x3', '\x2', '\x2', '\x2', '\x542', '\x543', '\x3', '\x2', '\x2', 
		'\x2', '\x543', '\xD5', '\x3', '\x2', '\x2', '\x2', '\x544', '\x545', 
		'\x5', '\xD8', 'm', '\x2', '\x545', '\x546', '\a', '\x81', '\x2', '\x2', 
		'\x546', '\x548', '\x3', '\x2', '\x2', '\x2', '\x547', '\x544', '\x3', 
		'\x2', '\x2', '\x2', '\x547', '\x548', '\x3', '\x2', '\x2', '\x2', '\x548', 
		'\x549', '\x3', '\x2', '\x2', '\x2', '\x549', '\x54B', '\a', '\x86', '\x2', 
		'\x2', '\x54A', '\x54C', '\x5', '\xDA', 'n', '\x2', '\x54B', '\x54A', 
		'\x3', '\x2', '\x2', '\x2', '\x54B', '\x54C', '\x3', '\x2', '\x2', '\x2', 
		'\x54C', '\xD7', '\x3', '\x2', '\x2', '\x2', '\x54D', '\x54E', '\a', '\x86', 
		'\x2', '\x2', '\x54E', '\xD9', '\x3', '\x2', '\x2', '\x2', '\x54F', '\x551', 
		'\a', 'W', '\x2', '\x2', '\x550', '\x552', '\x5', '\xDC', 'o', '\x2', 
		'\x551', '\x550', '\x3', '\x2', '\x2', '\x2', '\x551', '\x552', '\x3', 
		'\x2', '\x2', '\x2', '\x552', '\x553', '\x3', '\x2', '\x2', '\x2', '\x553', 
		'\x554', '\a', 'X', '\x2', '\x2', '\x554', '\xDB', '\x3', '\x2', '\x2', 
		'\x2', '\x555', '\x557', '\x5', '\xDE', 'p', '\x2', '\x556', '\x555', 
		'\x3', '\x2', '\x2', '\x2', '\x557', '\x558', '\x3', '\x2', '\x2', '\x2', 
		'\x558', '\x556', '\x3', '\x2', '\x2', '\x2', '\x558', '\x559', '\x3', 
		'\x2', '\x2', '\x2', '\x559', '\xDD', '\x3', '\x2', '\x2', '\x2', '\x55A', 
		'\x55B', '\a', 'W', '\x2', '\x2', '\x55B', '\x55C', '\x5', '\xDC', 'o', 
		'\x2', '\x55C', '\x55D', '\a', 'X', '\x2', '\x2', '\x55D', '\x56C', '\x3', 
		'\x2', '\x2', '\x2', '\x55E', '\x55F', '\a', 'Y', '\x2', '\x2', '\x55F', 
		'\x560', '\x5', '\xDC', 'o', '\x2', '\x560', '\x561', '\a', 'Z', '\x2', 
		'\x2', '\x561', '\x56C', '\x3', '\x2', '\x2', '\x2', '\x562', '\x563', 
		'\a', '[', '\x2', '\x2', '\x563', '\x564', '\x5', '\xDC', 'o', '\x2', 
		'\x564', '\x565', '\a', '\\', '\x2', '\x2', '\x565', '\x56C', '\x3', '\x2', 
		'\x2', '\x2', '\x566', '\x568', '\n', '\x12', '\x2', '\x2', '\x567', '\x566', 
		'\x3', '\x2', '\x2', '\x2', '\x568', '\x569', '\x3', '\x2', '\x2', '\x2', 
		'\x569', '\x567', '\x3', '\x2', '\x2', '\x2', '\x569', '\x56A', '\x3', 
		'\x2', '\x2', '\x2', '\x56A', '\x56C', '\x3', '\x2', '\x2', '\x2', '\x56B', 
		'\x55A', '\x3', '\x2', '\x2', '\x2', '\x56B', '\x55E', '\x3', '\x2', '\x2', 
		'\x2', '\x56B', '\x562', '\x3', '\x2', '\x2', '\x2', '\x56B', '\x567', 
		'\x3', '\x2', '\x2', '\x2', '\x56C', '\xDF', '\x3', '\x2', '\x2', '\x2', 
		'\x56D', '\x572', '\x5', '\xE2', 'r', '\x2', '\x56E', '\x56F', '\a', '|', 
		'\x2', '\x2', '\x56F', '\x571', '\x5', '\xE2', 'r', '\x2', '\x570', '\x56E', 
		'\x3', '\x2', '\x2', '\x2', '\x571', '\x574', '\x3', '\x2', '\x2', '\x2', 
		'\x572', '\x570', '\x3', '\x2', '\x2', '\x2', '\x572', '\x573', '\x3', 
		'\x2', '\x2', '\x2', '\x573', '\xE1', '\x3', '\x2', '\x2', '\x2', '\x574', 
		'\x572', '\x3', '\x2', '\x2', '\x2', '\x575', '\x577', '\x5', '\xE4', 
		's', '\x2', '\x576', '\x578', '\x5', '\x10E', '\x88', '\x2', '\x577', 
		'\x576', '\x3', '\x2', '\x2', '\x2', '\x577', '\x578', '\x3', '\x2', '\x2', 
		'\x2', '\x578', '\xE3', '\x3', '\x2', '\x2', '\x2', '\x579', '\x57F', 
		'\x5', '\xE6', 't', '\x2', '\x57A', '\x57B', '\x5', '\xE8', 'u', '\x2', 
		'\x57B', '\x57C', '\x5', '\xEA', 'v', '\x2', '\x57C', '\x57D', '\x5', 
		'\xEC', 'w', '\x2', '\x57D', '\x57F', '\x3', '\x2', '\x2', '\x2', '\x57E', 
		'\x579', '\x3', '\x2', '\x2', '\x2', '\x57E', '\x57A', '\x3', '\x2', '\x2', 
		'\x2', '\x57F', '\xE5', '\x3', '\x2', '\x2', '\x2', '\x580', '\x582', 
		'\x5', '\xEE', 'x', '\x2', '\x581', '\x583', '\a', '\x18', '\x2', '\x2', 
		'\x582', '\x581', '\x3', '\x2', '\x2', '\x2', '\x582', '\x583', '\x3', 
		'\x2', '\x2', '\x2', '\x583', '\x585', '\x3', '\x2', '\x2', '\x2', '\x584', 
		'\x580', '\x3', '\x2', '\x2', '\x2', '\x585', '\x588', '\x3', '\x2', '\x2', 
		'\x2', '\x586', '\x584', '\x3', '\x2', '\x2', '\x2', '\x586', '\x587', 
		'\x3', '\x2', '\x2', '\x2', '\x587', '\x589', '\x3', '\x2', '\x2', '\x2', 
		'\x588', '\x586', '\x3', '\x2', '\x2', '\x2', '\x589', '\x58A', '\x5', 
		'\xE8', 'u', '\x2', '\x58A', '\xE7', '\x3', '\x2', '\x2', '\x2', '\x58B', 
		'\x58C', '\b', 'u', '\x1', '\x2', '\x58C', '\x58E', '\x5', '\xF6', '|', 
		'\x2', '\x58D', '\x58F', '\x5', '\xCE', 'h', '\x2', '\x58E', '\x58D', 
		'\x3', '\x2', '\x2', '\x2', '\x58E', '\x58F', '\x3', '\x2', '\x2', '\x2', 
		'\x58F', '\x595', '\x3', '\x2', '\x2', '\x2', '\x590', '\x591', '\a', 
		'W', '\x2', '\x2', '\x591', '\x592', '\x5', '\xE6', 't', '\x2', '\x592', 
		'\x593', '\a', 'X', '\x2', '\x2', '\x593', '\x595', '\x3', '\x2', '\x2', 
		'\x2', '\x594', '\x58B', '\x3', '\x2', '\x2', '\x2', '\x594', '\x590', 
		'\x3', '\x2', '\x2', '\x2', '\x595', '\x5A4', '\x3', '\x2', '\x2', '\x2', 
		'\x596', '\x5A0', '\f', '\x4', '\x2', '\x2', '\x597', '\x5A1', '\x5', 
		'\xEA', 'v', '\x2', '\x598', '\x59A', '\a', 'Y', '\x2', '\x2', '\x599', 
		'\x59B', '\x5', '^', '\x30', '\x2', '\x59A', '\x599', '\x3', '\x2', '\x2', 
		'\x2', '\x59A', '\x59B', '\x3', '\x2', '\x2', '\x2', '\x59B', '\x59C', 
		'\x3', '\x2', '\x2', '\x2', '\x59C', '\x59E', '\a', 'Z', '\x2', '\x2', 
		'\x59D', '\x59F', '\x5', '\xCE', 'h', '\x2', '\x59E', '\x59D', '\x3', 
		'\x2', '\x2', '\x2', '\x59E', '\x59F', '\x3', '\x2', '\x2', '\x2', '\x59F', 
		'\x5A1', '\x3', '\x2', '\x2', '\x2', '\x5A0', '\x597', '\x3', '\x2', '\x2', 
		'\x2', '\x5A0', '\x598', '\x3', '\x2', '\x2', '\x2', '\x5A1', '\x5A3', 
		'\x3', '\x2', '\x2', '\x2', '\x5A2', '\x596', '\x3', '\x2', '\x2', '\x2', 
		'\x5A3', '\x5A6', '\x3', '\x2', '\x2', '\x2', '\x5A4', '\x5A2', '\x3', 
		'\x2', '\x2', '\x2', '\x5A4', '\x5A5', '\x3', '\x2', '\x2', '\x2', '\x5A5', 
		'\xE9', '\x3', '\x2', '\x2', '\x2', '\x5A6', '\x5A4', '\x3', '\x2', '\x2', 
		'\x2', '\x5A7', '\x5A9', '\a', 'W', '\x2', '\x2', '\x5A8', '\x5AA', '\x5', 
		'\x104', '\x83', '\x2', '\x5A9', '\x5A8', '\x3', '\x2', '\x2', '\x2', 
		'\x5A9', '\x5AA', '\x3', '\x2', '\x2', '\x2', '\x5AA', '\x5AB', '\x3', 
		'\x2', '\x2', '\x2', '\x5AB', '\x5AD', '\a', 'X', '\x2', '\x2', '\x5AC', 
		'\x5AE', '\x5', '\xF0', 'y', '\x2', '\x5AD', '\x5AC', '\x3', '\x2', '\x2', 
		'\x2', '\x5AD', '\x5AE', '\x3', '\x2', '\x2', '\x2', '\x5AE', '\x5B0', 
		'\x3', '\x2', '\x2', '\x2', '\x5AF', '\x5B1', '\x5', '\xF4', '{', '\x2', 
		'\x5B0', '\x5AF', '\x3', '\x2', '\x2', '\x2', '\x5B0', '\x5B1', '\x3', 
		'\x2', '\x2', '\x2', '\x5B1', '\x5B3', '\x3', '\x2', '\x2', '\x2', '\x5B2', 
		'\x5B4', '\x5', '\x174', '\xBB', '\x2', '\x5B3', '\x5B2', '\x3', '\x2', 
		'\x2', '\x2', '\x5B3', '\x5B4', '\x3', '\x2', '\x2', '\x2', '\x5B4', '\x5B6', 
		'\x3', '\x2', '\x2', '\x2', '\x5B5', '\x5B7', '\x5', '\xCE', 'h', '\x2', 
		'\x5B6', '\x5B5', '\x3', '\x2', '\x2', '\x2', '\x5B6', '\x5B7', '\x3', 
		'\x2', '\x2', '\x2', '\x5B7', '\xEB', '\x3', '\x2', '\x2', '\x2', '\x5B8', 
		'\x5B9', '\a', '~', '\x2', '\x2', '\x5B9', '\x5BB', '\x5', '\x9A', 'N', 
		'\x2', '\x5BA', '\x5BC', '\x5', '\xFA', '~', '\x2', '\x5BB', '\x5BA', 
		'\x3', '\x2', '\x2', '\x2', '\x5BB', '\x5BC', '\x3', '\x2', '\x2', '\x2', 
		'\x5BC', '\xED', '\x3', '\x2', '\x2', '\x2', '\x5BD', '\x5BF', '\t', '\x13', 
		'\x2', '\x2', '\x5BE', '\x5C0', '\x5', '\xCE', 'h', '\x2', '\x5BF', '\x5BE', 
		'\x3', '\x2', '\x2', '\x2', '\x5BF', '\x5C0', '\x3', '\x2', '\x2', '\x2', 
		'\x5C0', '\x5CC', '\x3', '\x2', '\x2', '\x2', '\x5C1', '\x5C3', '\x5', 
		'\f', '\a', '\x2', '\x5C2', '\x5C1', '\x3', '\x2', '\x2', '\x2', '\x5C2', 
		'\x5C3', '\x3', '\x2', '\x2', '\x2', '\x5C3', '\x5C4', '\x3', '\x2', '\x2', 
		'\x2', '\x5C4', '\x5C6', '\a', '_', '\x2', '\x2', '\x5C5', '\x5C7', '\x5', 
		'\xCE', 'h', '\x2', '\x5C6', '\x5C5', '\x3', '\x2', '\x2', '\x2', '\x5C6', 
		'\x5C7', '\x3', '\x2', '\x2', '\x2', '\x5C7', '\x5C9', '\x3', '\x2', '\x2', 
		'\x2', '\x5C8', '\x5CA', '\x5', '\xF0', 'y', '\x2', '\x5C9', '\x5C8', 
		'\x3', '\x2', '\x2', '\x2', '\x5C9', '\x5CA', '\x3', '\x2', '\x2', '\x2', 
		'\x5CA', '\x5CC', '\x3', '\x2', '\x2', '\x2', '\x5CB', '\x5BD', '\x3', 
		'\x2', '\x2', '\x2', '\x5CB', '\x5C2', '\x3', '\x2', '\x2', '\x2', '\x5CC', 
		'\xEF', '\x3', '\x2', '\x2', '\x2', '\x5CD', '\x5CF', '\x5', '\xF2', 'z', 
		'\x2', '\x5CE', '\x5CD', '\x3', '\x2', '\x2', '\x2', '\x5CF', '\x5D0', 
		'\x3', '\x2', '\x2', '\x2', '\x5D0', '\x5CE', '\x3', '\x2', '\x2', '\x2', 
		'\x5D0', '\x5D1', '\x3', '\x2', '\x2', '\x2', '\x5D1', '\xF1', '\x3', 
		'\x2', '\x2', '\x2', '\x5D2', '\x5D3', '\t', '\x14', '\x2', '\x2', '\x5D3', 
		'\xF3', '\x3', '\x2', '\x2', '\x2', '\x5D4', '\x5D5', '\t', '\x13', '\x2', 
		'\x2', '\x5D5', '\xF5', '\x3', '\x2', '\x2', '\x2', '\x5D6', '\x5D8', 
		'\a', '\x85', '\x2', '\x2', '\x5D7', '\x5D6', '\x3', '\x2', '\x2', '\x2', 
		'\x5D7', '\x5D8', '\x3', '\x2', '\x2', '\x2', '\x5D8', '\x5D9', '\x3', 
		'\x2', '\x2', '\x2', '\x5D9', '\x5DA', '\x5', '\x6', '\x4', '\x2', '\x5DA', 
		'\xF7', '\x3', '\x2', '\x2', '\x2', '\x5DB', '\x5DD', '\x5', '\x98', 'M', 
		'\x2', '\x5DC', '\x5DE', '\x5', '\xFA', '~', '\x2', '\x5DD', '\x5DC', 
		'\x3', '\x2', '\x2', '\x2', '\x5DD', '\x5DE', '\x3', '\x2', '\x2', '\x2', 
		'\x5DE', '\xF9', '\x3', '\x2', '\x2', '\x2', '\x5DF', '\x5E8', '\x5', 
		'\xFC', '\x7F', '\x2', '\x5E0', '\x5E2', '\x5', '\xFE', '\x80', '\x2', 
		'\x5E1', '\x5E0', '\x3', '\x2', '\x2', '\x2', '\x5E1', '\x5E2', '\x3', 
		'\x2', '\x2', '\x2', '\x5E2', '\x5E3', '\x3', '\x2', '\x2', '\x2', '\x5E3', 
		'\x5E4', '\x5', '\xEA', 'v', '\x2', '\x5E4', '\x5E5', '\x5', '\xEC', 'w', 
		'\x2', '\x5E5', '\x5E8', '\x3', '\x2', '\x2', '\x2', '\x5E6', '\x5E8', 
		'\x5', '\x100', '\x81', '\x2', '\x5E7', '\x5DF', '\x3', '\x2', '\x2', 
		'\x2', '\x5E7', '\x5E1', '\x3', '\x2', '\x2', '\x2', '\x5E7', '\x5E6', 
		'\x3', '\x2', '\x2', '\x2', '\x5E8', '\xFB', '\x3', '\x2', '\x2', '\x2', 
		'\x5E9', '\x5F3', '\x5', '\xFE', '\x80', '\x2', '\x5EA', '\x5EC', '\x5', 
		'\xEE', 'x', '\x2', '\x5EB', '\x5EA', '\x3', '\x2', '\x2', '\x2', '\x5EC', 
		'\x5ED', '\x3', '\x2', '\x2', '\x2', '\x5ED', '\x5EB', '\x3', '\x2', '\x2', 
		'\x2', '\x5ED', '\x5EE', '\x3', '\x2', '\x2', '\x2', '\x5EE', '\x5F0', 
		'\x3', '\x2', '\x2', '\x2', '\x5EF', '\x5F1', '\x5', '\xFE', '\x80', '\x2', 
		'\x5F0', '\x5EF', '\x3', '\x2', '\x2', '\x2', '\x5F0', '\x5F1', '\x3', 
		'\x2', '\x2', '\x2', '\x5F1', '\x5F3', '\x3', '\x2', '\x2', '\x2', '\x5F2', 
		'\x5E9', '\x3', '\x2', '\x2', '\x2', '\x5F2', '\x5EB', '\x3', '\x2', '\x2', 
		'\x2', '\x5F3', '\xFD', '\x3', '\x2', '\x2', '\x2', '\x5F4', '\x5F5', 
		'\b', '\x80', '\x1', '\x2', '\x5F5', '\x603', '\x5', '\xEA', 'v', '\x2', 
		'\x5F6', '\x5F8', '\a', 'Y', '\x2', '\x2', '\x5F7', '\x5F9', '\x5', '^', 
		'\x30', '\x2', '\x5F8', '\x5F7', '\x3', '\x2', '\x2', '\x2', '\x5F8', 
		'\x5F9', '\x3', '\x2', '\x2', '\x2', '\x5F9', '\x5FA', '\x3', '\x2', '\x2', 
		'\x2', '\x5FA', '\x5FC', '\a', 'Z', '\x2', '\x2', '\x5FB', '\x5FD', '\x5', 
		'\xCE', 'h', '\x2', '\x5FC', '\x5FB', '\x3', '\x2', '\x2', '\x2', '\x5FC', 
		'\x5FD', '\x3', '\x2', '\x2', '\x2', '\x5FD', '\x603', '\x3', '\x2', '\x2', 
		'\x2', '\x5FE', '\x5FF', '\a', 'W', '\x2', '\x2', '\x5FF', '\x600', '\x5', 
		'\xFC', '\x7F', '\x2', '\x600', '\x601', '\a', 'X', '\x2', '\x2', '\x601', 
		'\x603', '\x3', '\x2', '\x2', '\x2', '\x602', '\x5F4', '\x3', '\x2', '\x2', 
		'\x2', '\x602', '\x5F6', '\x3', '\x2', '\x2', '\x2', '\x602', '\x5FE', 
		'\x3', '\x2', '\x2', '\x2', '\x603', '\x613', '\x3', '\x2', '\x2', '\x2', 
		'\x604', '\x60F', '\f', '\x6', '\x2', '\x2', '\x605', '\x610', '\x5', 
		'\xEA', 'v', '\x2', '\x606', '\x607', '\x5', '\xFE', '\x80', '\x2', '\x607', 
		'\x609', '\a', 'Y', '\x2', '\x2', '\x608', '\x60A', '\x5', '^', '\x30', 
		'\x2', '\x609', '\x608', '\x3', '\x2', '\x2', '\x2', '\x609', '\x60A', 
		'\x3', '\x2', '\x2', '\x2', '\x60A', '\x60B', '\x3', '\x2', '\x2', '\x2', 
		'\x60B', '\x60D', '\a', 'Z', '\x2', '\x2', '\x60C', '\x60E', '\x5', '\xCE', 
		'h', '\x2', '\x60D', '\x60C', '\x3', '\x2', '\x2', '\x2', '\x60D', '\x60E', 
		'\x3', '\x2', '\x2', '\x2', '\x60E', '\x610', '\x3', '\x2', '\x2', '\x2', 
		'\x60F', '\x605', '\x3', '\x2', '\x2', '\x2', '\x60F', '\x606', '\x3', 
		'\x2', '\x2', '\x2', '\x610', '\x612', '\x3', '\x2', '\x2', '\x2', '\x611', 
		'\x604', '\x3', '\x2', '\x2', '\x2', '\x612', '\x615', '\x3', '\x2', '\x2', 
		'\x2', '\x613', '\x611', '\x3', '\x2', '\x2', '\x2', '\x613', '\x614', 
		'\x3', '\x2', '\x2', '\x2', '\x614', '\xFF', '\x3', '\x2', '\x2', '\x2', 
		'\x615', '\x613', '\x3', '\x2', '\x2', '\x2', '\x616', '\x618', '\x5', 
		'\xEE', 'x', '\x2', '\x617', '\x616', '\x3', '\x2', '\x2', '\x2', '\x618', 
		'\x61B', '\x3', '\x2', '\x2', '\x2', '\x619', '\x617', '\x3', '\x2', '\x2', 
		'\x2', '\x619', '\x61A', '\x3', '\x2', '\x2', '\x2', '\x61A', '\x61C', 
		'\x3', '\x2', '\x2', '\x2', '\x61B', '\x619', '\x3', '\x2', '\x2', '\x2', 
		'\x61C', '\x61D', '\x5', '\x102', '\x82', '\x2', '\x61D', '\x101', '\x3', 
		'\x2', '\x2', '\x2', '\x61E', '\x61F', '\b', '\x82', '\x1', '\x2', '\x61F', 
		'\x620', '\a', '\x85', '\x2', '\x2', '\x620', '\x62F', '\x3', '\x2', '\x2', 
		'\x2', '\x621', '\x62B', '\f', '\x4', '\x2', '\x2', '\x622', '\x62C', 
		'\x5', '\xEA', 'v', '\x2', '\x623', '\x625', '\a', 'Y', '\x2', '\x2', 
		'\x624', '\x626', '\x5', '^', '\x30', '\x2', '\x625', '\x624', '\x3', 
		'\x2', '\x2', '\x2', '\x625', '\x626', '\x3', '\x2', '\x2', '\x2', '\x626', 
		'\x627', '\x3', '\x2', '\x2', '\x2', '\x627', '\x629', '\a', 'Z', '\x2', 
		'\x2', '\x628', '\x62A', '\x5', '\xCE', 'h', '\x2', '\x629', '\x628', 
		'\x3', '\x2', '\x2', '\x2', '\x629', '\x62A', '\x3', '\x2', '\x2', '\x2', 
		'\x62A', '\x62C', '\x3', '\x2', '\x2', '\x2', '\x62B', '\x622', '\x3', 
		'\x2', '\x2', '\x2', '\x62B', '\x623', '\x3', '\x2', '\x2', '\x2', '\x62C', 
		'\x62E', '\x3', '\x2', '\x2', '\x2', '\x62D', '\x621', '\x3', '\x2', '\x2', 
		'\x2', '\x62E', '\x631', '\x3', '\x2', '\x2', '\x2', '\x62F', '\x62D', 
		'\x3', '\x2', '\x2', '\x2', '\x62F', '\x630', '\x3', '\x2', '\x2', '\x2', 
		'\x630', '\x103', '\x3', '\x2', '\x2', '\x2', '\x631', '\x62F', '\x3', 
		'\x2', '\x2', '\x2', '\x632', '\x637', '\x5', '\x106', '\x84', '\x2', 
		'\x633', '\x635', '\a', '|', '\x2', '\x2', '\x634', '\x633', '\x3', '\x2', 
		'\x2', '\x2', '\x634', '\x635', '\x3', '\x2', '\x2', '\x2', '\x635', '\x636', 
		'\x3', '\x2', '\x2', '\x2', '\x636', '\x638', '\a', '\x85', '\x2', '\x2', 
		'\x637', '\x634', '\x3', '\x2', '\x2', '\x2', '\x637', '\x638', '\x3', 
		'\x2', '\x2', '\x2', '\x638', '\x105', '\x3', '\x2', '\x2', '\x2', '\x639', 
		'\x63E', '\x5', '\x108', '\x85', '\x2', '\x63A', '\x63B', '\a', '|', '\x2', 
		'\x2', '\x63B', '\x63D', '\x5', '\x108', '\x85', '\x2', '\x63C', '\x63A', 
		'\x3', '\x2', '\x2', '\x2', '\x63D', '\x640', '\x3', '\x2', '\x2', '\x2', 
		'\x63E', '\x63C', '\x3', '\x2', '\x2', '\x2', '\x63E', '\x63F', '\x3', 
		'\x2', '\x2', '\x2', '\x63F', '\x107', '\x3', '\x2', '\x2', '\x2', '\x640', 
		'\x63E', '\x3', '\x2', '\x2', '\x2', '\x641', '\x643', '\x5', '\xCE', 
		'h', '\x2', '\x642', '\x641', '\x3', '\x2', '\x2', '\x2', '\x642', '\x643', 
		'\x3', '\x2', '\x2', '\x2', '\x643', '\x644', '\x3', '\x2', '\x2', '\x2', 
		'\x644', '\x649', '\x5', '\x8C', 'G', '\x2', '\x645', '\x64A', '\x5', 
		'\xE4', 's', '\x2', '\x646', '\x648', '\x5', '\xFA', '~', '\x2', '\x647', 
		'\x646', '\x3', '\x2', '\x2', '\x2', '\x647', '\x648', '\x3', '\x2', '\x2', 
		'\x2', '\x648', '\x64A', '\x3', '\x2', '\x2', '\x2', '\x649', '\x645', 
		'\x3', '\x2', '\x2', '\x2', '\x649', '\x647', '\x3', '\x2', '\x2', '\x2', 
		'\x64A', '\x64D', '\x3', '\x2', '\x2', '\x2', '\x64B', '\x64C', '\a', 
		'g', '\x2', '\x2', '\x64C', '\x64E', '\x5', '\x112', '\x8A', '\x2', '\x64D', 
		'\x64B', '\x3', '\x2', '\x2', '\x2', '\x64D', '\x64E', '\x3', '\x2', '\x2', 
		'\x2', '\x64E', '\x109', '\x3', '\x2', '\x2', '\x2', '\x64F', '\x651', 
		'\x5', '\xCE', 'h', '\x2', '\x650', '\x64F', '\x3', '\x2', '\x2', '\x2', 
		'\x650', '\x651', '\x3', '\x2', '\x2', '\x2', '\x651', '\x653', '\x3', 
		'\x2', '\x2', '\x2', '\x652', '\x654', '\x5', '\x8C', 'G', '\x2', '\x653', 
		'\x652', '\x3', '\x2', '\x2', '\x2', '\x653', '\x654', '\x3', '\x2', '\x2', 
		'\x2', '\x654', '\x655', '\x3', '\x2', '\x2', '\x2', '\x655', '\x657', 
		'\x5', '\xE4', 's', '\x2', '\x656', '\x658', '\x5', '\x12C', '\x97', '\x2', 
		'\x657', '\x656', '\x3', '\x2', '\x2', '\x2', '\x657', '\x658', '\x3', 
		'\x2', '\x2', '\x2', '\x658', '\x659', '\x3', '\x2', '\x2', '\x2', '\x659', 
		'\x65A', '\x5', '\x10C', '\x87', '\x2', '\x65A', '\x10B', '\x3', '\x2', 
		'\x2', '\x2', '\x65B', '\x65D', '\x5', '\x144', '\xA3', '\x2', '\x65C', 
		'\x65B', '\x3', '\x2', '\x2', '\x2', '\x65C', '\x65D', '\x3', '\x2', '\x2', 
		'\x2', '\x65D', '\x65E', '\x3', '\x2', '\x2', '\x2', '\x65E', '\x664', 
		'\x5', '\x66', '\x34', '\x2', '\x65F', '\x664', '\x5', '\x16A', '\xB6', 
		'\x2', '\x660', '\x661', '\a', 'g', '\x2', '\x2', '\x661', '\x662', '\t', 
		'\x15', '\x2', '\x2', '\x662', '\x664', '\a', '\x82', '\x2', '\x2', '\x663', 
		'\x65C', '\x3', '\x2', '\x2', '\x2', '\x663', '\x65F', '\x3', '\x2', '\x2', 
		'\x2', '\x663', '\x660', '\x3', '\x2', '\x2', '\x2', '\x664', '\x10D', 
		'\x3', '\x2', '\x2', '\x2', '\x665', '\x66B', '\x5', '\x110', '\x89', 
		'\x2', '\x666', '\x667', '\a', 'W', '\x2', '\x2', '\x667', '\x668', '\x5', 
		'$', '\x13', '\x2', '\x668', '\x669', '\a', 'X', '\x2', '\x2', '\x669', 
		'\x66B', '\x3', '\x2', '\x2', '\x2', '\x66A', '\x665', '\x3', '\x2', '\x2', 
		'\x2', '\x66A', '\x666', '\x3', '\x2', '\x2', '\x2', '\x66B', '\x10F', 
		'\x3', '\x2', '\x2', '\x2', '\x66C', '\x66D', '\a', 'g', '\x2', '\x2', 
		'\x66D', '\x670', '\x5', '\x112', '\x8A', '\x2', '\x66E', '\x670', '\x5', 
		'\x116', '\x8C', '\x2', '\x66F', '\x66C', '\x3', '\x2', '\x2', '\x2', 
		'\x66F', '\x66E', '\x3', '\x2', '\x2', '\x2', '\x670', '\x111', '\x3', 
		'\x2', '\x2', '\x2', '\x671', '\x674', '\x5', 'X', '-', '\x2', '\x672', 
		'\x674', '\x5', '\x116', '\x8C', '\x2', '\x673', '\x671', '\x3', '\x2', 
		'\x2', '\x2', '\x673', '\x672', '\x3', '\x2', '\x2', '\x2', '\x674', '\x113', 
		'\x3', '\x2', '\x2', '\x2', '\x675', '\x677', '\x5', '\x112', '\x8A', 
		'\x2', '\x676', '\x678', '\a', '\x85', '\x2', '\x2', '\x677', '\x676', 
		'\x3', '\x2', '\x2', '\x2', '\x677', '\x678', '\x3', '\x2', '\x2', '\x2', 
		'\x678', '\x680', '\x3', '\x2', '\x2', '\x2', '\x679', '\x67A', '\a', 
		'|', '\x2', '\x2', '\x67A', '\x67C', '\x5', '\x112', '\x8A', '\x2', '\x67B', 
		'\x67D', '\a', '\x85', '\x2', '\x2', '\x67C', '\x67B', '\x3', '\x2', '\x2', 
		'\x2', '\x67C', '\x67D', '\x3', '\x2', '\x2', '\x2', '\x67D', '\x67F', 
		'\x3', '\x2', '\x2', '\x2', '\x67E', '\x679', '\x3', '\x2', '\x2', '\x2', 
		'\x67F', '\x682', '\x3', '\x2', '\x2', '\x2', '\x680', '\x67E', '\x3', 
		'\x2', '\x2', '\x2', '\x680', '\x681', '\x3', '\x2', '\x2', '\x2', '\x681', 
		'\x115', '\x3', '\x2', '\x2', '\x2', '\x682', '\x680', '\x3', '\x2', '\x2', 
		'\x2', '\x683', '\x688', '\a', '[', '\x2', '\x2', '\x684', '\x686', '\x5', 
		'\x114', '\x8B', '\x2', '\x685', '\x687', '\a', '|', '\x2', '\x2', '\x686', 
		'\x685', '\x3', '\x2', '\x2', '\x2', '\x686', '\x687', '\x3', '\x2', '\x2', 
		'\x2', '\x687', '\x689', '\x3', '\x2', '\x2', '\x2', '\x688', '\x684', 
		'\x3', '\x2', '\x2', '\x2', '\x688', '\x689', '\x3', '\x2', '\x2', '\x2', 
		'\x689', '\x68A', '\x3', '\x2', '\x2', '\x2', '\x68A', '\x68B', '\a', 
		'\\', '\x2', '\x2', '\x68B', '\x117', '\x3', '\x2', '\x2', '\x2', '\x68C', 
		'\x68F', '\a', '\x86', '\x2', '\x2', '\x68D', '\x68F', '\x5', '\x158', 
		'\xAD', '\x2', '\x68E', '\x68C', '\x3', '\x2', '\x2', '\x2', '\x68E', 
		'\x68D', '\x3', '\x2', '\x2', '\x2', '\x68F', '\x119', '\x3', '\x2', '\x2', 
		'\x2', '\x690', '\x691', '\x5', '\x11C', '\x8F', '\x2', '\x691', '\x693', 
		'\a', '[', '\x2', '\x2', '\x692', '\x694', '\x5', '\x124', '\x93', '\x2', 
		'\x693', '\x692', '\x3', '\x2', '\x2', '\x2', '\x693', '\x694', '\x3', 
		'\x2', '\x2', '\x2', '\x694', '\x695', '\x3', '\x2', '\x2', '\x2', '\x695', 
		'\x696', '\a', '\\', '\x2', '\x2', '\x696', '\x11B', '\x3', '\x2', '\x2', 
		'\x2', '\x697', '\x699', '\x5', '\x122', '\x92', '\x2', '\x698', '\x69A', 
		'\x5', '\xCE', 'h', '\x2', '\x699', '\x698', '\x3', '\x2', '\x2', '\x2', 
		'\x699', '\x69A', '\x3', '\x2', '\x2', '\x2', '\x69A', '\x69F', '\x3', 
		'\x2', '\x2', '\x2', '\x69B', '\x69D', '\x5', '\x11E', '\x90', '\x2', 
		'\x69C', '\x69E', '\x5', '\x120', '\x91', '\x2', '\x69D', '\x69C', '\x3', 
		'\x2', '\x2', '\x2', '\x69D', '\x69E', '\x3', '\x2', '\x2', '\x2', '\x69E', 
		'\x6A0', '\x3', '\x2', '\x2', '\x2', '\x69F', '\x69B', '\x3', '\x2', '\x2', 
		'\x2', '\x69F', '\x6A0', '\x3', '\x2', '\x2', '\x2', '\x6A0', '\x6A2', 
		'\x3', '\x2', '\x2', '\x2', '\x6A1', '\x6A3', '\x5', '\x132', '\x9A', 
		'\x2', '\x6A2', '\x6A1', '\x3', '\x2', '\x2', '\x2', '\x6A2', '\x6A3', 
		'\x3', '\x2', '\x2', '\x2', '\x6A3', '\x6AF', '\x3', '\x2', '\x2', '\x2', 
		'\x6A4', '\x6A6', '\a', 'O', '\x2', '\x2', '\x6A5', '\x6A7', '\x5', '\xCE', 
		'h', '\x2', '\x6A6', '\x6A5', '\x3', '\x2', '\x2', '\x2', '\x6A6', '\x6A7', 
		'\x3', '\x2', '\x2', '\x2', '\x6A7', '\x6AC', '\x3', '\x2', '\x2', '\x2', 
		'\x6A8', '\x6AA', '\x5', '\x11E', '\x90', '\x2', '\x6A9', '\x6AB', '\x5', 
		'\x120', '\x91', '\x2', '\x6AA', '\x6A9', '\x3', '\x2', '\x2', '\x2', 
		'\x6AA', '\x6AB', '\x3', '\x2', '\x2', '\x2', '\x6AB', '\x6AD', '\x3', 
		'\x2', '\x2', '\x2', '\x6AC', '\x6A8', '\x3', '\x2', '\x2', '\x2', '\x6AC', 
		'\x6AD', '\x3', '\x2', '\x2', '\x2', '\x6AD', '\x6AF', '\x3', '\x2', '\x2', 
		'\x2', '\x6AE', '\x697', '\x3', '\x2', '\x2', '\x2', '\x6AE', '\x6A4', 
		'\x3', '\x2', '\x2', '\x2', '\x6AF', '\x11D', '\x3', '\x2', '\x2', '\x2', 
		'\x6B0', '\x6B2', '\x5', '\f', '\a', '\x2', '\x6B1', '\x6B0', '\x3', '\x2', 
		'\x2', '\x2', '\x6B1', '\x6B2', '\x3', '\x2', '\x2', '\x2', '\x6B2', '\x6B3', 
		'\x3', '\x2', '\x2', '\x2', '\x6B3', '\x6B4', '\x5', '\x118', '\x8D', 
		'\x2', '\x6B4', '\x11F', '\x3', '\x2', '\x2', '\x2', '\x6B5', '\x6B6', 
		'\a', '(', '\x2', '\x2', '\x6B6', '\x121', '\x3', '\x2', '\x2', '\x2', 
		'\x6B7', '\x6B8', '\t', '\x11', '\x2', '\x2', '\x6B8', '\x123', '\x3', 
		'\x2', '\x2', '\x2', '\x6B9', '\x6BE', '\x5', '\x126', '\x94', '\x2', 
		'\x6BA', '\x6BB', '\x5', '\x13C', '\x9F', '\x2', '\x6BB', '\x6BC', '\a', 
		'\x80', '\x2', '\x2', '\x6BC', '\x6BE', '\x3', '\x2', '\x2', '\x2', '\x6BD', 
		'\x6B9', '\x3', '\x2', '\x2', '\x2', '\x6BD', '\x6BA', '\x3', '\x2', '\x2', 
		'\x2', '\x6BE', '\x6BF', '\x3', '\x2', '\x2', '\x2', '\x6BF', '\x6BD', 
		'\x3', '\x2', '\x2', '\x2', '\x6BF', '\x6C0', '\x3', '\x2', '\x2', '\x2', 
		'\x6C0', '\x125', '\x3', '\x2', '\x2', '\x2', '\x6C1', '\x6C3', '\x5', 
		'\xCE', 'h', '\x2', '\x6C2', '\x6C1', '\x3', '\x2', '\x2', '\x2', '\x6C2', 
		'\x6C3', '\x3', '\x2', '\x2', '\x2', '\x6C3', '\x6C5', '\x3', '\x2', '\x2', 
		'\x2', '\x6C4', '\x6C6', '\x5', '\x8C', 'G', '\x2', '\x6C5', '\x6C4', 
		'\x3', '\x2', '\x2', '\x2', '\x6C5', '\x6C6', '\x3', '\x2', '\x2', '\x2', 
		'\x6C6', '\x6C8', '\x3', '\x2', '\x2', '\x2', '\x6C7', '\x6C9', '\x5', 
		'\x128', '\x95', '\x2', '\x6C8', '\x6C7', '\x3', '\x2', '\x2', '\x2', 
		'\x6C8', '\x6C9', '\x3', '\x2', '\x2', '\x2', '\x6C9', '\x6CA', '\x3', 
		'\x2', '\x2', '\x2', '\x6CA', '\x6D2', '\a', '\x82', '\x2', '\x2', '\x6CB', 
		'\x6D2', '\x5', '\x10A', '\x86', '\x2', '\x6CC', '\x6D2', '\x5', '\xC6', 
		'\x64', '\x2', '\x6CD', '\x6D2', '\x5', '\x84', '\x43', '\x2', '\x6CE', 
		'\x6D2', '\x5', '\x150', '\xA9', '\x2', '\x6CF', '\x6D2', '\x5', '\x80', 
		'\x41', '\x2', '\x6D0', '\x6D2', '\x5', '\x86', '\x44', '\x2', '\x6D1', 
		'\x6C2', '\x3', '\x2', '\x2', '\x2', '\x6D1', '\x6CB', '\x3', '\x2', '\x2', 
		'\x2', '\x6D1', '\x6CC', '\x3', '\x2', '\x2', '\x2', '\x6D1', '\x6CD', 
		'\x3', '\x2', '\x2', '\x2', '\x6D1', '\x6CE', '\x3', '\x2', '\x2', '\x2', 
		'\x6D1', '\x6CF', '\x3', '\x2', '\x2', '\x2', '\x6D1', '\x6D0', '\x3', 
		'\x2', '\x2', '\x2', '\x6D2', '\x127', '\x3', '\x2', '\x2', '\x2', '\x6D3', 
		'\x6D8', '\x5', '\x12A', '\x96', '\x2', '\x6D4', '\x6D5', '\a', '|', '\x2', 
		'\x2', '\x6D5', '\x6D7', '\x5', '\x12A', '\x96', '\x2', '\x6D6', '\x6D4', 
		'\x3', '\x2', '\x2', '\x2', '\x6D7', '\x6DA', '\x3', '\x2', '\x2', '\x2', 
		'\x6D8', '\x6D6', '\x3', '\x2', '\x2', '\x2', '\x6D8', '\x6D9', '\x3', 
		'\x2', '\x2', '\x2', '\x6D9', '\x129', '\x3', '\x2', '\x2', '\x2', '\x6DA', 
		'\x6D8', '\x3', '\x2', '\x2', '\x2', '\x6DB', '\x6E5', '\x5', '\xE4', 
		's', '\x2', '\x6DC', '\x6DE', '\x5', '\x12C', '\x97', '\x2', '\x6DD', 
		'\x6DC', '\x3', '\x2', '\x2', '\x2', '\x6DD', '\x6DE', '\x3', '\x2', '\x2', 
		'\x2', '\x6DE', '\x6E0', '\x3', '\x2', '\x2', '\x2', '\x6DF', '\x6E1', 
		'\x5', '\x130', '\x99', '\x2', '\x6E0', '\x6DF', '\x3', '\x2', '\x2', 
		'\x2', '\x6E0', '\x6E1', '\x3', '\x2', '\x2', '\x2', '\x6E1', '\x6E6', 
		'\x3', '\x2', '\x2', '\x2', '\x6E2', '\x6E4', '\x5', '\x110', '\x89', 
		'\x2', '\x6E3', '\x6E2', '\x3', '\x2', '\x2', '\x2', '\x6E3', '\x6E4', 
		'\x3', '\x2', '\x2', '\x2', '\x6E4', '\x6E6', '\x3', '\x2', '\x2', '\x2', 
		'\x6E5', '\x6DD', '\x3', '\x2', '\x2', '\x2', '\x6E5', '\x6E3', '\x3', 
		'\x2', '\x2', '\x2', '\x6E6', '\x6F0', '\x3', '\x2', '\x2', '\x2', '\x6E7', 
		'\x6E9', '\a', '\x86', '\x2', '\x2', '\x6E8', '\x6E7', '\x3', '\x2', '\x2', 
		'\x2', '\x6E8', '\x6E9', '\x3', '\x2', '\x2', '\x2', '\x6E9', '\x6EB', 
		'\x3', '\x2', '\x2', '\x2', '\x6EA', '\x6EC', '\x5', '\xCE', 'h', '\x2', 
		'\x6EB', '\x6EA', '\x3', '\x2', '\x2', '\x2', '\x6EB', '\x6EC', '\x3', 
		'\x2', '\x2', '\x2', '\x6EC', '\x6ED', '\x3', '\x2', '\x2', '\x2', '\x6ED', 
		'\x6EE', '\a', '\x80', '\x2', '\x2', '\x6EE', '\x6F0', '\x5', '^', '\x30', 
		'\x2', '\x6EF', '\x6DB', '\x3', '\x2', '\x2', '\x2', '\x6EF', '\x6E8', 
		'\x3', '\x2', '\x2', '\x2', '\x6F0', '\x12B', '\x3', '\x2', '\x2', '\x2', 
		'\x6F1', '\x6F3', '\x5', '\x12E', '\x98', '\x2', '\x6F2', '\x6F1', '\x3', 
		'\x2', '\x2', '\x2', '\x6F3', '\x6F4', '\x3', '\x2', '\x2', '\x2', '\x6F4', 
		'\x6F2', '\x3', '\x2', '\x2', '\x2', '\x6F4', '\x6F5', '\x3', '\x2', '\x2', 
		'\x2', '\x6F5', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x6F6', '\x6F7', 
		'\t', '\x16', '\x2', '\x2', '\x6F7', '\x12F', '\x3', '\x2', '\x2', '\x2', 
		'\x6F8', '\x6F9', '\a', 'g', '\x2', '\x2', '\x6F9', '\x6FA', '\a', '\x88', 
		'\x2', '\x2', '\x6FA', '\x6FB', '\b', '\x99', '\x1', '\x2', '\x6FB', '\x131', 
		'\x3', '\x2', '\x2', '\x2', '\x6FC', '\x6FD', '\a', '\x80', '\x2', '\x2', 
		'\x6FD', '\x6FE', '\x5', '\x134', '\x9B', '\x2', '\x6FE', '\x133', '\x3', 
		'\x2', '\x2', '\x2', '\x6FF', '\x701', '\x5', '\x136', '\x9C', '\x2', 
		'\x700', '\x702', '\a', '\x85', '\x2', '\x2', '\x701', '\x700', '\x3', 
		'\x2', '\x2', '\x2', '\x701', '\x702', '\x3', '\x2', '\x2', '\x2', '\x702', 
		'\x70A', '\x3', '\x2', '\x2', '\x2', '\x703', '\x704', '\a', '|', '\x2', 
		'\x2', '\x704', '\x706', '\x5', '\x136', '\x9C', '\x2', '\x705', '\x707', 
		'\a', '\x85', '\x2', '\x2', '\x706', '\x705', '\x3', '\x2', '\x2', '\x2', 
		'\x706', '\x707', '\x3', '\x2', '\x2', '\x2', '\x707', '\x709', '\x3', 
		'\x2', '\x2', '\x2', '\x708', '\x703', '\x3', '\x2', '\x2', '\x2', '\x709', 
		'\x70C', '\x3', '\x2', '\x2', '\x2', '\x70A', '\x708', '\x3', '\x2', '\x2', 
		'\x2', '\x70A', '\x70B', '\x3', '\x2', '\x2', '\x2', '\x70B', '\x135', 
		'\x3', '\x2', '\x2', '\x2', '\x70C', '\x70A', '\x3', '\x2', '\x2', '\x2', 
		'\x70D', '\x70F', '\x5', '\xCE', 'h', '\x2', '\x70E', '\x70D', '\x3', 
		'\x2', '\x2', '\x2', '\x70E', '\x70F', '\x3', '\x2', '\x2', '\x2', '\x70F', 
		'\x71C', '\x3', '\x2', '\x2', '\x2', '\x710', '\x71D', '\x5', '\x13A', 
		'\x9E', '\x2', '\x711', '\x713', '\a', 'R', '\x2', '\x2', '\x712', '\x714', 
		'\x5', '\x13C', '\x9F', '\x2', '\x713', '\x712', '\x3', '\x2', '\x2', 
		'\x2', '\x713', '\x714', '\x3', '\x2', '\x2', '\x2', '\x714', '\x715', 
		'\x3', '\x2', '\x2', '\x2', '\x715', '\x71D', '\x5', '\x13A', '\x9E', 
		'\x2', '\x716', '\x718', '\x5', '\x13C', '\x9F', '\x2', '\x717', '\x719', 
		'\a', 'R', '\x2', '\x2', '\x718', '\x717', '\x3', '\x2', '\x2', '\x2', 
		'\x718', '\x719', '\x3', '\x2', '\x2', '\x2', '\x719', '\x71A', '\x3', 
		'\x2', '\x2', '\x2', '\x71A', '\x71B', '\x5', '\x13A', '\x9E', '\x2', 
		'\x71B', '\x71D', '\x3', '\x2', '\x2', '\x2', '\x71C', '\x710', '\x3', 
		'\x2', '\x2', '\x2', '\x71C', '\x711', '\x3', '\x2', '\x2', '\x2', '\x71C', 
		'\x716', '\x3', '\x2', '\x2', '\x2', '\x71D', '\x137', '\x3', '\x2', '\x2', 
		'\x2', '\x71E', '\x720', '\x5', '\f', '\a', '\x2', '\x71F', '\x71E', '\x3', 
		'\x2', '\x2', '\x2', '\x71F', '\x720', '\x3', '\x2', '\x2', '\x2', '\x720', 
		'\x721', '\x3', '\x2', '\x2', '\x2', '\x721', '\x724', '\x5', '\x118', 
		'\x8D', '\x2', '\x722', '\x724', '\x5', '\xA4', 'S', '\x2', '\x723', '\x71F', 
		'\x3', '\x2', '\x2', '\x2', '\x723', '\x722', '\x3', '\x2', '\x2', '\x2', 
		'\x724', '\x139', '\x3', '\x2', '\x2', '\x2', '\x725', '\x726', '\x5', 
		'\x138', '\x9D', '\x2', '\x726', '\x13B', '\x3', '\x2', '\x2', '\x2', 
		'\x727', '\x728', '\t', '\x17', '\x2', '\x2', '\x728', '\x13D', '\x3', 
		'\x2', '\x2', '\x2', '\x729', '\x72A', '\a', '\x36', '\x2', '\x2', '\x72A', 
		'\x72B', '\x5', '\x140', '\xA1', '\x2', '\x72B', '\x13F', '\x3', '\x2', 
		'\x2', '\x2', '\x72C', '\x72E', '\x5', '\x98', 'M', '\x2', '\x72D', '\x72F', 
		'\x5', '\x142', '\xA2', '\x2', '\x72E', '\x72D', '\x3', '\x2', '\x2', 
		'\x2', '\x72E', '\x72F', '\x3', '\x2', '\x2', '\x2', '\x72F', '\x141', 
		'\x3', '\x2', '\x2', '\x2', '\x730', '\x732', '\x5', '\xEE', 'x', '\x2', 
		'\x731', '\x733', '\x5', '\x142', '\xA2', '\x2', '\x732', '\x731', '\x3', 
		'\x2', '\x2', '\x2', '\x732', '\x733', '\x3', '\x2', '\x2', '\x2', '\x733', 
		'\x143', '\x3', '\x2', '\x2', '\x2', '\x734', '\x735', '\a', '\x80', '\x2', 
		'\x2', '\x735', '\x736', '\x5', '\x146', '\xA4', '\x2', '\x736', '\x145', 
		'\x3', '\x2', '\x2', '\x2', '\x737', '\x739', '\x5', '\x148', '\xA5', 
		'\x2', '\x738', '\x73A', '\a', '\x85', '\x2', '\x2', '\x739', '\x738', 
		'\x3', '\x2', '\x2', '\x2', '\x739', '\x73A', '\x3', '\x2', '\x2', '\x2', 
		'\x73A', '\x742', '\x3', '\x2', '\x2', '\x2', '\x73B', '\x73C', '\a', 
		'|', '\x2', '\x2', '\x73C', '\x73E', '\x5', '\x148', '\xA5', '\x2', '\x73D', 
		'\x73F', '\a', '\x85', '\x2', '\x2', '\x73E', '\x73D', '\x3', '\x2', '\x2', 
		'\x2', '\x73E', '\x73F', '\x3', '\x2', '\x2', '\x2', '\x73F', '\x741', 
		'\x3', '\x2', '\x2', '\x2', '\x740', '\x73B', '\x3', '\x2', '\x2', '\x2', 
		'\x741', '\x744', '\x3', '\x2', '\x2', '\x2', '\x742', '\x740', '\x3', 
		'\x2', '\x2', '\x2', '\x742', '\x743', '\x3', '\x2', '\x2', '\x2', '\x743', 
		'\x147', '\x3', '\x2', '\x2', '\x2', '\x744', '\x742', '\x3', '\x2', '\x2', 
		'\x2', '\x745', '\x74C', '\x5', '\x14A', '\xA6', '\x2', '\x746', '\x748', 
		'\a', 'W', '\x2', '\x2', '\x747', '\x749', '\x5', '$', '\x13', '\x2', 
		'\x748', '\x747', '\x3', '\x2', '\x2', '\x2', '\x748', '\x749', '\x3', 
		'\x2', '\x2', '\x2', '\x749', '\x74A', '\x3', '\x2', '\x2', '\x2', '\x74A', 
		'\x74D', '\a', 'X', '\x2', '\x2', '\x74B', '\x74D', '\x5', '\x116', '\x8C', 
		'\x2', '\x74C', '\x746', '\x3', '\x2', '\x2', '\x2', '\x74C', '\x74B', 
		'\x3', '\x2', '\x2', '\x2', '\x74D', '\x149', '\x3', '\x2', '\x2', '\x2', 
		'\x74E', '\x751', '\x5', '\x138', '\x9D', '\x2', '\x74F', '\x751', '\a', 
		'\x86', '\x2', '\x2', '\x750', '\x74E', '\x3', '\x2', '\x2', '\x2', '\x750', 
		'\x74F', '\x3', '\x2', '\x2', '\x2', '\x751', '\x14B', '\x3', '\x2', '\x2', 
		'\x2', '\x752', '\x753', '\a', '\x36', '\x2', '\x2', '\x753', '\x754', 
		'\x5', '\x17C', '\xBF', '\x2', '\x754', '\x14D', '\x3', '\x2', '\x2', 
		'\x2', '\x755', '\x759', '\a', '\x36', '\x2', '\x2', '\x756', '\x757', 
		'\a', '\x6', '\x2', '\x2', '\x757', '\x75A', '\a', '\x86', '\x2', '\x2', 
		'\x758', '\x75A', '\a', '\x8E', '\x2', '\x2', '\x759', '\x756', '\x3', 
		'\x2', '\x2', '\x2', '\x759', '\x758', '\x3', '\x2', '\x2', '\x2', '\x75A', 
		'\x14F', '\x3', '\x2', '\x2', '\x2', '\x75B', '\x75C', '\a', '\x46', '\x2', 
		'\x2', '\x75C', '\x75D', '\a', 'h', '\x2', '\x2', '\x75D', '\x75E', '\x5', 
		'\x152', '\xAA', '\x2', '\x75E', '\x75F', '\a', 'i', '\x2', '\x2', '\x75F', 
		'\x760', '\x5', '|', '?', '\x2', '\x760', '\x151', '\x3', '\x2', '\x2', 
		'\x2', '\x761', '\x766', '\x5', '\x154', '\xAB', '\x2', '\x762', '\x763', 
		'\a', '|', '\x2', '\x2', '\x763', '\x765', '\x5', '\x154', '\xAB', '\x2', 
		'\x764', '\x762', '\x3', '\x2', '\x2', '\x2', '\x765', '\x768', '\x3', 
		'\x2', '\x2', '\x2', '\x766', '\x764', '\x3', '\x2', '\x2', '\x2', '\x766', 
		'\x767', '\x3', '\x2', '\x2', '\x2', '\x767', '\x153', '\x3', '\x2', '\x2', 
		'\x2', '\x768', '\x766', '\x3', '\x2', '\x2', '\x2', '\x769', '\x76C', 
		'\x5', '\x156', '\xAC', '\x2', '\x76A', '\x76C', '\x5', '\x108', '\x85', 
		'\x2', '\x76B', '\x769', '\x3', '\x2', '\x2', '\x2', '\x76B', '\x76A', 
		'\x3', '\x2', '\x2', '\x2', '\x76C', '\x155', '\x3', '\x2', '\x2', '\x2', 
		'\x76D', '\x76E', '\a', '\x46', '\x2', '\x2', '\x76E', '\x76F', '\a', 
		'h', '\x2', '\x2', '\x76F', '\x770', '\x5', '\x152', '\xAA', '\x2', '\x770', 
		'\x771', '\a', 'i', '\x2', '\x2', '\x771', '\x773', '\x3', '\x2', '\x2', 
		'\x2', '\x772', '\x76D', '\x3', '\x2', '\x2', '\x2', '\x772', '\x773', 
		'\x3', '\x2', '\x2', '\x2', '\x773', '\x774', '\x3', '\x2', '\x2', '\x2', 
		'\x774', '\x777', '\a', '\x17', '\x2', '\x2', '\x775', '\x777', '\a', 
		'N', '\x2', '\x2', '\x776', '\x772', '\x3', '\x2', '\x2', '\x2', '\x776', 
		'\x775', '\x3', '\x2', '\x2', '\x2', '\x777', '\x783', '\x3', '\x2', '\x2', 
		'\x2', '\x778', '\x77A', '\a', '\x85', '\x2', '\x2', '\x779', '\x778', 
		'\x3', '\x2', '\x2', '\x2', '\x779', '\x77A', '\x3', '\x2', '\x2', '\x2', 
		'\x77A', '\x77C', '\x3', '\x2', '\x2', '\x2', '\x77B', '\x77D', '\a', 
		'\x86', '\x2', '\x2', '\x77C', '\x77B', '\x3', '\x2', '\x2', '\x2', '\x77C', 
		'\x77D', '\x3', '\x2', '\x2', '\x2', '\x77D', '\x784', '\x3', '\x2', '\x2', 
		'\x2', '\x77E', '\x780', '\a', '\x86', '\x2', '\x2', '\x77F', '\x77E', 
		'\x3', '\x2', '\x2', '\x2', '\x77F', '\x780', '\x3', '\x2', '\x2', '\x2', 
		'\x780', '\x781', '\x3', '\x2', '\x2', '\x2', '\x781', '\x782', '\a', 
		'g', '\x2', '\x2', '\x782', '\x784', '\x5', '\xF8', '}', '\x2', '\x783', 
		'\x779', '\x3', '\x2', '\x2', '\x2', '\x783', '\x77F', '\x3', '\x2', '\x2', 
		'\x2', '\x784', '\x157', '\x3', '\x2', '\x2', '\x2', '\x785', '\x786', 
		'\x5', '\x15C', '\xAF', '\x2', '\x786', '\x788', '\a', 'h', '\x2', '\x2', 
		'\x787', '\x789', '\x5', '\x15E', '\xB0', '\x2', '\x788', '\x787', '\x3', 
		'\x2', '\x2', '\x2', '\x788', '\x789', '\x3', '\x2', '\x2', '\x2', '\x789', 
		'\x78A', '\x3', '\x2', '\x2', '\x2', '\x78A', '\x78B', '\a', 'i', '\x2', 
		'\x2', '\x78B', '\x159', '\x3', '\x2', '\x2', '\x2', '\x78C', '\x798', 
		'\x5', '\x158', '\xAD', '\x2', '\x78D', '\x790', '\x5', '\x14C', '\xA7', 
		'\x2', '\x78E', '\x790', '\x5', '\x14E', '\xA8', '\x2', '\x78F', '\x78D', 
		'\x3', '\x2', '\x2', '\x2', '\x78F', '\x78E', '\x3', '\x2', '\x2', '\x2', 
		'\x790', '\x791', '\x3', '\x2', '\x2', '\x2', '\x791', '\x793', '\a', 
		'h', '\x2', '\x2', '\x792', '\x794', '\x5', '\x15E', '\xB0', '\x2', '\x793', 
		'\x792', '\x3', '\x2', '\x2', '\x2', '\x793', '\x794', '\x3', '\x2', '\x2', 
		'\x2', '\x794', '\x795', '\x3', '\x2', '\x2', '\x2', '\x795', '\x796', 
		'\a', 'i', '\x2', '\x2', '\x796', '\x798', '\x3', '\x2', '\x2', '\x2', 
		'\x797', '\x78C', '\x3', '\x2', '\x2', '\x2', '\x797', '\x78F', '\x3', 
		'\x2', '\x2', '\x2', '\x798', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x799', 
		'\x79A', '\a', '\x86', '\x2', '\x2', '\x79A', '\x15D', '\x3', '\x2', '\x2', 
		'\x2', '\x79B', '\x79D', '\x5', '\x160', '\xB1', '\x2', '\x79C', '\x79E', 
		'\a', '\x85', '\x2', '\x2', '\x79D', '\x79C', '\x3', '\x2', '\x2', '\x2', 
		'\x79D', '\x79E', '\x3', '\x2', '\x2', '\x2', '\x79E', '\x7A6', '\x3', 
		'\x2', '\x2', '\x2', '\x79F', '\x7A0', '\a', '|', '\x2', '\x2', '\x7A0', 
		'\x7A2', '\x5', '\x160', '\xB1', '\x2', '\x7A1', '\x7A3', '\a', '\x85', 
		'\x2', '\x2', '\x7A2', '\x7A1', '\x3', '\x2', '\x2', '\x2', '\x7A2', '\x7A3', 
		'\x3', '\x2', '\x2', '\x2', '\x7A3', '\x7A5', '\x3', '\x2', '\x2', '\x2', 
		'\x7A4', '\x79F', '\x3', '\x2', '\x2', '\x2', '\x7A5', '\x7A8', '\x3', 
		'\x2', '\x2', '\x2', '\x7A6', '\x7A4', '\x3', '\x2', '\x2', '\x2', '\x7A6', 
		'\x7A7', '\x3', '\x2', '\x2', '\x2', '\x7A7', '\x15F', '\x3', '\x2', '\x2', 
		'\x2', '\x7A8', '\x7A6', '\x3', '\x2', '\x2', '\x2', '\x7A9', '\x7AD', 
		'\x5', '\xF8', '}', '\x2', '\x7AA', '\x7AD', '\x5', '^', '\x30', '\x2', 
		'\x7AB', '\x7AD', '\x5', '\x6', '\x4', '\x2', '\x7AC', '\x7A9', '\x3', 
		'\x2', '\x2', '\x2', '\x7AC', '\x7AA', '\x3', '\x2', '\x2', '\x2', '\x7AC', 
		'\x7AB', '\x3', '\x2', '\x2', '\x2', '\x7AD', '\x161', '\x3', '\x2', '\x2', 
		'\x2', '\x7AE', '\x7AF', '\a', 'N', '\x2', '\x2', '\x7AF', '\x7B5', '\x5', 
		'\f', '\a', '\x2', '\x7B0', '\x7B6', '\a', '\x86', '\x2', '\x2', '\x7B1', 
		'\x7B3', '\a', '\x46', '\x2', '\x2', '\x7B2', '\x7B1', '\x3', '\x2', '\x2', 
		'\x2', '\x7B2', '\x7B3', '\x3', '\x2', '\x2', '\x2', '\x7B3', '\x7B4', 
		'\x3', '\x2', '\x2', '\x2', '\x7B4', '\x7B6', '\x5', '\x158', '\xAD', 
		'\x2', '\x7B5', '\x7B0', '\x3', '\x2', '\x2', '\x2', '\x7B5', '\x7B2', 
		'\x3', '\x2', '\x2', '\x2', '\x7B6', '\x163', '\x3', '\x2', '\x2', '\x2', 
		'\x7B7', '\x7B9', '\a', '&', '\x2', '\x2', '\x7B8', '\x7B7', '\x3', '\x2', 
		'\x2', '\x2', '\x7B8', '\x7B9', '\x3', '\x2', '\x2', '\x2', '\x7B9', '\x7BA', 
		'\x3', '\x2', '\x2', '\x2', '\x7BA', '\x7BB', '\a', '\x46', '\x2', '\x2', 
		'\x7BB', '\x7BC', '\x5', '|', '?', '\x2', '\x7BC', '\x165', '\x3', '\x2', 
		'\x2', '\x2', '\x7BD', '\x7BE', '\a', '\x46', '\x2', '\x2', '\x7BE', '\x7BF', 
		'\a', 'h', '\x2', '\x2', '\x7BF', '\x7C0', '\a', 'i', '\x2', '\x2', '\x7C0', 
		'\x7C1', '\x5', '|', '?', '\x2', '\x7C1', '\x167', '\x3', '\x2', '\x2', 
		'\x2', '\x7C2', '\x7C3', '\a', 'K', '\x2', '\x2', '\x7C3', '\x7C4', '\x5', 
		'\x66', '\x34', '\x2', '\x7C4', '\x7C5', '\x5', '\x16C', '\xB7', '\x2', 
		'\x7C5', '\x169', '\x3', '\x2', '\x2', '\x2', '\x7C6', '\x7C8', '\a', 
		'K', '\x2', '\x2', '\x7C7', '\x7C9', '\x5', '\x144', '\xA3', '\x2', '\x7C8', 
		'\x7C7', '\x3', '\x2', '\x2', '\x2', '\x7C8', '\x7C9', '\x3', '\x2', '\x2', 
		'\x2', '\x7C9', '\x7CA', '\x3', '\x2', '\x2', '\x2', '\x7CA', '\x7CB', 
		'\x5', '\x66', '\x34', '\x2', '\x7CB', '\x7CC', '\x5', '\x16C', '\xB7', 
		'\x2', '\x7CC', '\x16B', '\x3', '\x2', '\x2', '\x2', '\x7CD', '\x7CF', 
		'\x5', '\x16E', '\xB8', '\x2', '\x7CE', '\x7CD', '\x3', '\x2', '\x2', 
		'\x2', '\x7CF', '\x7D0', '\x3', '\x2', '\x2', '\x2', '\x7D0', '\x7CE', 
		'\x3', '\x2', '\x2', '\x2', '\x7D0', '\x7D1', '\x3', '\x2', '\x2', '\x2', 
		'\x7D1', '\x16D', '\x3', '\x2', '\x2', '\x2', '\x7D2', '\x7D3', '\a', 
		'\x13', '\x2', '\x2', '\x7D3', '\x7D4', '\a', 'W', '\x2', '\x2', '\x7D4', 
		'\x7D5', '\x5', '\x170', '\xB9', '\x2', '\x7D5', '\x7D6', '\a', 'X', '\x2', 
		'\x2', '\x7D6', '\x7D7', '\x5', '\x66', '\x34', '\x2', '\x7D7', '\x16F', 
		'\x3', '\x2', '\x2', '\x2', '\x7D8', '\x7DA', '\x5', '\xCE', 'h', '\x2', 
		'\x7D9', '\x7D8', '\x3', '\x2', '\x2', '\x2', '\x7D9', '\x7DA', '\x3', 
		'\x2', '\x2', '\x2', '\x7DA', '\x7DB', '\x3', '\x2', '\x2', '\x2', '\x7DB', 
		'\x7DE', '\x5', '\x98', 'M', '\x2', '\x7DC', '\x7DF', '\x5', '\xE4', 's', 
		'\x2', '\x7DD', '\x7DF', '\x5', '\xFA', '~', '\x2', '\x7DE', '\x7DC', 
		'\x3', '\x2', '\x2', '\x2', '\x7DE', '\x7DD', '\x3', '\x2', '\x2', '\x2', 
		'\x7DE', '\x7DF', '\x3', '\x2', '\x2', '\x2', '\x7DF', '\x7E2', '\x3', 
		'\x2', '\x2', '\x2', '\x7E0', '\x7E2', '\a', '\x85', '\x2', '\x2', '\x7E1', 
		'\x7D9', '\x3', '\x2', '\x2', '\x2', '\x7E1', '\x7E0', '\x3', '\x2', '\x2', 
		'\x2', '\x7E2', '\x171', '\x3', '\x2', '\x2', '\x2', '\x7E3', '\x7E5', 
		'\a', 'I', '\x2', '\x2', '\x7E4', '\x7E6', '\x5', 'X', '-', '\x2', '\x7E5', 
		'\x7E4', '\x3', '\x2', '\x2', '\x2', '\x7E5', '\x7E6', '\x3', '\x2', '\x2', 
		'\x2', '\x7E6', '\x173', '\x3', '\x2', '\x2', '\x2', '\x7E7', '\x7EA', 
		'\x5', '\x176', '\xBC', '\x2', '\x7E8', '\x7EA', '\x5', '\x17A', '\xBE', 
		'\x2', '\x7E9', '\x7E7', '\x3', '\x2', '\x2', '\x2', '\x7E9', '\x7E8', 
		'\x3', '\x2', '\x2', '\x2', '\x7EA', '\x175', '\x3', '\x2', '\x2', '\x2', 
		'\x7EB', '\x7EC', '\a', 'I', '\x2', '\x2', '\x7EC', '\x7EE', '\a', 'W', 
		'\x2', '\x2', '\x7ED', '\x7EF', '\x5', '\x178', '\xBD', '\x2', '\x7EE', 
		'\x7ED', '\x3', '\x2', '\x2', '\x2', '\x7EE', '\x7EF', '\x3', '\x2', '\x2', 
		'\x2', '\x7EF', '\x7F0', '\x3', '\x2', '\x2', '\x2', '\x7F0', '\x7F1', 
		'\a', 'X', '\x2', '\x2', '\x7F1', '\x177', '\x3', '\x2', '\x2', '\x2', 
		'\x7F2', '\x7F4', '\x5', '\xF8', '}', '\x2', '\x7F3', '\x7F5', '\a', '\x85', 
		'\x2', '\x2', '\x7F4', '\x7F3', '\x3', '\x2', '\x2', '\x2', '\x7F4', '\x7F5', 
		'\x3', '\x2', '\x2', '\x2', '\x7F5', '\x7FD', '\x3', '\x2', '\x2', '\x2', 
		'\x7F6', '\x7F7', '\a', '|', '\x2', '\x2', '\x7F7', '\x7F9', '\x5', '\xF8', 
		'}', '\x2', '\x7F8', '\x7FA', '\a', '\x85', '\x2', '\x2', '\x7F9', '\x7F8', 
		'\x3', '\x2', '\x2', '\x2', '\x7F9', '\x7FA', '\x3', '\x2', '\x2', '\x2', 
		'\x7FA', '\x7FC', '\x3', '\x2', '\x2', '\x2', '\x7FB', '\x7F6', '\x3', 
		'\x2', '\x2', '\x2', '\x7FC', '\x7FF', '\x3', '\x2', '\x2', '\x2', '\x7FD', 
		'\x7FB', '\x3', '\x2', '\x2', '\x2', '\x7FD', '\x7FE', '\x3', '\x2', '\x2', 
		'\x2', '\x7FE', '\x179', '\x3', '\x2', '\x2', '\x2', '\x7FF', '\x7FD', 
		'\x3', '\x2', '\x2', '\x2', '\x800', '\x801', '\a', '\x34', '\x2', '\x2', 
		'\x801', '\x802', '\a', 'W', '\x2', '\x2', '\x802', '\x803', '\x5', '^', 
		'\x30', '\x2', '\x803', '\x804', '\a', 'X', '\x2', '\x2', '\x804', '\x807', 
		'\x3', '\x2', '\x2', '\x2', '\x805', '\x807', '\a', '\x34', '\x2', '\x2', 
		'\x806', '\x800', '\x3', '\x2', '\x2', '\x2', '\x806', '\x805', '\x3', 
		'\x2', '\x2', '\x2', '\x807', '\x17B', '\x3', '\x2', '\x2', '\x2', '\x808', 
		'\x80B', '\a', '\x33', '\x2', '\x2', '\x809', '\x80A', '\a', 'Y', '\x2', 
		'\x2', '\x80A', '\x80C', '\a', 'Z', '\x2', '\x2', '\x80B', '\x809', '\x3', 
		'\x2', '\x2', '\x2', '\x80B', '\x80C', '\x3', '\x2', '\x2', '\x2', '\x80C', 
		'\x83C', '\x3', '\x2', '\x2', '\x2', '\x80D', '\x810', '\a', '\x1E', '\x2', 
		'\x2', '\x80E', '\x80F', '\a', 'Y', '\x2', '\x2', '\x80F', '\x811', '\a', 
		'Z', '\x2', '\x2', '\x810', '\x80E', '\x3', '\x2', '\x2', '\x2', '\x810', 
		'\x811', '\x3', '\x2', '\x2', '\x2', '\x811', '\x83C', '\x3', '\x2', '\x2', 
		'\x2', '\x812', '\x83C', '\a', ']', '\x2', '\x2', '\x813', '\x83C', '\a', 
		'^', '\x2', '\x2', '\x814', '\x83C', '\a', '_', '\x2', '\x2', '\x815', 
		'\x83C', '\a', '`', '\x2', '\x2', '\x816', '\x83C', '\a', '\x61', '\x2', 
		'\x2', '\x817', '\x83C', '\a', '\x62', '\x2', '\x2', '\x818', '\x83C', 
		'\a', '\x63', '\x2', '\x2', '\x819', '\x83C', '\a', '\x64', '\x2', '\x2', 
		'\x81A', '\x83C', '\a', '\x65', '\x2', '\x2', '\x81B', '\x83C', '\a', 
		'\x66', '\x2', '\x2', '\x81C', '\x83C', '\a', 'g', '\x2', '\x2', '\x81D', 
		'\x83C', '\a', 'i', '\x2', '\x2', '\x81E', '\x83C', '\a', 'h', '\x2', 
		'\x2', '\x81F', '\x83C', '\a', 'w', '\x2', '\x2', '\x820', '\x83C', '\a', 
		'j', '\x2', '\x2', '\x821', '\x83C', '\a', 'k', '\x2', '\x2', '\x822', 
		'\x83C', '\a', 'l', '\x2', '\x2', '\x823', '\x83C', '\a', 'n', '\x2', 
		'\x2', '\x824', '\x83C', '\a', 'o', '\x2', '\x2', '\x825', '\x83C', '\a', 
		'p', '\x2', '\x2', '\x826', '\x83C', '\a', 'q', '\x2', '\x2', '\x827', 
		'\x828', '\a', 'h', '\x2', '\x2', '\x828', '\x83C', '\a', 'h', '\x2', 
		'\x2', '\x829', '\x82A', '\a', 'i', '\x2', '\x2', '\x82A', '\x83C', '\a', 
		'i', '\x2', '\x2', '\x82B', '\x83C', '\a', 's', '\x2', '\x2', '\x82C', 
		'\x83C', '\a', 'r', '\x2', '\x2', '\x82D', '\x83C', '\a', 't', '\x2', 
		'\x2', '\x82E', '\x83C', '\a', 'u', '\x2', '\x2', '\x82F', '\x83C', '\a', 
		'v', '\x2', '\x2', '\x830', '\x83C', '\a', 'x', '\x2', '\x2', '\x831', 
		'\x83C', '\a', 'y', '\x2', '\x2', '\x832', '\x83C', '\a', 'z', '\x2', 
		'\x2', '\x833', '\x83C', '\a', '{', '\x2', '\x2', '\x834', '\x83C', '\a', 
		'|', '\x2', '\x2', '\x835', '\x83C', '\a', '}', '\x2', '\x2', '\x836', 
		'\x83C', '\a', '~', '\x2', '\x2', '\x837', '\x838', '\a', 'W', '\x2', 
		'\x2', '\x838', '\x83C', '\a', 'X', '\x2', '\x2', '\x839', '\x83A', '\a', 
		'Y', '\x2', '\x2', '\x83A', '\x83C', '\a', 'Z', '\x2', '\x2', '\x83B', 
		'\x808', '\x3', '\x2', '\x2', '\x2', '\x83B', '\x80D', '\x3', '\x2', '\x2', 
		'\x2', '\x83B', '\x812', '\x3', '\x2', '\x2', '\x2', '\x83B', '\x813', 
		'\x3', '\x2', '\x2', '\x2', '\x83B', '\x814', '\x3', '\x2', '\x2', '\x2', 
		'\x83B', '\x815', '\x3', '\x2', '\x2', '\x2', '\x83B', '\x816', '\x3', 
		'\x2', '\x2', '\x2', '\x83B', '\x817', '\x3', '\x2', '\x2', '\x2', '\x83B', 
		'\x818', '\x3', '\x2', '\x2', '\x2', '\x83B', '\x819', '\x3', '\x2', '\x2', 
		'\x2', '\x83B', '\x81A', '\x3', '\x2', '\x2', '\x2', '\x83B', '\x81B', 
		'\x3', '\x2', '\x2', '\x2', '\x83B', '\x81C', '\x3', '\x2', '\x2', '\x2', 
		'\x83B', '\x81D', '\x3', '\x2', '\x2', '\x2', '\x83B', '\x81E', '\x3', 
		'\x2', '\x2', '\x2', '\x83B', '\x81F', '\x3', '\x2', '\x2', '\x2', '\x83B', 
		'\x820', '\x3', '\x2', '\x2', '\x2', '\x83B', '\x821', '\x3', '\x2', '\x2', 
		'\x2', '\x83B', '\x822', '\x3', '\x2', '\x2', '\x2', '\x83B', '\x823', 
		'\x3', '\x2', '\x2', '\x2', '\x83B', '\x824', '\x3', '\x2', '\x2', '\x2', 
		'\x83B', '\x825', '\x3', '\x2', '\x2', '\x2', '\x83B', '\x826', '\x3', 
		'\x2', '\x2', '\x2', '\x83B', '\x827', '\x3', '\x2', '\x2', '\x2', '\x83B', 
		'\x829', '\x3', '\x2', '\x2', '\x2', '\x83B', '\x82B', '\x3', '\x2', '\x2', 
		'\x2', '\x83B', '\x82C', '\x3', '\x2', '\x2', '\x2', '\x83B', '\x82D', 
		'\x3', '\x2', '\x2', '\x2', '\x83B', '\x82E', '\x3', '\x2', '\x2', '\x2', 
		'\x83B', '\x82F', '\x3', '\x2', '\x2', '\x2', '\x83B', '\x830', '\x3', 
		'\x2', '\x2', '\x2', '\x83B', '\x831', '\x3', '\x2', '\x2', '\x2', '\x83B', 
		'\x832', '\x3', '\x2', '\x2', '\x2', '\x83B', '\x833', '\x3', '\x2', '\x2', 
		'\x2', '\x83B', '\x834', '\x3', '\x2', '\x2', '\x2', '\x83B', '\x835', 
		'\x3', '\x2', '\x2', '\x2', '\x83B', '\x836', '\x3', '\x2', '\x2', '\x2', 
		'\x83B', '\x837', '\x3', '\x2', '\x2', '\x2', '\x83B', '\x839', '\x3', 
		'\x2', '\x2', '\x2', '\x83C', '\x17D', '\x3', '\x2', '\x2', '\x2', '\x83D', 
		'\x83E', '\t', '\x18', '\x2', '\x2', '\x83E', '\x17F', '\x3', '\x2', '\x2', 
		'\x2', '\x134', '\x181', '\x188', '\x191', '\x195', '\x19E', '\x1A1', 
		'\x1A5', '\x1AD', '\x1B4', '\x1B7', '\x1BC', '\x1C1', '\x1C7', '\x1CF', 
		'\x1D1', '\x1DA', '\x1DE', '\x1E2', '\x1E5', '\x1E9', '\x1EC', '\x1F3', 
		'\x1F7', '\x1FA', '\x1FD', '\x200', '\x206', '\x20A', '\x20E', '\x21C', 
		'\x220', '\x226', '\x22D', '\x233', '\x237', '\x23B', '\x23D', '\x245', 
		'\x24A', '\x257', '\x25E', '\x26A', '\x274', '\x279', '\x27D', '\x284', 
		'\x287', '\x28F', '\x293', '\x296', '\x29D', '\x2A4', '\x2A8', '\x2AD', 
		'\x2B1', '\x2B4', '\x2B9', '\x2C8', '\x2CF', '\x2D7', '\x2DF', '\x2E8', 
		'\x2EF', '\x2F6', '\x2FE', '\x306', '\x30E', '\x316', '\x31E', '\x326', 
		'\x32F', '\x337', '\x340', '\x348', '\x350', '\x352', '\x355', '\x35B', 
		'\x361', '\x367', '\x36E', '\x377', '\x37F', '\x383', '\x38A', '\x38C', 
		'\x3A0', '\x3A4', '\x3AA', '\x3AF', '\x3B3', '\x3B6', '\x3BD', '\x3C4', 
		'\x3C8', '\x3D1', '\x3DC', '\x3E6', '\x3EB', '\x3F2', '\x3F5', '\x3FA', 
		'\x3FF', '\x414', '\x419', '\x41C', '\x427', '\x42D', '\x432', '\x435', 
		'\x43A', '\x43D', '\x444', '\x44D', '\x452', '\x455', '\x459', '\x45D', 
		'\x461', '\x466', '\x46B', '\x471', '\x477', '\x47D', '\x483', '\x489', 
		'\x48C', '\x492', '\x496', '\x49A', '\x49D', '\x4A5', '\x4A7', '\x4AD', 
		'\x4B0', '\x4B3', '\x4B6', '\x4BA', '\x4BE', '\x4C4', '\x4CE', '\x4D4', 
		'\x4DA', '\x4DF', '\x4E4', '\x4E8', '\x4F5', '\x4FB', '\x4FF', '\x505', 
		'\x50A', '\x519', '\x51D', '\x522', '\x527', '\x52C', '\x532', '\x535', 
		'\x53E', '\x542', '\x547', '\x54B', '\x551', '\x558', '\x569', '\x56B', 
		'\x572', '\x577', '\x57E', '\x582', '\x586', '\x58E', '\x594', '\x59A', 
		'\x59E', '\x5A0', '\x5A4', '\x5A9', '\x5AD', '\x5B0', '\x5B3', '\x5B6', 
		'\x5BB', '\x5BF', '\x5C2', '\x5C6', '\x5C9', '\x5CB', '\x5D0', '\x5D7', 
		'\x5DD', '\x5E1', '\x5E7', '\x5ED', '\x5F0', '\x5F2', '\x5F8', '\x5FC', 
		'\x602', '\x609', '\x60D', '\x60F', '\x613', '\x619', '\x625', '\x629', 
		'\x62B', '\x62F', '\x634', '\x637', '\x63E', '\x642', '\x647', '\x649', 
		'\x64D', '\x650', '\x653', '\x657', '\x65C', '\x663', '\x66A', '\x66F', 
		'\x673', '\x677', '\x67C', '\x680', '\x686', '\x688', '\x68E', '\x693', 
		'\x699', '\x69D', '\x69F', '\x6A2', '\x6A6', '\x6AA', '\x6AC', '\x6AE', 
		'\x6B1', '\x6BD', '\x6BF', '\x6C2', '\x6C5', '\x6C8', '\x6D1', '\x6D8', 
		'\x6DD', '\x6E0', '\x6E3', '\x6E5', '\x6E8', '\x6EB', '\x6EF', '\x6F4', 
		'\x701', '\x706', '\x70A', '\x70E', '\x713', '\x718', '\x71C', '\x71F', 
		'\x723', '\x72E', '\x732', '\x739', '\x73E', '\x742', '\x748', '\x74C', 
		'\x750', '\x759', '\x766', '\x76B', '\x772', '\x776', '\x779', '\x77C', 
		'\x77F', '\x783', '\x788', '\x78F', '\x793', '\x797', '\x79D', '\x7A2', 
		'\x7A6', '\x7AC', '\x7B2', '\x7B5', '\x7B8', '\x7C8', '\x7D0', '\x7D9', 
		'\x7DE', '\x7E1', '\x7E5', '\x7E9', '\x7EE', '\x7F4', '\x7F9', '\x7FD', 
		'\x806', '\x80B', '\x810', '\x83B',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
